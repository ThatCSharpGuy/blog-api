{	
	"id" : "/tv/ci/",
	"tv" : true,
	"date": "2016-11-15 12:00:00 -0600",
	"title" : "Integración continua",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//tv/ci/thumb.jpg",
	"tags" : ["Meta","Tv"],
	  
	"content": '"La integración continua es una práctica muy común en el desarrollo de software. El término apareció por ahí de 1993 en una <a href=\"http://dl.acm.org/citation.cfm?id=625253\" target=\"_blank\">publicación de Matthew Pittman</a>, y a partir de ahí se comenzó a popularizar.  \n\n<figure><img src='/postimages/tv/ci/post.jsonmention.jpg' alt='\"Lessons Learned in Managing Object-Oriented Development\" images_set' /></figure>\n\nEl nombre lo revela todo: consiste en que todos los desarrolladores de un equipo junten su trabajo de manera sistemática para garantizar que la aplicación que están programando \"funcione\" en todo momento. A este acto de juntar el trabajo es lo que se conoce como integración, y es continua porque, en teoría, debería realizarse con frecuencia, digamos que cada vez que un desarrollador corrija un *bug*, termine de programar una función o un módulo de la aplicación.  \n\n## \"Broken build\"  \nAl finalizar cada integración se debe compilar la aplicación completa y ejecutar todas las pruebas necesarias. En caso de que los test no pasen, o peor aún, que la aplicación no funcione, el equipo debe entrar en un estado de *\"broken build\"* o… compilación fallida. En este estado, la meta del equipo debe enfocarse por completo en corregir el problema que causó que la compilación o las pruebas fallaran.\n\nSi, por otro lado, la compilación es exitosa y todas las pruebas pasan correctamente, no pasa nada, el equipo de desarrolladores continua trabajando normalmente.\n\nCon esto se asegura que se tiene una aplicación siempre lista y funcional, sin importar en qué etapa del desarrollo se encuentre. Como ya te imaginas, esto requiere un montón de disciplina tanto personal como grupal, todos deben estar comprometidos con el trabajo que se está haciendo.\n\n## Herramientas  \nSi bien podrías usar la integración continua sin ninguna herramienta más que nuestros entornos de desarrollo, hacer esto pues no es lo ideal. Es por eso que existen muchas herramientas que por su propia cuenta tienen mucho valor, aunque no son específicas para hacer CI, y estas son: \n\n- Los sistemas de control de versiones, que nos ayudarán a realizar las integraciones de manera más sencilla.    \n- Herramientas para automatizar la compilación, es decir, que no tenga que haber nadie que le pique al botón de Build o Run en un IDE para que la aplicación se empiece a compilar.  \n- Herramientas de automatización de pruebas, que es más o menos lo mismo que lo de compilación, pero para ejecutar las pruebas.  \n\n## Herramientas de CI  \nAhora, hay algunas herramientas que nos ayudarán a implementar la integración continua de manera más sencilla, ambas son opcionales pero altamente recomendadas:\n\n- Una forma de alertar a los usuarios sobre cualquier evento de la compilación, como si esta falló o fue exitosa. Puede ser desde un correo electrónico a todos los miembros del equipo de desarrollo\n- Opcionalmente (y altamente recomendado) podemos hacer uso de un sistema de integración continua, que nos permita ejecutar las tareas de forma automática.  \n\n## Críticas  \nAhora, esta práctica no se salva de las críticas. \n\nUna de las más grandes críticas se basa en el hecho de que si la integración falla, los desarrolladores deben dejar su trabajo y dedicarse a resolver cualquiera que sea el problema. Sin duda te darás cuenta de que esto representa un gran problema, porque interfiere con la concentración del equipo. Además esta puede llevarnos a un estado en que mejor decidamos no integrar nuestro trabajo, <a href=\"http://www.yegor256.com/2014/10/08/continuous-integration-is-dead.html#what-about-discipline\" target=\"_blank\">por miedo a hacer</a> que la compilación falle.\n\nLa otra es que si no tenemos bien refinado el proceso, se pueden  ocasionar cuellos de botella, si la compilación tarda mucho o si los *tests* tardan mucho tiempo, se puede tener a un desarrollador esperando al resultado de su integración. Ahora, ¿te imaginas si dos subieran su trabajo al mismo tiempo?\n\n## Lo que en realidad pasa  \nMuchas veces ocurre que se tienen todas las herramientas y todo configurado, pero en realidad no aplicas la integración continua:  \n\nLa compilación falla… pero a nadie le importa y todos siguen trabajando como si nada, tal vez alguien intente resolver el problema en el código a unos días de realizar la liberación a producción.\n\nUna alternativa es <a href=\"https://luixrodriguezneches.wordpress.com/2012/08/27/continuous-integration-is-not-the-key/\" target=\"_blank\">evitar que la rama principal se rompa</a> y fallar \"en secreto\", es decir, que exista un intermediario entre el código funcional de la aplicación y el desarrollador. Y que en caso de que falle, se le informe únicamente a quien hizo que fallara para que él trate de resolverlo antes de detener toda la producción.\n\n## Sistemas completos  \nFinalmente, si deseas implementar la integración continua en tu lugar de trabajo, existen algunas herramientas que te pueden facilitar el trabajo:   \n\n- Travis CI\n- Bitrise\n- AppVeyor\n- Codeship\n- Runnable\n- <a href=\"https://github.com/integrations/feature/continuous-integration\" target=\"_blank\">Ver más</a>\n"'   
}