{	
	"id" : "/post/debugging-1/",
	"tv" : false,
	"date": "2016-10-31 13:00:01 -0600",
	"title" : "Debugging parte 1",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/debugging/f.png",
	"tags" :
	["AprendeCSharp"],
	
	"content" : body"Estoy seguro que nadie ha escrito un programa que a la primera salga bien, y también estoy seguro de que para corregir los errores en los tuyos has tenido que *debuguear* el código. En este post te voy a dar algunos tips para que depures tu código en C# y tu IDE de confianza.\n\n## Directivas de preprocesamiento  \nPrimero comencemos por la <a href=\"../directivas-preprocesador-c-sharp\">directiva de preprocesamiento</a> `#if` y el símbolo `DEBUG`. Si envuelves cualquier parte de código entre un `if DEBUG` y `#endif` únicamente será compilado cuando el símbolo en cuestión esté definido. Si estás usando un IDE es muy común que `DEBUG` esté definido cuando estás usando la configuración  *Debug* de tu proyecto.\n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\n{% post_image config-vs.png \"Distintas salidas\" %}\n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">\n{% post_image config-xs.jpg \"Distintas salidas\" %}\n</div>  \n</div>  \n\n{% highlight csharp %}\n#if DEBUG\nConsole.WriteLine(\"Solo visible en modo debug, directiva: DEBUG\");\n#endif\n{% endhighlight %}  \n\n## Sobreescribir el método ToString  \nOtra de las cosas que puedes hacer es sobreescribir el método `ToString` en tus clases, ya que por default, C# regresará el nombre calificado del tipo que estamos llamando. Si, por ejemplo, hubiéramos sobreescrito el método en nuestra clase `TestClass` de la siguiente manera:  \n\n{% highlight csharp %}\npublic class TestClass\n{\n    public string Propiedad1 { get; set; }\n    public override string ToString()\n    {\n        return string.Format(\"{0}:{1}\", nameof(Propiedad1), Propiedad1);\n    }\n{% endhighlight %}  \n\nAl llamar al método `Console.WriteLine` de la siguiente manera:\n\n{% highlight csharp %}\nConsole.WriteLine(tc);\n{% endhighlight %}  \n\nHubiéramos obtenido lo siguiente:  \n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\nSin sobreescribir <code>ToString</code>\n{% highlight csharp %}\nDebuggingTips.TestClass\n{% endhighlight %}  \n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">\nSobreescribiendo <code>ToString</code>\n{% highlight csharp %}\nPropiedad1: Uno\n{% endhighlight %}  \n</div>  \n</div>  \n\n## Atributo DebuggerDisplay  \nExiste una falla con usar `ToString`... y es que esta es una modificación que afectará a toda nuestra aplicación, aún cuando no estemos depurando el código. Para solucionarlo, podemos comentar ese código cuando ya no estemos depurando o envolver la sobreescritura en un `#if DEBUG`.\n\nPero bueno, las dos opciones suenan un poco mal. Si tu aplicación no tiene alguna forma de escribir en pantalla y únicamente vas a depurar en el IDE, puedes hacer uso del <a href=\"../atributos-c-sharp\">atributo</a> `DebuggerDisplay` \n\n{% highlight csharp %}\n[DebuggerDisplay(\"Propiedad1: {Propiedad1}\")]\npublic class TestClass\n{% endhighlight %}  \n\nQue en pocas palabras, le dirá a nuestro entorno de desarrollo cómo debe mostrar los tipos de dato cuando estemos *debugueando*:  \n\n{% post_image debugger-display.jpg \"Distintas salidas\" %}\n\n## Métodos de la clase Diagnostics.Debug  \nOtra de las opciones que tenemos (y que yo descubrí recientemente) es la clase `Debug` en el *namespace* `System.Diagnostics`.\n\nPrimero, no siempre vas a estar programando aplicaciones que tengan una consola disponible, entonces no siempre vas a poder usar la clase `Console`, es aquí cuando podemos usar:\n\n{% highlight csharp %}\nSystem.Diagnostics.Debug.WriteLine(tc + \"// Debug.WriteLine \");\n{% endhighlight %}  \n\nQue como puedes ver, es muy parecido al método que ya conoces. Con la diferencia de que este escribe a otro flujo de datos. En tu entorno de desarrollo generalmente lo podrás ver en la ventana de *Salida de la aplicación* o *Application output*:\n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\n{% post_image writelines-vs.png \"Distintas salidas\" %}\n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">\n{% post_image writelines-xs.jpg \"Distintas salidas\" %}\n</div>  \n</div>  \n\n\nHay ocasiones en las que solamente deseamos saber si una o varias condiciones se cumpliero, y pareciera que ese es trabajo para la sentencia de control `if`. O, podrías usar el método `WriteLineIf` si el valor enviado como primer parámetro es verdadero. Está de más decir que podemos llamar a ejecutar una función ahí dentro:\n\n{% highlight csharp %}\nSystem.Diagnostics.Debug.WriteLineIf(tc.Propiedad1.Equals(\"Dos\"), tc);\n{% endhighlight %}  \n\nEn este post únicamente hablé del método `WriteLine` y `WriteLineIf`, pero tienes que saber que esta clase tiene muchas más características.\n\nEn futuros posts estaré hablando de más tips para depurar usando Visual Studio y Xamarin Studio, así que <a href=\"http://localhost:4000/unete/\">no olvides suscribirte</a> para estar enterado.\n "
}