{	
	"id" : "/post/debugging-1/",
	"tv" : false,
	"date": "2016-10-31 13:00:01 -0600",
	"title" : "Debugging parte 1",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/debugging/f.png",
	"tags" : ["AprendeCSharp"],
	"content": "<p>Estoy seguro que nadie ha escrito un programa que a la primera salga bien, y también estoy seguro de que para corregir los errores en los tuyos has tenido que <em>debuguear</em> el código. En este post te voy a dar algunos tips para que depures tu código en C# y tu IDE de confianza.</p>\n\n<h2 id=\"directivas-de-preprocesamiento\">Directivas de preprocesamiento</h2>\n<p>Primero comencemos por la <a href=\"../directivas-preprocesador-c-sharp\">directiva de preprocesamiento</a> <code>#if</code> y el símbolo <code>DEBUG</code>. Si envuelves cualquier parte de código entre un <code>if DEBUG</code> y <code>#endif</code> únicamente será compilado cuando el símbolo en cuestión esté definido. Si estás usando un IDE es muy común que <code>DEBUG</code> esté definido cuando estás usando la configuración  <em>Debug</em> de tu proyecto.</p>\n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\n post_image config-vs.png \"Distintas salidas\" \n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">\n post_image config-xs.jpg \"Distintas salidas\" \n</div>  \n</div>\n\n<pre class=\"csharp\">\n#if DEBUG\nConsole.WriteLine(\"Solo visible en modo debug, directiva: DEBUG\");\n#endif\n</pre>\n\n<h2 id=\"sobreescribir-el-mtodo-tostring\">Sobreescribir el método ToString</h2>\n<p>Otra de las cosas que puedes hacer es sobreescribir el método <code>ToString</code> en tus clases, ya que por default, C# regresará el nombre calificado del tipo que estamos llamando. Si, por ejemplo, hubiéramos sobreescrito el método en nuestra clase <code>TestClass</code> de la siguiente manera:</p>\n\n<pre class=\"csharp\">\npublic class TestClass\n\n    public string Propiedad1  get; set; \n    public override string ToString()\n    \n        return string.Format(\"0:1\", nameof(Propiedad1), Propiedad1);\n    \n</pre>\n\n<p>Al llamar al método <code>Console.WriteLine</code> de la siguiente manera:</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(tc);\n</pre>\n\n<p>Hubiéramos obtenido lo siguiente:</p>\n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\nSin sobreescribir <code>ToString</code>\n<pre class=\"csharp\">\nDebuggingTips.TestClass\n</pre>  \n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">\nSobreescribiendo <code>ToString</code>\n<pre class=\"csharp\">\nPropiedad1: Uno\n</pre>  \n</div>  \n</div>\n\n<h2 id=\"atributo-debuggerdisplay\">Atributo DebuggerDisplay</h2>\n<p>Existe una falla con usar <code>ToString</code>… y es que esta es una modificación que afectará a toda nuestra aplicación, aún cuando no estemos depurando el código. Para solucionarlo, podemos comentar ese código cuando ya no estemos depurando o envolver la sobreescritura en un <code>#if DEBUG</code>.</p>\n\n<p>Pero bueno, las dos opciones suenan un poco mal. Si tu aplicación no tiene alguna forma de escribir en pantalla y únicamente vas a depurar en el IDE, puedes hacer uso del <a href=\"../atributos-c-sharp\">atributo</a> <code>DebuggerDisplay</code></p>\n\n<pre class=\"csharp\">\n[DebuggerDisplay(\"Propiedad1: Propiedad1\")]\npublic class TestClass\n</pre>\n\n<p>Que en pocas palabras, le dirá a nuestro entorno de desarrollo cómo debe mostrar los tipos de dato cuando estemos <em>debugueando</em>:</p>\n\n<p>post_image debugger-display.jpg “Distintas salidas”</p>\n\n<h2 id=\"mtodos-de-la-clase-diagnosticsdebug\">Métodos de la clase Diagnostics.Debug</h2>\n<p>Otra de las opciones que tenemos (y que yo descubrí recientemente) es la clase <code>Debug</code> en el <em>namespace</em> <code>System.Diagnostics</code>.</p>\n\n<p>Primero, no siempre vas a estar programando aplicaciones que tengan una consola disponible, entonces no siempre vas a poder usar la clase <code>Console</code>, es aquí cuando podemos usar:</p>\n\n<pre class=\"csharp\">\nSystem.Diagnostics.Debug.WriteLine(tc + \"// Debug.WriteLine \");\n</pre>\n\n<p>Que como puedes ver, es muy parecido al método que ya conoces. Con la diferencia de que este escribe a otro flujo de datos. En tu entorno de desarrollo generalmente lo podrás ver en la ventana de <em>Salida de la aplicación</em> o <em>Application output</em>:</p>\n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\n post_image writelines-vs.png \"Distintas salidas\" \n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">\n post_image writelines-xs.jpg \"Distintas salidas\" \n</div>  \n</div>\n\n<p>Hay ocasiones en las que solamente deseamos saber si una o varias condiciones se cumpliero, y pareciera que ese es trabajo para la sentencia de control <code>if</code>. O, podrías usar el método <code>WriteLineIf</code> si el valor enviado como primer parámetro es verdadero. Está de más decir que podemos llamar a ejecutar una función ahí dentro:</p>\n\n<pre class=\"csharp\">\nSystem.Diagnostics.Debug.WriteLineIf(tc.Propiedad1.Equals(\"Dos\"), tc);\n</pre>\n\n<p>En este post únicamente hablé del método <code>WriteLine</code> y <code>WriteLineIf</code>, pero tienes que saber que esta clase tiene muchas más características.</p>\n\n<p>En futuros posts estaré hablando de más tips para depurar usando Visual Studio y Xamarin Studio, así que <a href=\"http://localhost:4000/unete/\">no olvides suscribirte</a> para estar enterado.</p>\n\n"
}