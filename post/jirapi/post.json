{	
	"id" : "/post/jirapi/",
	"tv" : false,
	"date": "2016-05-26 14:00:01 -0500",
	"title" : "Jirapi",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//jirapi/featured.png",
	"tags" : ["NuGetRecomendado"],
	  
	"content": '"Este <a href=\"http://thatcsharpguy.com/tag/NuGetRecomendado\">#NuGetRecomendado</a> es un poco diferente, esta vez se trata de un paquete que yo mismo he creado. Se llama Jirapi y es un cliente para consumir la Pokéapi, que es una API que ofrece un montón de información sobre los juegos de Pokémon. El cliente es bastante sencillo, y está hecho <a href=\"http://thatcsharpguy.com/tag/NuGetRecomendado\">usando Flurl</a>, otro paquete de NuGet que les recomendé ya hace algunas semanas.\r\n\r\nAhora, tal vez te estés preguntando: ¿para qué demonios me va a servir esto? y pues tal vez pienses que para no mucho... mas que para jugar o, si como yo, estás interesado en dar presentaciones, enseñar alguna tecnología (como Xamarin) o crear pequeñas aplicaciones, esta librería te resultará muy útil. \r\n\r\n## ¿Qué puede hacer Jirapi?  \r\nEn Jirapi están disponibles todos los recursos que indica <a href=\"http://pokeapi.co/docsv2/\" target=\"_blank\" rel=\"nofollow\">documentación</a> de Jirapi. En esta librería, dichos recursos están representados por clases dentro del *namespace* `Jirapi.Resources`, por ejemplo: el recurso `/pokedex` es representado por la clase `Pokedex` y recurso `/pokemon-species` por `PokemonSpecies`.\r\n\r\nPara acceder a ellos es necesario crear una instancia de la clase `PokeClient`:\r\n\r\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">pokeClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PokeClient</span><span class="p">();</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \r\n\r\nDe acuerdo con la documentación, podemos acceder a una lista de los recursos disponibles, y con este pequeño cliente esta acción se realiza con el método `GetResourceList<T>`, en donde `T` debe ser uno de los recursos antes mencionados. \r\n\r\nPor ejemplo, si quisiéramos obtener una lista de todos los Pokédex, haríamos algo como esto:\r\n\r\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">dexes</span> <span class="p">=</span> <span class="k">await</span> <span class="n">pokeClient</span><span class="p">.</span><span class="n">GetResourceList</span><span class="p">&lt;</span><span class="n">Pokedex</span><span class="p">&gt;();</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">n</span></code></pre></figure>   \r\n\r\nEl método devuelve una instancia de la clase `ApiResourceList<Pokedex>` que contiene los resultados en una lista de de `NamedApiResource<Pokedex>`:\r\n\r\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nConsole</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Pokedexes\&quot;);\r\nforeach (var dex in dexes.Results)\r\n{\r\n    Console.WriteLine(dex.Name);\r\n}\r\n</span></code></pre></figure>  \r\n\r\nLos `NamedApiResource` solamente son una contienen información básica del recurso, como su nombre, su id y la url desde la que se puede acceder a él. Pero teniendo un recurso podemos acceder al objeto completo usando el método `GetResource`:\r\n\r\nSupongamos que queremos obtener el pokédex de *kanto*:\r\n\r\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">kantoDex</span> <span class="p">=</span> <span class="k">await</span> <span class="n">dexes</span><span class="p">.</span><span class="n">Results</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">n</span>    <span class="p">.</span><span class="n">First</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;kanto\&quot;))\r\n    .GetResource();\r\n</span></code></pre></figure>  \r\n\r\nEn este caso, `kantoDex` ya contiene el recurso completo, es por eso que podemos acceder a más información, como sus descripciones:\r\n\r\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nforeach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">description</span> <span class="k">in</span> <span class="n">kantoDex</span><span class="p">.</span><span class="n">Descriptions</span><span class="p">)</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">n</span>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;\\t ({0}): {1}\&quot;,description.Language.Name, description.Description1);\r\n}\r\n</span></code></pre></figure>  \r\n\r\nAdemás de acceder a un listado de los recursos, también podemos acceder a un recurso directamente, para esto hay dos métodos para hacerlo:\r\n\r\n### Get\r\nPodemos usar `Get` indicando el nombre del recurso:\r\n\r\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">pikachu</span> <span class="p">=</span> <span class="k">await</span> <span class="n">pokeClient</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">Pokemon</span><span class="p">&gt;(</span><span class="err">\</span><span class="s">&quot;pikachu\&quot;);\r\n</span></code></pre></figure>  \r\n\r\nO su identificador:\r\n\r\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">jirachi</span> <span class="p">=</span> <span class="k">await</span> <span class="n">pokeClient</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">Pokemon</span><span class="p">&gt;(</span><span class="m">385</span><span class="p">);</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \r\n\r\n### GetByUrl\r\nO también podemos acceder a él a través de su url:\r\n\r\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">netBall</span> <span class="p">=</span> <span class="k">await</span> <span class="n">pokeClient</span><span class="p">.</span><span class="n">GetByUrl</span><span class="p">&lt;</span><span class="n">Item</span><span class="p">&gt;(</span><span class="err">\</span><span class="s">&quot;http://pokeapi.co/api/v2/item/6\&quot;);\r\n</span></code></pre></figure>  \r\n\r\n## Conclusión  \r\nEs cierto que Jirapi parece que es cliente un poco rebuscado, pero esto se debe a que la Pokéapi está definida de esa manera, sin embargo, espero la uses en tu proyectos, presentaciones y demos. Lo cierto es que también le falta un poco de desarrollo: algunos de los recursos fallan y no tiene manejo de errores. Pero está en constante desarrollo, si quieres contribuir a su desarrollo, no dudes en hacerlo.\r\n \r\n# Instalación  \r\nPara instalarlo no hay mejor manera que el gestor de paquetes de NuGet, en este caso es solo un paquete llamado... **Jirapi**.\r\n\r\n<figure class="console"><pre><code>\r\nPM> Install-Package Jirapi\r\n</code></pre></figure>\r\n\r\nNo olvides echarle un ojo al <a href=\"https://github.com/ThatCSharpGuy/Jirapi\" target=\"_blank\" rel=\"nofollow\">proyecto en GitHub</a> si tienes dudas o deseas hacer unos cuantos *pull requests*."'   
}