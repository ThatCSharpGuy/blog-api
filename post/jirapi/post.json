{	
	"id" : "/post/jirapi/",
	"tv" : false,
	"date": "2016-05-26 14:00:01 -0500",
	"title" : "Jirapi",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//jirapi/featured.png",
	"tags" : ["NuGetRecomendado"],
	"content": "<p>Este <a href=\"http://thatcsharpguy.com/tag/NuGetRecomendado\">#NuGetRecomendado</a> es un poco diferente, esta vez se trata de un paquete que yo mismo he creado. Se llama Jirapi y es un cliente para consumir la Pokéapi, que es una API que ofrece un montón de información sobre los juegos de Pokémon. El cliente es bastante sencillo, y está hecho <a href=\"http://thatcsharpguy.com/tag/NuGetRecomendado\">usando Flurl</a>, otro paquete de NuGet que les recomendé ya hace algunas semanas.</p>\n\n<p>Ahora, tal vez te estés preguntando: ¿para qué demonios me va a servir esto? y pues tal vez pienses que para no mucho… mas que para jugar o, si como yo, estás interesado en dar presentaciones, enseñar alguna tecnología (como Xamarin) o crear pequeñas aplicaciones, esta librería te resultará muy útil.</p>\n\n<h2 id=\"qu-puede-hacer-jirapi\">¿Qué puede hacer Jirapi?</h2>\n<p>En Jirapi están disponibles todos los recursos que indica <a href=\"http://pokeapi.co/docsv2/\" target=\"_blank\" rel=\"nofollow\">documentación</a> de Jirapi. En esta librería, dichos recursos están representados por clases dentro del <em>namespace</em> <code>Jirapi.Resources</code>, por ejemplo: el recurso <code>/pokedex</code> es representado por la clase <code>Pokedex</code> y recurso <code>/pokemon-species</code> por <code>PokemonSpecies</code>.</p>\n\n<p>Para acceder a ellos es necesario crear una instancia de la clase <code>PokeClient</code>:</p>\n\n<pre class=\"csharp\">\nvar pokeClient = new PokeClient();\n</pre>\n\n<p>De acuerdo con la documentación, podemos acceder a una lista de los recursos disponibles, y con este pequeño cliente esta acción se realiza con el método <code>GetResourceList&lt;T&gt;</code>, en donde <code>T</code> debe ser uno de los recursos antes mencionados.</p>\n\n<p>Por ejemplo, si quisiéramos obtener una lista de todos los Pokédex, haríamos algo como esto:</p>\n\n<pre class=\"csharp\">\nvar dexes = await pokeClient.GetResourceList<pokedex>();\n   \n\nEl método devuelve una instancia de la clase `ApiResourceList<pokedex>` que contiene los resultados en una lista de de `NamedApiResource<pokedex>`:\n\n<pre class=\"csharp\">\nConsole.WriteLine(\"Pokedexes\");\nforeach (var dex in dexes.Results)\n\n    Console.WriteLine(dex.Name);\n\n</pre>  \n\nLos `NamedApiResource` solamente son una contienen información básica del recurso, como su nombre, su id y la url desde la que se puede acceder a él. Pero teniendo un recurso podemos acceder al objeto completo usando el método `GetResource`:\n\nSupongamos que queremos obtener el pokédex de *kanto*:\n\n<pre class=\"csharp\">\nvar kantoDex = await dexes.Results\n    .First(d =&gt; d.Name.Equals(\"kanto\"))\n    .GetResource();\n</pre>  \n\nEn este caso, `kantoDex` ya contiene el recurso completo, es por eso que podemos acceder a más información, como sus descripciones:\n\n<pre class=\"csharp\">\nforeach (var description in kantoDex.Descriptions)\n\n    Console.WriteLine(\"\\t (0): 1\",description.Language.Name, description.Description1);\n\n</pre>  \n\nAdemás de acceder a un listado de los recursos, también podemos acceder a un recurso directamente, para esto hay dos métodos para hacerlo:\n\n### Get\nPodemos usar `Get` indicando el nombre del recurso:\n\n<pre class=\"csharp\">\nvar pikachu = await pokeClient.Get<pokemon>(\"pikachu\");\n  \n\nO su identificador:\n\n<pre class=\"csharp\">\nvar jirachi = await pokeClient.Get<pokemon>(385);\n  \n\n### GetByUrl\nO también podemos acceder a él a través de su url:\n\n<pre class=\"csharp\">\nvar netBall = await pokeClient.GetByUrl<item>(\"http://pokeapi.co/api/v2/item/6\");\n  \n\n## Conclusión  \nEs cierto que Jirapi parece que es cliente un poco rebuscado, pero esto se debe a que la Pokéapi está definida de esa manera, sin embargo, espero la uses en tu proyectos, presentaciones y demos. Lo cierto es que también le falta un poco de desarrollo: algunos de los recursos fallan y no tiene manejo de errores. Pero está en constante desarrollo, si quieres contribuir a su desarrollo, no dudes en hacerlo.\n \n# Instalación  \nPara instalarlo no hay mejor manera que el gestor de paquetes de NuGet, en este caso es solo un paquete llamado... **Jirapi**.\n\n console titulo \nPM&gt; Install-Package Jirapi\n endconsole \n\nNo olvides echarle un ojo al <a href=\"https://github.com/ThatCSharpGuy/Jirapi\" target=\"_blank\" rel=\"nofollow\">proyecto en GitHub</a> si tienes dudas o deseas hacer unos cuantos *pull requests*.\n</item></pre></pokemon></pre></pokemon></pre></pokedex></pokedex></pokedex></pre>\n"
}