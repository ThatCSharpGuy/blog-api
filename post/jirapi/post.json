{	
	"id" : "/post/jirapi/",
	"tv" : false,
	"date": "2016-05-26 14:00:01 -0500",
	"title" : "Jirapi",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//jirapi/featured.png",
	"tags" :
	[ 
		"NuGetRecomendado"
	],
	"content" : "<p>Este <a href=\"http://thatcsharpguy.com/tag/NuGetRecomendado\">#NuGetRecomendado</a> es un poco diferente, esta vez se trata de un paquete que yo mismo he creado. Se llama Jirapi y es un cliente para consumir la Pokéapi, que es una API que ofrece un montón de información sobre los juegos de Pokémon. El cliente es bastante sencillo, y está hecho <a href=\"http://thatcsharpguy.com/tag/NuGetRecomendado\">usando Flurl</a>, otro paquete de NuGet que les recomendé ya hace algunas semanas.</p>

<p>Ahora, tal vez te estés preguntando: ¿para qué demonios me va a servir esto? y pues tal vez pienses que para no mucho… mas que para jugar o, si como yo, estás interesado en dar presentaciones, enseñar alguna tecnología (como Xamarin) o crear pequeñas aplicaciones, esta librería te resultará muy útil.</p>

<h2 id=\"qu-puede-hacer-jirapi\">¿Qué puede hacer Jirapi?</h2>
<p>En Jirapi están disponibles todos los recursos que indica <a href=\"http://pokeapi.co/docsv2/\" target=\"_blank\" rel=\"nofollow\">documentación</a> de Jirapi. En esta librería, dichos recursos están representados por clases dentro del <em>namespace</em> <code>Jirapi.Resources</code>, por ejemplo: el recurso <code>/pokedex</code> es representado por la clase <code>Pokedex</code> y recurso <code>/pokemon-species</code> por <code>PokemonSpecies</code>.</p>

<p>Para acceder a ellos es necesario crear una instancia de la clase <code>PokeClient</code>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">pokeClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PokeClient</span><span class="p">();</span></code></pre></figure></p>

<p>De acuerdo con la documentación, podemos acceder a una lista de los recursos disponibles, y con este pequeño cliente esta acción se realiza con el método <code>GetResourceList&lt;T&gt;</code>, en donde <code>T</code> debe ser uno de los recursos antes mencionados.</p>

<p>Por ejemplo, si quisiéramos obtener una lista de todos los Pokédex, haríamos algo como esto:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">dexes</span> <span class="p">=</span> <span class="k">await</span> <span class="n">pokeClient</span><span class="p">.</span><span class="n">GetResourceList</span><span class="p">&lt;</span><span class="n">pokedex</span><span class="p">&gt;();</span></code></pre></figure></pokedex></p>

<p>El método devuelve una instancia de la clase <code>ApiResourceList&lt;Pokedex&gt;</code> que contiene los resultados en una lista de de <code>NamedApiResource&lt;Pokedex&gt;</code>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">Pokedexes</span><span class="err">”</span><span class="p">);</span>
<span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">dex</span> <span class="k">in</span> <span class="n">dexes</span><span class="p">.</span><span class="n">Results</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">dex</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>

<p>Los <code>NamedApiResource</code> solamente son una contienen información básica del recurso, como su nombre, su id y la url desde la que se puede acceder a él. Pero teniendo un recurso podemos acceder al objeto completo usando el método <code>GetResource</code>:</p>

<p>Supongamos que queremos obtener el pokédex de <em>kanto</em>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">kantoDex</span> <span class="p">=</span> <span class="k">await</span> <span class="n">dexes</span><span class="p">.</span><span class="n">Results</span>
    <span class="p">.</span><span class="n">First</span><span class="p">(</span><span class="n">d</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">d</span><span class="p">.</span><span class="n">Name</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="err">“</span><span class="n">kanto</span><span class="err">”</span><span class="p">))</span>
    <span class="p">.</span><span class="n">GetResource</span><span class="p">();</span></code></pre></figure></p>

<p>En este caso, <code>kantoDex</code> ya contiene el recurso completo, es por eso que podemos acceder a más información, como sus descripciones:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">description</span> <span class="k">in</span> <span class="n">kantoDex</span><span class="p">.</span><span class="n">Descriptions</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“\</span><span class="n">t</span> <span class="p">({</span><span class="m">0</span><span class="p">}):</span> <span class="p">{</span><span class="m">1</span><span class="p">}</span><span class="err">”</span><span class="p">,</span><span class="n">description</span><span class="p">.</span><span class="n">Language</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">description</span><span class="p">.</span><span class="n">Description1</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>

<p>Además de acceder a un listado de los recursos, también podemos acceder a un recurso directamente, para esto hay dos métodos para hacerlo:</p>

<h3 id=\"get\">Get</h3>
<p>Podemos usar <code>Get</code> indicando el nombre del recurso:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">pikachu</span> <span class="p">=</span> <span class="k">await</span> <span class="n">pokeClient</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">pokemon</span><span class="p">&gt;(</span><span class="err">\</span><span class="s">&quot;pikachu\&quot;);</span></code></pre></figure></pokemon></p>

<p>O su identificador:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">jirachi</span> <span class="p">=</span> <span class="k">await</span> <span class="n">pokeClient</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">pokemon</span><span class="p">&gt;(</span><span class="m">385</span><span class="p">);</span></code></pre></figure></pokemon></p>

<h3 id=\"getbyurl\">GetByUrl</h3>
<p>O también podemos acceder a él a través de su url:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">netBall</span> <span class="p">=</span> <span class="k">await</span> <span class="n">pokeClient</span><span class="p">.</span><span class="n">GetByUrl</span><span class="p">&lt;</span><span class="n">item</span><span class="p">&gt;(</span><span class="err">\</span><span class="s">&quot;http://pokeapi.co/api/v2/item/6\&quot;);</span></code></pre></figure></item></p>

<h2 id=\"conclusin\">Conclusión</h2>
<p>Es cierto que Jirapi parece que es cliente un poco rebuscado, pero esto se debe a que la Pokéapi está definida de esa manera, sin embargo, espero la uses en tu proyectos, presentaciones y demos. Lo cierto es que también le falta un poco de desarrollo: algunos de los recursos fallan y no tiene manejo de errores. Pero está en constante desarrollo, si quieres contribuir a su desarrollo, no dudes en hacerlo.</p>

<h1 id=\"instalacin\">Instalación</h1>
<p>Para instalarlo no hay mejor manera que el gestor de paquetes de NuGet, en este caso es solo un paquete llamado… <strong>Jirapi</strong>.</p>

<p><figure class="console"><pre><code>PM&gt; Install-Package Jirapi</code></pre></figure></p>

<p>No olvides echarle un ojo al <a href=\"https://github.com/ThatCSharpGuy/Jirapi\" target=\"_blank\" rel=\"nofollow\">proyecto en GitHub</a> si tienes dudas o deseas hacer unos cuantos <em>pull requests</em>.</p>
"
}