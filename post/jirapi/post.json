{	
	"id" : "/post/jirapi/",
	"tv" : false,
	"date": "2016-05-26 14:00:01 -0500",
	"title" : "Jirapi",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//jirapi/featured.png",
	"tags" : ["NuGetRecomendado"],
	"content": "Este <a href=\"http://thatcsharpguy.com/tag/NuGetRecomendado\">#NuGetRecomendado</a> es un poco diferente, esta vez se trata de un paquete que yo mismo he creado. Se llama Jirapi y es un cliente para consumir la Pokéapi, que es una API que ofrece un montón de información sobre los juegos de Pokémon. El cliente es bastante sencillo, y está hecho <a href=\"http://thatcsharpguy.com/tag/NuGetRecomendado\">usando Flurl</a>, otro paquete de NuGet que les recomendé ya hace algunas semanas.\r\n\r\nAhora, tal vez te estés preguntando: ¿para qué demonios me va a servir esto? y pues tal vez pienses que para no mucho... mas que para jugar o, si como yo, estás interesado en dar presentaciones, enseñar alguna tecnología (como Xamarin) o crear pequeñas aplicaciones, esta librería te resultará muy útil. \r\n\r\n## ¿Qué puede hacer Jirapi?  \r\nEn Jirapi están disponibles todos los recursos que indica <a href=\"http://pokeapi.co/docsv2/\" target=\"_blank\" rel=\"nofollow\">documentación</a> de Jirapi. En esta librería, dichos recursos están representados por clases dentro del *namespace* `Jirapi.Resources`, por ejemplo: el recurso `/pokedex` es representado por la clase `Pokedex` y recurso `/pokemon-species` por `PokemonSpecies`.\r\n\r\nPara acceder a ellos es necesario crear una instancia de la clase `PokeClient`:\r\n\r\n<pre class=\"csharp\">\r\nvar pokeClient = new PokeClient();\r\n</pre>  \r\n\r\nDe acuerdo con la documentación, podemos acceder a una lista de los recursos disponibles, y con este pequeño cliente esta acción se realiza con el método `GetResourceList<T>`, en donde `T` debe ser uno de los recursos antes mencionados. \r\n\r\nPor ejemplo, si quisiéramos obtener una lista de todos los Pokédex, haríamos algo como esto:\r\n\r\n<pre class=\"csharp\">\r\nvar dexes = await pokeClient.GetResourceList<Pokedex>();\r\n</pre>   \r\n\r\nEl método devuelve una instancia de la clase `ApiResourceList<Pokedex>` que contiene los resultados en una lista de de `NamedApiResource<Pokedex>`:\r\n\r\n<pre class=\"csharp\">\r\nConsole.WriteLine(\"Pokedexes\");\r\nforeach (var dex in dexes.Results)\r\n\r\n    Console.WriteLine(dex.Name);\r\n\r\n</pre>  \r\n\r\nLos `NamedApiResource` solamente son una contienen información básica del recurso, como su nombre, su id y la url desde la que se puede acceder a él. Pero teniendo un recurso podemos acceder al objeto completo usando el método `GetResource`:\r\n\r\nSupongamos que queremos obtener el pokédex de *kanto*:\r\n\r\n<pre class=\"csharp\">\r\nvar kantoDex = await dexes.Results\r\n    .First(d => d.Name.Equals(\"kanto\"))\r\n    .GetResource();\r\n</pre>  \r\n\r\nEn este caso, `kantoDex` ya contiene el recurso completo, es por eso que podemos acceder a más información, como sus descripciones:\r\n\r\n<pre class=\"csharp\">\r\nforeach (var description in kantoDex.Descriptions)\r\n\r\n    Console.WriteLine(\"\\t (0): 1\",description.Language.Name, description.Description1);\r\n\r\n</pre>  \r\n\r\nAdemás de acceder a un listado de los recursos, también podemos acceder a un recurso directamente, para esto hay dos métodos para hacerlo:\r\n\r\n### Get\r\nPodemos usar `Get` indicando el nombre del recurso:\r\n\r\n<pre class=\"csharp\">\r\nvar pikachu = await pokeClient.Get<Pokemon>(\"pikachu\");\r\n</pre>  \r\n\r\nO su identificador:\r\n\r\n<pre class=\"csharp\">\r\nvar jirachi = await pokeClient.Get<Pokemon>(385);\r\n</pre>  \r\n\r\n### GetByUrl\r\nO también podemos acceder a él a través de su url:\r\n\r\n<pre class=\"csharp\">\r\nvar netBall = await pokeClient.GetByUrl<Item>(\"http://pokeapi.co/api/v2/item/6\");\r\n</pre>  \r\n\r\n## Conclusión  \r\nEs cierto que Jirapi parece que es cliente un poco rebuscado, pero esto se debe a que la Pokéapi está definida de esa manera, sin embargo, espero la uses en tu proyectos, presentaciones y demos. Lo cierto es que también le falta un poco de desarrollo: algunos de los recursos fallan y no tiene manejo de errores. Pero está en constante desarrollo, si quieres contribuir a su desarrollo, no dudes en hacerlo.\r\n \r\n# Instalación  \r\nPara instalarlo no hay mejor manera que el gestor de paquetes de NuGet, en este caso es solo un paquete llamado... **Jirapi**.\r\n\r\n console titulo \r\nPM> Install-Package Jirapi\r\n endconsole \r\n\r\nNo olvides echarle un ojo al <a href=\"https://github.com/ThatCSharpGuy/Jirapi\" target=\"_blank\" rel=\"nofollow\">proyecto en GitHub</a> si tienes dudas o deseas hacer unos cuantos *pull requests*."
}