{	
	"id" : "/post/platformtabbedpage-xamarin-forms-en/",
	"tv" : false,
	"date": "2017-02-02 13:00:01 -0600",
	"title" : "More familiar tabs for your users in Xamarin.Forms",
	"author" : "Antonio Feregrino Bola√±os",
	"featured_image": "http://thatcsharpguy.com/postimages//xamarin-forms/tabbed-page/featured.jpg",
	"tags" :
	["Xamarin","XamarinForms","NuGetRecomendado"],
	
	"content" : body"Amongst the great variety of out-of-the-box pages that Xamarin.Forms has to offer, we can choose a `TabbedPage` wich is nothing else than a container to other pages, making them accesible trough tabs. You probable have used them and, as me, you think they are awesome, what it is not so awesome is the fact that they are somewhat limited as they do not allow so much customization.    \n\nThat is why I decided to create a <a href=\"https://developer.xamarin.com/guides/xamarin-forms/custom-renderer/\" target=\"_blank\">custom renderer</a> that allows to further stylize the tabs, making them more *native* for your users.\n\n## Uso  \nTo start using this tabs you have two options: install the <a href=\"https://www.nuget.org/packages/PlatformTabbedPage/\" target=\"_blank\">NuGet package</a> in your three projects, or download the <a href=\"https://github.com/messier16/PlatformTabbedPage\" target=\"_blank\">source code</a> and paste in your code directly.  \n\n{% console titulo %}\nPM> Install-Package PlatformTabbedPage\n{% endconsole %}\n\nAfter that, you need to create a page that inherits from `PlatformTabbedPage`:  \n\n{% highlight csharp %}\npublic class HomeTabbedPage : PlatformTabbedPage\n{% endhighlight %}  \n\nAnd as you usually do with a normal `TabbedPage`, add the child pages in the constructor. It is **very important** that you note that the names do not end with \".png\", because otherwise your tabs will not work properly on iOS.\n\n{% highlight csharp %}\n    public HomeTabbedPage()\n    {\n        BarBackgroundColor = App.BarBackgroundColors[3];\n        SelectedColor = App.SelectedColors[0];\n        BarBackgroundApplyTo = BarBackgroundApplyTo.None;\n\n        Children.Add(new ConfigurationPage { Icon = \"feed\" });\n        Children.Add(new BasicContentPage(\"YouTube\") { Icon = \"youtube\" });\n        Children.Add(new BasicContentPage(\"Twitter\") { Icon = \"twitter\" });\n        Children.Add(new BasicContentPage(\"Info\") { Icon = \"info\" });\n    }\n}\n{% endhighlight %}  \n\nThe we would get something like this (on the left is the same page but created with a common `TabbedPage`:\n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\n{% post_image android-no-small.gif \"iOS no normal\" %}\n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">  \n{% post_image android-small.gif \"iOS no normal\" %}\n</div>  \n</div> \n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">  \n{% post_image ios-no-small.gif \"iOS no normal\" %}\n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">  \n{% post_image ios-small.gif \"iOS no normal\" %}\n</div>  \n</div>  \n\nDowload the <a href=\" https://github.com/messier16/PlatformTabbedPage\" target=\"_blank\">source code</a> so you can see the run and play with the sample app for this post.\n\nAnd that's all... now, if you want to know how I managed to deliver this customization, keep on reading.\n\n\n## PlatformTabbedPage  \nAmong the things that I wanted to customize are the color of the selected item, the color of the unselected item, and when in iOS the icon of the selected element becuase as you may have seen in the previous gifs when using Android it is hard to tell at first sight in which page are we on, while in iOS it is a bit weird that the icon of the selected stays the same as the others.\n\n### Render creation\nStart by defining a class that inherits from the type of page that we are going to customize.\n\n{% highlight csharp %}\npublic class PlatformTabbedPage : TabbedPage\n{% endhighlight %}  \n\nThen we define the properties, along with its correspondent `BindableProperty` that will allow these properties to be bindable.  \n\n{% highlight csharp %}\npublic static readonly BindableProperty SelectedColorProperty =\n    BindableProperty.Create(nameof(SelectedColor), typeof(Color), typeof(PlatformTabbedPage), default(Color));\n\npublic Color SelectedColor\n{\n    get { return (Color)GetValue(SelectedColorProperty); }\n    set { SetValue(SelectedColorProperty, value); }\n}\n\npublic static readonly new BindableProperty BarBackgroundColorProperty =\n    BindableProperty.Create(nameof(BarBackgroundColor), typeof(Color), typeof(PlatformTabbedPage), default(Color));\n\npublic new Color BarBackgroundColor\n{\n    get { return (Color)GetValue(BarBackgroundColorProperty); }\n    set { SetValue(BarBackgroundColorProperty, value); }\n}\n\npublic static readonly BindableProperty BarBackgroundApplyToProperty =\n    BindableProperty.Create(nameof(BarBackgroundApplyTo), typeof(BarBackgroundApplyTo), typeof(PlatformTabbedPage), BarBackgroundApplyTo.Android);\n\npublic BarBackgroundApplyTo BarBackgroundApplyTo\n{\n    get { return (BarBackgroundApplyTo)GetValue(BarBackgroundApplyToProperty); }\n    set { SetValue(BarBackgroundApplyToProperty, value); }\n}\n{% endhighlight %}  \n\nThe property descriptions are the following:\n \n - `SelectedColor`: The color of the selected item\n - `BarBackgroundColor`: The background color of the ber, I decided to hide with `new` the default implementation, as I'm going to control the behavior of it inside the custom renderer. \n - `BarBackgroundApplyTo`: An enum that indicates in which platforms the backround color of the bar needs to be modified, the default is Android, as I consider that in iOS it seems a bit weird setting the background color of the bar.\n\nApart from that, I created some extension methods that are useful to work with colors, making them darker or lighter, or help deciding whether one color is light or dark.\n\nNow, we are ready to see each platform implementation:\n\n## iOS  \n(this renderer is completely based on the <a href=\"https://github.com/xamarinhq/app-evolve/blob/master/src/XamarinEvolve.iOS/Renderers/SelectedTabPageRenderer.cs\" target=\"_blank\">implementation</a> of James Montemagno in the Xamarin's Evolve App)  \n\nIn iOS we need to create a renderer that inherits from `TabbedRenderer`:  \n\n{% highlight csharp %}\npublic class PlatformTabbedPageRenderer : TabbedRenderer\n{% endhighlight %}  \n\nAfter that I defined a property to access to the forms instance of `PlatformTabbedPage` and another couple to store the default colors of the `UITabBar`:\n\n{% highlight csharp %}\nPlatformTabbedPage FormsTabbedPage => Element as PlatformTabbedPage;\nUIColor DefaultTintColor;\nUIColor DefaultBarBackgroundColor;\n{% endhighlight %}  \n\nIf you have previously written a custom renderer you should know of the importance of the `OnElementChanged` method, because it is called every time your control is going to be rendered on screen. That is why we assign and unassign an event that will allow us to know whent the properties of the bar in the forms project change.\n\n{% highlight csharp %}\nif (e.OldElement != null)\n{\n    e.OldElement.PropertyChanged -= OnElementPropertyChanged;\n}\nif (e.NewElement != null)\n{\n    e.NewElement.PropertyChanged += OnElementPropertyChanged;\n}\n{% endhighlight %}  \n\nThen we get and store the default colors of the `UITabBar` just in case we need them in the future.\n\n{% highlight csharp %}\nDefaultTintColor = TabBar.TintColor;\nDefaultBarBackgroundColor = TabBar.BackgroundColor;\n{% endhighlight %}  \n\nOnce the original colors are stored, we call a couple of methods that will assign the desired colors.\n\n{% highlight csharp %}\nSetTintedColor();\nSetBarBackgroundColor();\n{% endhighlight %}  \n\nNow it is time to \"fill\" the icons, and I say \"fill\" because in reality you need to provide a \"filled\" version of your icons, one is going to be shown by default while the oter is going to be displayed when the tab is active.\n\nThe trick here relies in the fact that the iOS API exposes a property to set an image for each state of a given tab, and that is precisely what this renderer does: takes the original icon, appends the suffix \"_active\" and sets it aas the image that should be used when the tab is selected:  \n\n{% highlight csharp %}\nif (FormsTabbedPage != null)\n{\n    for (int i = 0; i < TabBar.Items.Length; i++)\n    {\n        var item = TabBar.Items[i];\n        var icon = FormsTabbedPage.Children[i].Icon;\n\n        if (item == null)\n            return;\n        try\n        {\n            icon = icon + \"_active\";\n            if (item?.SelectedImage?.AccessibilityIdentifier == icon)\n                return;\n            item.SelectedImage = UIImage.FromBundle(icon);\n            item.SelectedImage.AccessibilityIdentifier = icon;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(\"Unable to set selected icon: \" + ex);\n        }\n    }\n}\n{% endhighlight %}  \n\nAnd basically that's all, we do not require of anything else thanks to the iOS API.\n\n## Android  \nFor the Android renderer we must derive from the `TabbedPageRenderer` class, yes, we need a different renderer for Android.\n\n{% highlight csharp %}\npublic class PlatformTabbedPageRenderer : TabbedPageRenderer\n{% endhighlight %}    \n\nAgain, we need some properties to store the default colors:\n\n{% highlight csharp %}\nPlatformTabbedPage FormsTabbedPage => Element as PlatformTabbedPage;\nAndroidColor _selectedColor = AndroidColor.Black;\nAndroidColor DefaultUnselectedColor = FormsColor.Gray.Darken().ToAndroid();\nstatic AndroidColor BarBackgroundDefault;\nAndroidColor _unselectedColor = DefaultUnselectedColor;\n{% endhighlight %}  \n\nIn Android, a tabbed page is comprised by two elements: A `ViewPager` and a `TabLayout` that work together to act as a single control, given the importance for this renderer, we also need to store a class level reference to both elements:\n\n{% highlight csharp %}\nViewPager _viewPager;\nTabLayout _tabLayout;\n{% endhighlight %}  \n\nNow, inside the `OnElementChanged` method we are going to get the references to the Views declared before. The renderer contains both, but they're \"hidden\" as `View` types, that is why the `is` operator is used to know which cast to use:\n\n{% highlight csharp %}\nfor (int i = 0; i < ChildCount; i++)\n{\n    var v = GetChildAt(i);\n    if (v is ViewPager)\n        _viewPager = (ViewPager)v;\n    else if (v is TabLayout)\n        _tabLayout = (TabLayout)v;\n}\n{% endhighlight %}  \n\nWe get the default colors for the bar background and then we set our own colors:\n\n{% highlight csharp %}\nBarBackgroundDefault = (_tabLayout.Background as ColorDrawable)?.Color ?? Android.Graphics.Color.Green;\nSetSelectedColor();\nSetBarBackgroundColor();\n{% endhighlight %}  \n\nUnlike iOS, Android makes use of a couple of methods that are called everytime a tab is selected/unselected, that is why we need to assign them inside our aforementioned method:\n\n{% highlight csharp %}\n_tabLayout.TabSelected += TabLayout_TabSelected;\n_tabLayout.TabUnselected += TabLayout_TabUnselected;\n{% endhighlight %}  \n\nTo finish overriding of this method, we need to set the color of all icons as unselected, and then mark the firs one as selected:\n\n{% highlight csharp %}\nSetupTabColors();\nSelectTab(0);\n{% endhighlight %}  \n\nAnd to finish this masterpiece, here is the \"magic\". In the methods that handle each selection/unselection of tabs we need to apply a color filter to each image, as you can see the color varies depending on the tab being selected or not:  \n\n{% highlight csharp %}\nprivate void TabLayout_TabUnselected(object sender, TabLayout.TabUnselectedEventArgs e)\n{\n    var tab = e.Tab;\n    tab.Icon?.SetColorFilter(_unselectedColor, PorterDuff.Mode.SrcIn);\n}\n\nprivate void TabLayout_TabSelected(object sender, TabLayout.TabSelectedEventArgs e)\n{\n    var tab = e.Tab;\n    tab.Icon?.SetColorFilter(_selectedColor, PorterDuff.Mode.SrcIn);\n}\n{% endhighlight %}  \n\nAnd that's it, the renderer for Android is slightly more complicated than the iOS one, but it isn't hard to understand.\n\n"
}