{	
	"id" : "/post/mvvm-xamarin-forms/",
	"tv" : false,
	"date": "2016-06-26 16:00:00 -0500",
	"title" : "MVVM en Xamarin.Forms, caso práctico",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//mvvm/mvvm-featured.png",
	"tags" : ["Xamarin","XamarinForms","Mvvm"],
	  
	"content": '"Mvvmdex\n=  \nSoy un gran fanático de Pokémon y es por eso que para este post haremos una aplicación que se encargará de buscar pokémons en la PokéAPI usando la <a href=\"#\">Jirapi</a> y mostrar los datos encontrados en la pantalla. En esta aplicación se implementa el patrón MVVM para la separación de responsabilidades.\n\n<img src=\"http://i.giphy.com/Mo4P4sEJNUKeQ.gif\" />\n\n## Introducción  \nDentro de este post voy a asumir que ya tienes un entendimiento básico de cómo es que funciona Xamarin, Xamarin.Forms y la teoría de MVVM, si no, te invito a que consultes mi post sobre [qué es Xamarin](../../tv/xamarin/), el [video sobre Xamarin.Forms](../../tv/xamarin-forms/), y el [video sobre MVVM](../../tv/mvvm).\n\n## Estructura\n\nComo ya sabrás, el <a href=\"organizacion-codigo-visual-studio\">código en Visual Studio</a> se organiza en proyectos, y esta es la organización de los proyectos para esta pequeña app:\n\n<figure><img src='/postimages/post/mvvm-xamarin-forms/post.jsoncodeorg.png' alt='\"Code organization\" images_set' /></figure>  \n\nLa separación de MVVM se puede observar en que el proyecto `Mvvmdex.Views` se relaciona con `Mvvmdex.ViewModels` y a su vez este último se relaciona con `Mvvmdex.Models`, **nunca hay relacion directa entre las vistas y los modelos**.\n\n## Modelo  \n\nPara este proyecto, el modelo está contenido dentro de `Mvvmdex.Models`. Como sabe, en el modelo es donde se realiza el acceso a datos y la lógica de la aplicación. En esta aplicación, el *Mvvmdex*, únicamente se consulta a la PokéAPI dentro de la clase `MvvmdexClient`. Como puedes ver, no tiene ninguna relación con la vista:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">async</span> <span class="n">Task</span><span class="p">&lt;</span><span class="n">Pokemon</span><span class="p">&gt;</span> <span class="n">SearchForPokemon</span><span class="p">(</span><span class="kt">string</span> <span class="n">pokemonName</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">ttry</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tvar</span> <span class="n">pkmn</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_client</span><span class="p">.</span><span class="n">Get</span><span class="p">&lt;</span><span class="n">Jirapi</span><span class="p">.</span><span class="n">Resources</span><span class="p">.</span><span class="n">Pokemon</span><span class="p">&gt;(</span><span class="n">pokemonName</span><span class="p">);</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tvar</span> <span class="n">species</span> <span class="p">=</span> <span class="k">await</span> <span class="n">pkmn</span><span class="p">.</span><span class="n">Species</span><span class="p">.</span><span class="n">GetResource</span><span class="p">(</span><span class="n">_client</span><span class="p">);</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">treturn</span> <span class="k">new</span> <span class="n">Pokemon</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tId</span> <span class="p">=</span> <span class="n">pkmn</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tName</span> <span class="p">=</span> <span class="n">pkmn</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tDescription</span> <span class="p">=</span> <span class="n">species</span><span class="p">.</span><span class="n">FlavorTextEntries</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">(</span><span class="n">te</span> <span class="p">=&gt;</span> <span class="n">te</span><span class="p">.</span><span class="n">Language</span><span class="p">.</span><span class="n">Name</span> <span class="p">==</span> <span class="err">\</span><span class="s">&quot;en\&quot;)?\n\t\t\t\t.FlavorText.Replace(\&quot;\\n\&quot;,\&quot;\&quot;),\n\t\t\tShape = species.Shape.Name\n\t\t};\n\t}\n\tcatch\n\t{\n\t\treturn null;\n\t}\n}\n</span></code></pre></figure>   \n\n## ViewModels\n\nPara este proyecto, el modelo está contenido dentro de `Mvvmdex.ViewModels`. Esta es la parte más complicada, hay que recordar que este es el intermediario entre la vista y el modelo. Para esta app únicamente existe un solo ViewModel, `PokemonSearchViewModel`, pero es muy común que tu tengas varios dependiendo del tamaño y complejidad de tu aplicación. \n\nEsta sección tiene relación directa con el Modelo, en el *Mvvmdex* se hace referencia en el cliente `MvvmdexClient`:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nprivate</span> <span class="n">MvvmdexClient</span> <span class="n">_client</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">npublic</span> <span class="n">PokemonSearchViewModel</span><span class="p">()</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t_client</span> <span class="p">=</span> <span class="k">new</span> <span class="n">MvvmdexClient</span><span class="p">();</span> <span class="c1">// &lt;- Model\n}\n</span></code></pre></figure>  \n\nEl modelo puede enviar y recibir mensajes del *viewmodel* a través de métodos.\n\n### INotifyPropertyChanged\n\nLa interfaz `INotifyPropertyChanged` permitirá a la vista ser notificada cada vez que suceda algún cambio en el *viewmodel*. La interfaz únicamente expone el evento `PropertyChanged` que debemos invocar cada vez que queremos notificar a la vista algún cambio. Para hacer la tarea más sencilla, se crea un método auxiliar:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">void</span> <span class="n">RaiseOnPropertyChange</span><span class="p">([</span><span class="n">CallerMemberName</span><span class="p">]</span> <span class="kt">string</span> <span class="n">propertyName</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tif</span> <span class="p">(</span><span class="n">PropertyChanged</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tPropertyChanged</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="k">new</span> <span class="n">PropertyChangedEventArgs</span><span class="p">(</span><span class="n">propertyName</span><span class="p">));</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nEl atributo `CallerMemberName` nos facilitará la tarea, ya que con él aseguramos que el nombre de la propiedad desde la que lo llamemos será colocada ahí para notificar a la vista sobre la propiedad correcta.  \n\nEs importante decir que existen muchos frameworks de *mvvm* que ya contienen una implementación de esta interfaz y para nosotros bastaría con derivar nuestros objetos de dicha implementación para no tener que hacerla nosotros mismos.\n\n### Propiedades  \n\nCon las propiedades hay una pequeña limitante: no pueden ser propiedades auto-implementadas, ya que es necesario llamar a nuestro método auxiliar creado más arriba. Mira la propiedad `PokemonName`:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nprivate</span> <span class="kt">string</span> <span class="n">_pokemonName</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">npublic</span> <span class="kt">string</span> <span class="n">PokemonName</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tget</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_pokemonName</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tset</span> <span class="p">{</span> <span class="n">_pokemonName</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">RaiseOnPropertyChange</span><span class="p">();</span> <span class="cm">/* RaiseOnPropertyChange(\&quot;PokemonName\&quot;) */</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nComo puedes ver, cada vez que ocurre un cambio en la propiedad, se está notificando a quién desee sobre el cambio, en nuestro caso, la vista es quien desea ser notificada. Más adelante, con los *data bindings*, enlazaremos las propiedades en el *viewmodel* con elementos dentro de la vista.\n \n### Commands  \n\nLos *commands* es otro de los mecanismos que contempla *mvvm* para la comunicación entre los componentes, y es a través de ellos que se trasladan algunos de los eventos generados en la vista hacia el *viewmodel*. En Xamarin.Forms un comando no es más que una instancia de objeto que implementa la interfaz `ICommand`, en el caso de esta app, tenemos el comando `BuscaPokemonCommand` que lo único que hace es ejecutar una `Action` cuando se ejecuta.\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">BuscaPokemonCommand</span> <span class="p">:</span> <span class="n">ICommand</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tprivate</span> <span class="k">readonly</span> <span class="n">Action</span> <span class="n">_search</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="n">BuscaPokemonCommand</span><span class="p">(</span><span class="n">Action</span> <span class="n">search</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t_search</span> <span class="p">=</span> <span class="n">search</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="kt">bool</span> <span class="n">CanExecute</span><span class="p">(</span><span class="kt">object</span> <span class="n">parameter</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">treturn</span> <span class="k">true</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="k">void</span> <span class="n">Execute</span><span class="p">(</span><span class="kt">object</span> <span class="n">parameter</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t_search</span><span class="p">();</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="k">event</span> <span class="n">EventHandler</span> <span class="n">CanExecuteChanged</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nLa interfaz ICommand contiene tres miembros:  \n  \n - `bool CanExecute(object parameter)` - con el cual podemos decidir si el comando se puede ejecutar \n - `void Execute(object parameter)` - en el cual debemos efectuar la ejecución\n - `event EventHandler CanExecuteChanged` - es un evento que debe invocarse cada vez que las condiciones bajo las que se puede invocar un comando han cambiado.\n\nEs importante mencionar que al igual que con la interfaz `INotifyPropertyChanged`, ya existen varios frameworks que proveen implementaciones genéricas de `ICommand` para evitarnos el tedio de escribirlos nosotros mismos.\n\n#### En el ViewModel\n\nAhora, la forma en la que se usa este comando es a través de una propiedad ya que más adelante será enlazada con un control dentro de la vista:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nprivate</span> <span class="n">ICommand</span> <span class="n">_buscaPokemonCommand</span><span class="p">;</span><span class="err">\</span><span class="n">npublic</span> <span class="n">ICommand</span> <span class="n">BuscaPokemonCommand</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tget</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tif</span> <span class="p">(</span><span class="n">_buscaPokemonCommand</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tAction</span> <span class="n">buscaPokemonAction</span> <span class="p">=</span> <span class="k">async</span> <span class="p">()</span> <span class="p">=&gt;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tvar</span> <span class="n">pokemon</span> <span class="p">=</span> <span class="k">await</span> <span class="n">_client</span><span class="p">.</span><span class="n">SearchForPokemon</span><span class="p">(</span><span class="n">SearchTerms</span><span class="p">.</span><span class="n">ToLower</span><span class="p">());</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tHasCoincidence</span> <span class="p">=</span> <span class="n">pokemon</span> <span class="p">!=</span> <span class="k">null</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tif</span> <span class="p">(</span><span class="n">HasCoincidence</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tDescription</span> <span class="p">=</span> <span class="n">pokemon</span><span class="p">.</span><span class="n">Description</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tPokemonName</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;{0:D3} {1}\&quot;, pokemon.Id, pokemon.Name);\n\t\t\t\t\tShape = pokemon.Shape;\n\t\t\t\t}\n\t\t\t};\n\t\t\t_buscaPokemonCommand = new BuscaPokemonCommand(buscaPokemonAction);\n\t\t}\n\t\treturn _buscaPokemonCommand;\n\t}\n}\n</span></code></pre></figure>  \n\n## Vista\n \nHay que recordar que en Forms podemos crear nuestras interfaces a través de código C# o XAML, para esta ocasión usaré XAML para crear la pantalla.\n\nLa vista de la aplicación es bastante simple, únicamente consta de un cuadro de búsqueda (`SearchBar`), un contenedor (`StackLayout`) que contiene varias etiquetas (`Label`) para mostrar los datos de Pokémon en cuestión y por último una etiqueta para mostrar en caso de que no encontremos un pokémon que coincida con nuestra búsqueda:\n\n<figure class="highlight"><pre><code class="language-xml" data-lang="xml">\n<span class="nt">&lt;ContentPage</span> <span class="na">xmlns=</span><span class="s">\&quot;http://xamarin.com/schemas/2014/forms\&quot;</span> <span class="err">\n\t\</span><span class="na">txmlns:x=</span><span class="s">\&quot;http://schemas.microsoft.com/winfx/2009/xaml\&quot;</span> <span class="err">\n\t\</span><span class="na">txmlns:converters=</span><span class="s">\&quot;clr-namespace:Mvvmdex.Views.Converters\&quot;</span> <span class="err">\n\t\</span><span class="na">tx:Class=</span><span class="s">\&quot;Mvvmdex.Views.MvvmdexPage\&quot;</span> <span class="err">\n\t\</span><span class="na">tTitle=</span><span class="s">\&quot;Mvvmdex\&quot;</span><span class="nt">&gt;</span>\n\t<span class="nt">&lt;ContentPage.Resources&gt;</span>\n\t\t<span class="nt">&lt;ResourceDictionary&gt;</span>\n\t\t\t<span class="nt">&lt;converters:BooleanInverterConverter</span> <span class="na">x:Key=</span><span class="s">\&quot;BooleanInverter\&quot;</span> <span class="nt">/&gt;</span>\n\t\t\t<span class="nt">&lt;converters:ShapeToEmojiConverter</span> <span class="na">x:Key=</span><span class="s">\&quot;ShapeToEmoji\&quot;</span> <span class="nt">/&gt;</span>\n\t\t<span class="nt">&lt;/ResourceDictionary&gt;</span>\n\t<span class="nt">&lt;/ContentPage.Resources&gt;</span>\n\t<span class="nt">&lt;Grid&gt;</span>\n\t\t<span class="nt">&lt;Grid.RowDefinitions&gt;</span>\n\t\t\t<span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">\&quot;Auto\&quot;</span> <span class="nt">/&gt;</span>\n\t\t\t<span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">\&quot;*\&quot;</span> <span class="nt">/&gt;</span>\n\t\t<span class="nt">&lt;/Grid.RowDefinitions&gt;</span>\n\t\t\n\t\t<span class="nt">&lt;SearchBar</span> <span class="na">Grid.Row=</span><span class="s">\&quot;0\&quot;</span> <span class="na">SearchCommand=</span><span class="s">\&quot;{Binding</span> <span class="err">BuscaPokemonCommand}\&quot;</span> <span class="err">\n\t\t\</span><span class="na">tText=</span><span class="s">\&quot;{Binding</span> <span class="err">SearchTerms}\&quot;</span> <span class="nt">/&gt;</span>\n\t\t\n\t\t<span class="nt">&lt;StackLayout</span> <span class="na">IsVisible=</span><span class="s">\&quot;{Binding</span> <span class="err">HasCoincidence}\&quot;</span> <span class="na">Grid.Row=</span><span class="s">\&quot;1\&quot;</span> <span class="na">Padding=</span><span class="s">\&quot;20\&quot;</span> <span class="na">Spacing=</span><span class="s">\&quot;10\&quot;</span><span class="nt">&gt;</span>\n\t\t\t<span class="nt">&lt;Label</span> <span class="na">Text=</span><span class="s">\&quot;{Binding</span> <span class="err">PokemonName}\&quot;</span> <span class="na">FontSize=</span><span class="s">\&quot;Large\&quot;</span> <span class="nt">/&gt;</span>\n\t\t\t<span class="nt">&lt;Label</span> <span class="na">Text=</span><span class="s">\&quot;{Binding</span> <span class="err">Description}\&quot;</span> <span class="nt">/&gt;</span>\n\t\t\t<span class="nt">&lt;Label</span> <span class="na">Text=</span><span class="s">\&quot;{Binding</span> <span class="err">Shape,</span> <span class="na">Converter=</span><span class="s">{StaticResource</span> <span class="err">ShapeToEmoji}}\&quot;</span> <span class="nt">/&gt;</span>\n\t\t<span class="nt">&lt;/StackLayout&gt;</span>\n\t\t\n\t\t<span class="nt">&lt;Label</span> <span class="na">IsVisible=</span><span class="s">\&quot;{Binding</span> <span class="err">HasCoincidence,</span> <span class="na">Converter=</span><span class="s">{StaticResource</span> <span class="err">BooleanInverter}}\&quot;</span> <span class="err">\n\t\t\</span><span class="na">tText=</span><span class="s">\&quot;😕\&quot;</span> <span class="na">Grid.Row=</span><span class="s">\&quot;1\&quot;</span> <span class="na">HorizontalTextAlignment=</span><span class="s">\&quot;Center\&quot;</span> <span class="na">FontSize=</span><span class="s">\&quot;100\&quot;</span> <span class="nt">/&gt;</span>\n\t<span class="nt">&lt;/Grid&gt;</span>\n<span class="nt">&lt;/ContentPage&gt;</span>\n</code></pre></figure>  \n\n### Data bindings\n\nSi ves mucho `Binding` en el código no te preocupes, es algo muy común en *MVVM*, y es que es ahí donde ocurre el enlace de la vista al *viewmodel*, una de las partes centrales del patrón. Los *data bindings* se encargan de \"estar al tanto\" de los cambios que informa el *viewmodel* y reflejarlos en la pantalla cuando sucedan.\n\nPor ejemplo, la etiqueta en la que se muestra el nombre y el número del Pokémon:\n\n<figure class="highlight"><pre><code class="language-xml" data-lang="xml">\n<span class="nt">&lt;Label</span> <span class="na">Text=</span><span class="s">\&quot;{Binding</span> <span class="err">PokemonName}\&quot;</span> <span class="na">FontSize=</span><span class="s">\&quot;Large\&quot;</span> <span class="nt">/&gt;</span>\n</code></pre></figure>  \n\nMediante los *bindings* el texto del `Label` cambiará cada vez que la propiedad `PokemonName` lo haga.\n\nSin embargo, los bindings no son solo de una dirección (*viewmodel* → vista), sino que también pueden ser usados al revés. Tomemos, por ejemplo el control `SearchBar`:\n\n<figure class="highlight"><pre><code class="language-xml" data-lang="xml">\n<span class="nt">&lt;SearchBar</span> <span class="na">Grid.Row=</span><span class="s">\&quot;0\&quot;</span> <span class="na">SearchCommand=</span><span class="s">\&quot;{Binding</span> <span class="err">BuscaPokemonCommand}\&quot;</span> <span class="na">Text=</span><span class="s">\&quot;{Binding</span> <span class="err">SearchTerms}\&quot;</span> <span class="nt">/&gt;</span>\n</code></pre></figure>\n\nEntonces cada vez que el usuario cambie el texto de la caja de búsqueda, la propiedad `SearchTerms` del *viewmodel* también cambiará. Y no solo eso, sino que también el control tiene enlazado el comando `BuscaPokemonCommand`, el comando se ejecutará cuando el usuario decida buscar Pokémons.  \n\nComo puedes ver, las tres propiedades (`PokemonName`, `SearchTerms y `SearchCommand`) existen en el *viewmodel*. En caso de que no existiera alguna, no pasará absolutamente nada, no habrá errores ni excepciones, es por eso que se dice que es un poco difícil de *debuggear* estos enlaces de datos.  \n\n### Converters  \n\nAdemás de `Binding` probablemente te hayas fijado en la palabra `Converter`... así que es hora de explicar los *converters*. Estos no son más que instancias de tipos que implementan la interfaz `IConvertValue` que en pocas palabras hace eso: convertir valores.\n\nEn el más estricto de los sentidos el *viewmodel* debe ser independiente de la plataforma y exponer solamente las propiedades necesarias para que la vista opere. Pero, ¿qué pasa si nosotros queremos extender un poco más esa funcionalidad? \n\nPor ejemplo, en la app *Mvvmdex* quisiera mostrar u ocultar un panel dependiendo de si el Pokémon fue encontrado o no, el *viewmodel* ofrece la propiedad booleana `HasConicidence` que podemos ligar a `IsVisible`:\n\n<figure class="highlight"><pre><code class="language-xml" data-lang="xml">\n<span class="nt">&lt;StackLayout</span> <span class="na">IsVisible=</span><span class="s">\&quot;{Binding</span> <span class="err">HasCoincidence}\&quot;</span> <span class="err">...</span> <span class="nt">/&gt;</span>\n</code></pre></figure>  \n\nSin embargo, no podemos ligar esa propiedad directamente con otro control para que se \"esconda\" cuando haya coincidencia, es por eso que se implementó la clase `BooleanInverterConverter`:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">BooleanInverterConverter</span> <span class="p">:</span> <span class="n">IValueConverter</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="kt">object</span> <span class="n">Convert</span><span class="p">(</span><span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetType</span><span class="p">,</span> <span class="kt">object</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">treturn</span> <span class="p">!(</span><span class="kt">bool</span><span class="p">)</span><span class="k">value</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="kt">object</span> <span class="n">ConvertBack</span><span class="p">(</span><span class="kt">object</span> <span class="k">value</span><span class="p">,</span> <span class="n">Type</span> <span class="n">targetType</span><span class="p">,</span> <span class="kt">object</span> <span class="n">parameter</span><span class="p">,</span> <span class="n">CultureInfo</span> <span class="n">culture</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tthrow</span> <span class="k">new</span> <span class="n">NotImplementedException</span><span class="p">();</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nQue como puedes ver tiene dos métodos, uno para convertir \"de ida\" y uno \"de vuelta\", esta app solo hace uso del \"de ida\" y únicamente niega el valor booleano que se le pase.\n\nLuego entonces ya podemos usarlo en nuestra pantalla, primero declarándolo dentro de los recursos de la pantalla:\n\n<figure class="highlight"><pre><code class="language-xml" data-lang="xml">\n<span class="nt">&lt;ContentPage.Resources&gt;</span>\n\t<span class="nt">&lt;ResourceDictionary&gt;</span>\n\t\t<span class="nt">&lt;converters:BooleanInverterConverter</span> <span class="na">x:Key=</span><span class="s">\&quot;BooleanInverter\&quot;</span> <span class="nt">/&gt;</span> \n</code></pre></figure>  \n\nPara luego usarlo junto con un enlace a datos en un control:\n\n<figure class="highlight"><pre><code class="language-xml" data-lang="xml">\n<span class="nt">&lt;Label</span> <span class="na">IsVisible=</span><span class="s">\&quot;{Binding</span> <span class="err">HasCoincidence,</span> <span class="na">Converter=</span><span class="s">{StaticResource</span> <span class="err">BooleanInverter}}\&quot;</span> <span class="err">\n\</span><span class="na">tText=</span><span class="s">\&quot;😕\&quot;</span> <span class="na">Grid.Row=</span><span class="s">\&quot;1\&quot;</span> <span class="na">HorizontalTextAlignment=</span><span class="s">\&quot;Center\&quot;</span> <span class="na">FontSize=</span><span class="s">\&quot;100\&quot;</span> <span class="nt">/&gt;</span>\n</code></pre></figure>  \n\n### Enlace con el ViewModel\n\nPara terminar todo esto, falta un paso muy importante, y es el de relacionar de alguna manera la vista con el *viewmodel*. Hay muchas maneras de hacer esto, sin embargo, una de las más prácticas es establecer el nuestro *viewmodel* como el `BindingContext` de la vista. Para esta app, la acción se realiza en el *code behind* de la página `MvvmdexPage`:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MvvmdexPage</span> <span class="p">:</span> <span class="n">ContentPage</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="n">MvvmdexPage</span><span class="p">()</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">tBindingContext</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PokemonSearchViewModel</span><span class="p">();</span> <span class="c1">// &lt;- ViewModel\n\t\t// ....\n</span></code></pre></figure>  \n\n## Para cerrar\n\nExisten muchas más posibilidades para hacer más robusta una aplicación de Forms con *MVVM*, como el uso de la inyección de dependencias para integrar más capacidades como navegación entre pantallas, acceso a sensores del teléfono y más. También puedes integrar frameworks como <a href=\"http://www.mvvmlight.net/doc/\" target=\"_blank\" rel=\"nofollow\">mvvm light</a> o <a href=\"https://github.com/PrismLibrary/Prism#prism\" target=\"_blank\" rel=\"nofollow\">Prism</a> para liberarte de hacer tus propias implementaciones de `ICommand` e `INotifyPropertyChanged`. \n\nEspero que este post te haya servido, recuerda que la mejor forma de aprender es experimentando, así que te invito a que <a href=\"https://github.com/ThatCSharpGuy/xfmvvm\" target=\"_blank\" rel=\"nofollow\">descargues el código de GitHub</a> y juegues un poco con él, si tienes dudas, puedes contactarme sin problemas."'   
}