{	
	"id" : "/post/sobrecarga-operadores/",
	"tv" : false,
	"date": "2016-12-20 13:00:02 -0600",
	"title" : "Sobrecarga de operadores",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages/aprende-c-sharp/sobrecarga.jpg",
	"tags" : ["AprendeCSharp"],
	"content": "Hoy toca hablar de una de las características menos usadas (porque en teoría es mejor no usarlas) de C#. \n\nSobrecargar operadores nos ayudará a emplear los operadores comunes como `+`, `-`, `==` para nuestros los tipos de dato que creamos para nuestra aplicación. Pero antes de entrar en el tema, pongámonos un poco festivos y creemos una clase llamada `Toy` que representará un juguete, el cual debe tener un precio y un nombre:\n\n<pre class=\"csharp\">\npublic class Toy\n\n    public string Name  get; set; \n    public double Price  get; set; \n    // ...\n</pre>  \n\nCreamos unos cuantos juguetes:   \n\n<pre class=\"csharp\">\nvar buzzLightyear = new Toy  Name = \"Buzz\", Price = 20 ;\nvar woody = new Toy  Name = \"Woody\", Price = 20 ;\nvar dory = new Toy  Name = \"Dory\", Price = 15 ;\nvar marlin = new Toy  Name = \"Marlin\", Price = 15 ;\nvar nemo = new Toy  Name = \"Nemo\", Price = 15 ;\nvar mikey = new Toy  Name = \"Michelangelo\", Price = 25 ;\nvar leo = new Toy  Name = \"Leonardo\", Price = 25 ;\nvar donny = new Toy  Name = \"Donatello\", Price = 25 ;\nvar raph = new Toy  Name = \"Raphael\", Price = 25 ;\nvar splinter = new Toy  Name = \"Master Splinter\", Price = 30 ;\n</pre>  \n\n## Intro  \n\nAhora, en la aplicación que estamos desarrollando necesitamos saber si dos juguetes son iguales, o si uno es más caro que el otro. Nos queda claro que siempre podríamos hacer comparaciones como `buzzLightyear.Price > woody.Price` para saber si uno vale más que el otro... pero, ¿y si mejor sobrecargamos el operador `>` para poder comparar los juguetes directamente?\n\nPara sobrecargar un operador es necesario escribir unas líneas de código parecidas a cuando definimos un método público estático en una clase:\n\n<pre class=\"csharp\">\npublic static bool operator <(Toy a, Toy b)\n\n    return a.Price < b.Price;\n\n</pre>  \n\nComo puedes ver tenemos los modificadores `public` y `static`, junto con el tipo de retorno (que es `bool`) y la palabra clave `operator` seguida del operador que queremos sobrecargar. Este \"método\" recibe dos parámetros de los cuales uno de ellos debe ser el tipo en el que está definido (en este caso `Toy`).\n\nPor ejemplo, podríamos sobrecargar `<` de esta manera: \n\n<pre class=\"csharp\">\npublic static bool operator <(Toy a, double price)\n</pre>  \n\nPara poder comparar un `Toy` contra un valor de tipo doble: `leo < 10d`, es importante que tomes en cuenta que únicamente puedes comparar \"Toy < Double\" y no \"Double < Toy\", para esto deberías sobrecargar nuevamente el operador pero invirtiendo el orden de los parámetros (`<(double price, Toy a)`).\n\n### Operadores sobrecargables  \nLos operadores que pueden ser sobrecargados son los siguientes:  \n\n<table>\n    <tr>\n        <td><b>Operadores</b></td>\n        <td><b>Tipo</b></td>\n    </tr>\n    <tr>\n        <td>+, -, !, ~, ++, --, true, false</td>\n        <td>Unarios</td>\n    </tr>\n    <tr>\n        <td>+, -, *, /, , &amp;, |, ^, &lt;&lt;, &gt;&gt;</td>\n        <td>Binarios</td>\n    </tr>\n    <tr>\n        <td>==, !=, &lt;, &gt;, &lt;=, &gt;=</td>\n        <td>Comparación*</td>\n    </tr>\n</table>\n\n### *Operadores complementarios\nLos operadores de comparación son un caso muy peculiar, ya que es necesario siempre sobrecargarlos en pares: `=` y `!=`, `<` y `>`, `<=` y `>=`. Es decir, en nuestro ejemplo anterior también debemos crear una sobrecarga así: \n\n<pre class=\"csharp\">\npublic static bool operator >(Toy a, Toy b)\n\n    // ...\n</pre>   \n\nYa que de no hacerlo, nuestro programa no compilaría.\n\nEn el código de ejemplo que puedes descargar de GitHub están todos los operadores de comparación sobrecargados, gracias a lo cual podemos ejecutar código como el siguiente:\n\n<pre class=\"csharp\">\nConsole.WriteLine(dory.Name + \">\" + woody.Name + \": \" + (dory > woody));\nConsole.WriteLine(dory.Name + \"<\" + woody.Name + \": \" + (dory < woody));\nConsole.WriteLine(buzzLightyear.Name + \"==\" + woody.Name + \" = \" + (buzzLightyear == woody));\nConsole.WriteLine(dory.Name + \"==\" + woody.Name + \": \" + (dory == woody));\nConsole.WriteLine(splinter.Name + \">=\" + woody.Name + \": \" + (splinter >= woody));\nConsole.WriteLine(leo.Name + \"<=\" + raph.Name + \": \" + (leo <= raph));\n</pre>  \n\nQue imprimirá: \n\n<pre>\nDory>Woody: False\nDory<Woody: True\nBuzz==Woody = True\nDory==Woody: False\nMaster Splinter>=Woody: True\nLeonardo<=Raphael: True\n</pre>\n\n## Más sobrecargas    \nAhora, supón que tu aplicación también debe poder generar paquetes de juguetes, que representaremos con la clase `Bundle` (que <a href=\"../yield-c-sharp\">implementa IEnumerable</a>):  \n\n<pre class=\"csharp\">\npublic class Bundle : IEnumerable<Toy>\n\n    public int Size  get; private set; \n    public int ToyCount  get  return _storage.Count;  \n    private List<Toy> _storage;\n\n    public Bundle(int size)\n    \n        Size = size;\n        _storage = new List<Toy>(Size);\n    \n\n    public bool TryAddToy(Toy t)\n    \n        if (ToyCount >= Size) return false;\n        _storage.Add(t);\n        return true;\n    \n    // ...\n</pre>  \n\nComo puedes ver, existe un método llamado `TryAddToy` que nos ayudará a agregar un nuevo juguete al paquete, pero... ¿no sería genial que pudiéramos \"sumar\" juguetes y que de ellos resulte un paquete nuevo?\n\nEs entonces cuando aparece nuevamente la sobrecarga de operadores como una alternativa que nos permite realizar lo que queremos. Los pasos a seguir son muy similares a sobrecargar los otros operadores, con la diferencia de que el tipo de retorno puede ser cualquiera:  \n\n<pre class=\"csharp\">\npublic static Bundle operator +(Toy a, Toy b)\n\n    Bundle bundle = new Bundle(2);\n    bundle.TryAddToy(a);\n    bundle.TryAddToy(b);\n    return bundle;\n\n</pre>  \n\nNuevamente `public static`, el tipo de retorno que en este caso es `Bundle`, la palabra `operator` y el operador a sobrecargar seguido de los dos parámetros (de los cuales al menos uno tiene que ser el tipo de dato en el que está definido).\n\nUna vez hecho esto, podemos escribir código como el siguiente:  \n\n<pre class=\"csharp\">\nBundle toyStoryBundle = buzzLightyear + woody;\nConsole.WriteLine(toyStoryBundle);\n</pre>  \n\nY se compilará y ejecutará sin problema, dejando como resultado el siguiente:  \n\n<pre>\nBundle (2/2) [Buzz, Woody]\n</pre>\n\nAl igual que con la comparación, también podemos sumar objetos de distinto tipo, siempre prestando atención al orden de los parámetros, de tal manera que podemos definir sumas de este modo dentro de la clase `Bundle`:  \n\n<pre class=\"csharp\">\npublic static Bundle operator +(Bundle bundle, Toy t)\n\n    var newBundle = new Bundle(bundle.Size + 1);\n    foreach (var toy in bundle)\n    \n        newBundle.TryAddToy(toy);\n    \n    newBundle.TryAddToy(t);\n    return newBundle;\n\n\npublic static Bundle operator +(Toy t, Bundle bundle)\n\n    if (!bundle.TryAddToy(t))\n        throw new InvalidOperationException(\"Bundle is already full!\");\n    return bundle;\n\n</pre>  \n\nComo te puedes dar cuenta a pesar de que parece que se sobrecarga el mismo operador, los métodos realizan distintas acciones, que podemos probar con el siguiente código:\n\n<pre class=\"csharp\">\nvar findingNemoBundle = dory + marlin + nemo;\n</pre>  \n\nEl orden de ejecución es el siguiente:  \n\n 1. `dory + marlin` generan un nuevo `Bundle` de tamaño 2\n 2. A este nuevo bundle se le suma `nemo`\n 3. Obtenemos un nuevo `Bundle` de tamaño 3\n\nSi quisieramos ejecutar algo como esto:  \n\n<pre class=\"csharp\">\nvar findingNemoBundle = dory + (marlin + nemo);\n</pre>  \n\nObtendríamos un nuevo orden de ejecución:  \n\n 1. `marlin + nemo` generan un nuevo `Bundle` de tamaño 2\n 2. A este nuevo bundle se le suma `dory`\n 3. Obtenemos una excepción ya que esta sobrecarga no permite añadir un juguete si el paquete ya no tiene espacio.\n\n### Operadores de asignación  \nLos operadores de asignación (`+=`, `/=`, ...) no son sobrecargables, pero dependein implícitamente de lo que hagas con los operadores binarios (`+`, `/`, ...)\nya que esto:  \n\n<pre class=\"csharp\">\ntortugasNinja += raph;\n</pre>  \n\nSe convierte en esto:  \n\n<pre class=\"csharp\">\ntortugasNinja = tortugasNinja + raph;\n</pre>  \n\n## Un consejo  \nSí la sobrecarga de operadores es fantástica y puede hacer que tu código se vea más limpio y con mayor contexto. Sin embargo, debes tener en cuenta que como todo en esta vida, debes usarlo con medida ya que en caso de abusar podrías hacer que el programa que estás haciendo se vuelva ilegible y poco mantenible.  \n\nAh, y no olvides que el orden de los parámetros en la sobrecarga importa mucho.  \n\n"
}