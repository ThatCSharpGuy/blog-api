{	
	"id" : "/post/inicializadores-c-sharp/",
	"tv" : false,
	"date": "2016-03-14 13:00:00 -0600",
	"title" : "Inicializadores en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/inicializadores.png",
	"tags" : ["AprendeCSharp"],
	"content": "## Inicializador de objetos  \nSeguramente ya conocerás que en C# para crear una instancia de un objeto es necesario utilizar alguno de los constructores de la clase que lo define. Y mientras que es te comportamiento es algo estándar para todos los lenguajes de programación orientados a objetos, C# permite hacer uso de  una sintaxis conocida como \"Inicializadores de objeto\", que fue introducida en la versión 3.0 del lenguaje.\n\nPara comenzar, a explicar los inicializadores, fíjate en la definición de la siguiente clase:\n\n<pre class=\"csharp\">\nclass Person\n\n    public Person(string name)\n    \n        Name = name;\n    \n    \n    public Person(string name, Person dad, Person mom)\n    \n        Name = name;\n        Dad = dad;\n        Mom = mom;\n    \n    \n    public string Name  get; private set; \n    public int Age  get; set; \n    public Person Dad  get; set; \n    public Person Mom  get; set; \n    public List<string> Abilities  get; set; \n\n</pre>\n\nPodemos ver que para crear una persona, es necesario llamar al constructor pasándole un nombre, y dos instancias de esa misma clase, por ejemplo:\n\n<pre class=\"csharp\">\nvar dad = new Person(\"Roberto\");\nvar mom = new Person(\"Carla\");\n</pre>\n\nPara asignar las propiedades `Age` y `Abilities` son asignadas en instrucciones por separado y una vez que el objeto ha sido creado:\n\n<pre class=\"csharp\">\nmom.Age = 55;\nmom.Abilities = new List<string>();\n</pre>\n\nHasta aquí, todo normal, pero lo que permite la inicialización de objetos es hacer uso de los constructores y además de asignar \"al mismo tiempo\" las propiedades o campos publicos que contiene el objeto, estén o no definidos en el constructor usado. Esto significa que para la clase `Person` podemos asignar `Age` y `Abilities` dentro de la misma instrucción:\n\n<pre class=\"csharp\">\nvar son = new Person(\"Omar\", dad, mom) \n \n    Age = 21, \n    Abilities = new List<string>(), \n;\n</pre>  \n\nLas asignaciones de cada propiedad deben estar separadas con una coma y pueden ser asignadas en la misma o diferentes líneas.\n\nEn este caso, estamos empleando el constructor de la clase seguido por la asignación de propiedades dentro de las llaves `` ``, pero haciéndolo en una sola instrucción, en lugar de usar tres instrucciones separadas, como se haría tradicionalmente:\n\n<pre class=\"csharp\">\nvar son = new Person(\"Omar\", dad, mom);\nson.Age = 21;\nson.Abilities = new List<string>();\n</pre>\n\n**El comportamiento no se modifica, usando el inicializador de objetos primero es construido el objeto** (usando el constructor) **y después son asignadas las propiedades** en el orden en el que están escritas dentro de las llaves.\n\n### Anidación de inicializadores  \nEs posible anidar inicializadores, pudiendo escribir código cómo este:\n\n<pre class=\"csharp\">\nvar aunt = new Person(\"Claudia\")\n\n    Age = 50,\n    Mom = new Person(\"Gil\")\n    \n        Age = 78,\n        Abilities = new List<string>(),\n        Dad = new Person(\"Charlie\")\n        \n            Age = 106,\n        \n    \n;\n</pre>\n\n### Inicializadores y tipos anónimos\nComo <a href=\"http://thatcsharpguy.com/post/anonimos-en-c-sharp/\">anteriormente escribí</a>, el inicializador de objetos cobra mucha importancia cuando trabajamos con tipos anónimos, y es que esta es la única manera de trabajar con ellos:\n\n<pre class=\"csharp\">\nvar album = new  Title = \"Kindred\", Artist = \"Passion Pit\" ;\nvar gift = new  Item = album, To = aunt ;\n</pre>\n\n## Inicialización de colecciones  \nAl igual que con los objetos, también existe un inicializador para colecciones, la cual permite crear e insertar valores en un arreglo, lista o cualquier otra colección. Por ejemplo, si creamos una lista de cadenas, y luego añadimos cadenas en ella, normalmente el código se vería así:\n\n<pre class=\"csharp\">\nList<string> abilities = new List<string>();\nabilities.Add(\"programación\");\nabilities.Add(\"futbol\");\nabilities.Add(\"dormir\");\n</pre>\n\nSin embargo, usando el inicializador de colecciones podemos escribir lo mismo utilizando un inicializador:\n\n<pre class=\"csharp\">\nList<string> abilities = new List<string>  \"programación\", \"futbol\", \"dormir\", ;\n</pre>\n\nSi, por ejemplo, estamos trabajando con un arreglo simple, podemos omitir el uso del operador `new`, y hacer esto:\n\n<pre class=\"csharp\">\nstring[] abilities =  \"programación\", \"futbol\", \"dormir\" ;\n</pre>\n\nAdemás, <a href=\"http://thatcsharpguy.com/post/arreglos-en-c-sharp-parte-1/\">como ya lo había explicado</a> en los <a href=\"http://thatcsharpguy.com/post/arreglos-en-c-sharp-parte-2/\">posts sobre arreglos</a>, se pueden programar cosas como esta:\n\n<pre class=\"csharp\">\nint [,] oddArray =    1, 2 ,  3, 4 ,  5, 6  ;\n</pre>\n\nEs importante señalar que entre cada elemento de nuestra colección debe existir una `,` que las separe.\n\n## Combinando inicializadores  \nPodemos usar esta sintaxis siempre que la creamos conveniente, por ejemplo, si deseamos crear un objeto de nuestra clase Person con habilidades establecidas desde la instanciación de la clase, podemos hacer esto:\n\n<pre class=\"csharp\">\nvar daughter = new Person(\"Lucille\", dad, mom)\n\n    Age = 10,\n    Abilities = new List<string>\n    \n        \"programación\",\n        \"pintura\"\n    \n\n</pre>\n\nO, si por otro lado, queremos crear una colección de personas:\n\n<pre class=\"csharp\">\nvar classAttendance = new List<Person>\n\n    new Person(\"Rafa\")  Age = 10,\n    new Person(\"Rosalinda\")  Age = 9,\n    new Person(\"Javi\")  Age = 10 ,\n    new Person(\"Dalia\")  Age = 11 ,\n;\n</pre>\n\n### Un último detalle\nSi eres muy fijado, te habrás dado cuenta que hay veces en que después del último elemento o asignación en un inicializador existe una coma `,`, como en el último fragmento de código visto (`new Person(\"Dalia\")  Age = 11 ,`). Podrías pensar que es un error de sintaxis... pero no es así, y es que debido a que este es un \"error\" que puede ser cometido frecuentemente por los programadores cuando se borra el último elemento en una lista o un objeto, se decidió permitir que el último elemento esté seguido por la coma."
}