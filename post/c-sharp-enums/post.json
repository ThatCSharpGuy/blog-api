{	
	"id" : "/post/c-sharp-enums/",
	"tv" : false,
	"date": "2016-08-01 14:00:01 -0500",
	"title" : "Enums en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/enums.png",
	"tags" : ["AprendeCSharp"],
	  
	"content": '"Dentro de nuestro código hay ocasiones en las que es necesario contar con un conjunto de valores bien definidos, relacionados y cuyo valor permanezca a lo largo de la ejecución del programa en cuestión. Por poner ejemplos de este tipo de valores, podemos pensar en los siguientes:\n  \n - Hacia donde está alineado un texto: derecha, izquierda, centrado o justificado  \n - Los meses del año: enero, febrero, abril, ..., noviembre o diciembre  \n - Sistemas operativos (sé que hay más): Windows, Mac o Linux\n\nAlgunos lenguajes resuelven este problema mediante el uso de constantes con algo en común en su nombre, por ejemplo: \n\n - `TEXT_ALIGN_RIGHT`, `TEXT_ALIGN_LEFT`, `TEXT_ALIGN_CENTER` o `TEXT_ALIGN_JUSTIFY`  \n - `MONTHS_JANUARY`, `MONTHS_FEBRUARY`, `MONTHS_APRIL`, ..., `MONTHS_NOVEMBER` o `MONTHS_DECEMBER`  \n - `OperatingSystemsWindows`, `OperatingSystemsMac` o `OperatingSystemsWindows`  \n\n### Los Enums\n\nMientras que C# permite la declaración de valores constantes mediante la palabra `const`, es una buena práctica hacer uso de los `enum`, que es un tipo de dato que nos permite expresar valores constantes, pero con la capacidad de ser agrupados por cómo se relacionan, por ejemplo, las opciones que tenemos para alinear un texto:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">enum</span> <span class="n">TextAlign</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="n">Right</span><span class="p">,</span><span class="err">\</span><span class="n">n</span>    <span class="n">Left</span><span class="p">,</span><span class="err">\</span><span class="n">n</span>    <span class="n">Center</span><span class="p">,</span><span class="err">\</span><span class="n">n</span>    <span class="n">Justify</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nLuego, para poder hacer uso de ellos es necesario hacer referencia al nombre de la enumeración seguido de un punto `.` y el valor que queremos que tome. De este modo se pueden usar en todos lados: como valor de retorno, como parámetros de método y dentro de sentencias de control:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">textAlignment</span> <span class="p">=</span> <span class="n">TextAlign</span><span class="p">.</span><span class="n">Center</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span><span class="c1">// ...\n\nswitch (textAlignment)\n{\n    case TextAlign.Center:\n        Console.WriteLine(\&quot;Texto centrado\&quot;);\n    break;\n}\n</span></code></pre></figure>  \n\nEn realidad, los `enum` en C# son una especie de <a href=\"#\">azúcar sintáctica</a> para referirse a números enteros. Por default, el tipo de dato detrás de los `enum` es `int` y el valor inicial de los enums es 0 y aumenta de uno en uno, es por eso que podemos hacer algo como esto:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nConsole</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">textAlignment</span><span class="p">);</span> <span class="c1">// 2\n\ntextAlignment = (TextAlign)1;\nConsole.WriteLine(textAlignment); // Left\n</span></code></pre></figure>   \n\nSi por alguna razón necesitamos cambiar el tipo de dato asociado a la enumeración o modificar los valores debajo de cada elemento de la enumeración podemos hacer algo como esto:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">enum</span> <span class="n">Months</span> <span class="p">:</span> <span class="kt">short</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="n">January</span> <span class="p">=</span> <span class="m">123</span><span class="p">,</span><span class="err">\</span><span class="n">n</span>    <span class="n">February</span> <span class="p">=</span> <span class="m">431</span><span class="p">,</span><span class="err">\</span><span class="n">n</span>    <span class="n">March</span> <span class="p">=</span> <span class="m">432</span><span class="p">,</span><span class="err">\</span><span class="n">n</span>    <span class="n">April</span> <span class="p">=</span> <span class="m">120</span><span class="p">,</span><span class="err">\</span><span class="n">n</span>    <span class="c1">// Jupiter = 100000000000000 // 100000000000000 is not a short\n}\n</span></code></pre></figure>  \n\n## Combinando valores de enum\nPero, existen ocasiones en que los valores no son mutuamente exclusivos ¿no?, ¿qué podríamos hacer si por ejemplo, quisieramos saber los días de la semana que una alarma debe funcionar? ¿o qé tal si queremos saber qué sistemas operativos conocen nuestros usuarios?  \n\nPara nuestra fortuna, podemos asignar potencias de dos (1, 2, 4, 6, 16, ...) y el operador *or* (`|`) para combinar los valores de la enumeración, así como el método `HasFlag` para saber si un valor de enumeración contiene un elemento dado.\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">enum</span> <span class="n">OperatingSystems</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="n">Windows</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span><span class="err">\</span><span class="n">t</span><span class="c1">// ...000001\n    Mac = 2,\t\t// ...000010\n    Linux = 4,\t\t// ...000100\n    Other = 8\t\t// ...001000\n}\n\n// ... \nvar pl1 = OperatingSystems.Mac | OperatingSystems.Windows;\nConsole.WriteLine(pl1); // 3\nConsole.WriteLine((int)pl1); // 3\n\nif (pl1.HasFlag(OperatingSystems.Mac))\n{\n    Console.WriteLine(\&quot;User knows Mac\&quot;); // &lt;-- This will execute\n}\n\nvar pl2 = OperatingSystems.Other | OperatingSystems.Linux | OperatingSystems.Mac;\nConsole.WriteLine(pl2); // 14\n</span></code></pre></figure> \n\n### Flags  \nComo puedes ver, queremos mostrar los valores que contiene un `enum` combinado, únicamente obtenemos el entero que resulta de la combinación, ante lo cual podemos hacer uso del <a href=\"https://msdn.microsoft.com/es-MX/library/aa288454(v=vs.71).aspx\" target=\"_blank\" rel=\"nofollow\">atributo</a> `FlagsAttribute` que se coloca sobre la declaración de un tipo y permiten permiten a la enumeración mostrarse de manera correcta:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n</span><span class="p">[</span><span class="n">Flags</span><span class="p">]</span><span class="err">\</span><span class="n">npublic</span> <span class="k">enum</span> <span class="n">DaysOfWeek</span> <span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="n">Sun</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">Mon</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Tue</span> <span class="p">=</span> <span class="m">4</span><span class="p">,</span> <span class="err">\</span><span class="n">n</span>    <span class="n">Wed</span> <span class="p">=</span> <span class="m">8</span><span class="p">,</span> <span class="n">Thu</span> <span class="p">=</span> <span class="m">16</span><span class="p">,</span> <span class="n">Fri</span> <span class="p">=</span> <span class="m">32</span><span class="p">,</span> <span class="err">\</span><span class="n">n</span>    <span class="n">Sat</span> <span class="p">=</span> <span class="m">64</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span><span class="c1">// ...\n\nvar alarmGoesOffOn = DaysOfWeek.Mon | DaysOfWeek.Wed | DaysOfWeek.Fri;\nConsole.WriteLine(\&quot;Alarm goes off on: \&quot; + alarmGoesOffOn); // Alarm goes off on: Mon, Wed, Fri\n</span></code></pre></figure>  \n\nEs importante señalar que por si mismo, el atributo lo, único que hace es permitir que el método `ToString` devuelva una representación \"amigable\" de la enumeración.  \n\nNo olvides descargar el código para que practiques.\n\n### Beneficios de las enumeraciones  \nUsar `enum`s en lugar de constantes de tipo entero nos provee el beneficio de dotar de mayor semántica a nuestro código, ya que no es lo mismo tener varias constantes con una ligera similitud en el nombre, a tener un grupo de valores dentro de un tipo `enum`. Sin olvidar que al ser tipos enteros es sencillo su almacenamiento y serialización. \n\nNo olvides <a href=\" https://github.com/ThatCSharpGuy/aprende-c-sharp/tree/master/Enums\" target=\"_blank\" rel=\"nofollow\">descargar el código</a> para practicar."'   
}