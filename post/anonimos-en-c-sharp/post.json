{	
	"id" : "/post/anonimos-en-c-sharp/",
	"tv" : false,
	"date": "2015-11-26 15:00:00 -0600",
	"title" : "Tipos anónimos en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimagesfeatured.png",
	"tags" :
	["AprendeCSharp"],
	
	"content" : body"¿A qué suena cuando se dice que algo es anónimo? … pues eso mismo es aplicable a los tipos anónimos en C#. En este post te voy a contar sobre ellos, pero antes comencemos por ver el siguiente fragmento de código:\n\n{% highlight csharp %}\nclass Student\n{\n    public string Name { get; set; }\n}\n{% endhighlight %}  \n\n`Student` es un ejemplo de un tipo que **no es anónimo**, porque  pues bueno… tiene un nombre. Para usarlo basta con instanciarlo de esta manera: `var estudianteConocido = new Student() { Name = \"Roberto\" };` y listo.\n\n## Ahora sí, anónimos\n\nAhora veamos un ejemplo de algo que **sí es anónimo** (y prepárate para leer muchas veces la palabra \"anónimo\"):\n\n{% highlight csharp %}\nvar estudianteDesconocido = new { Name = \"Rigoberto\" };\nvar estudianteDesconocido2 = new { Nombre = \"Pedro\", Edad = \"12\" };\n{% endhighlight %}  \n\nPareciera una declaración normal pero es importante notar que no podemos decir de qué tipo es nuestra variable `estudianteDesconocido` o `estudianteDesconocido2` puesto que son anónimos, también por eso se <a href=\"/post/var-en-c-sharp/\">usa var para declararlo</a>.  \n\nPara cada tipo anónimo que usamos, el compilador crea una definición de clase para dicho tipo por nosotros, ahórrandonos así la tarea de tener que hacerlo. Es decir que un anónimo es un tipo por referencia que deriva directamente de `object`.\n\nEstos tipos son una herramienta más que nos ofrece C# para minimizar la cantidad de código que nosotros como programadores tenemos que escribir, sin embargo es importante tener en cuenta algunas de sus características para sacarle el máximo provecho:  \n\n### Inicialización  \nPara inicializarlos, es necesario usar el operador `new`, la <a href=\"https://msdn.microsoft.com/en-us/library/bb397680.aspx\" target=\"_blank\">inicialización de objetos</a> y la palabra `var`. La inicialización de objetos cobra importancia con los tipos anónimos porque el nombre de sus propiedades depende del nombre de las variables que se asignen en su creación.  \n\nAsí pues:  \n\n- `estudianteDesconocido` tiene una propiedad llamada `Name`  \n- `estudianteDesconocido2` tiene una propiedad llamada `Nombre`\n y una llamada `Edad`  \n\nPodemos ahorrarnos el indicar los nombres de las propiedades directamente si utilizamos variables para inicializar el tipo anónimo:\n\n{% highlight csharp %}\ndouble x = 9.1;\nfloat y = 3.2;\n\nvar point1 = new { x, y };\nvar point2 = new { x, SuperY = y };\n{% endhighlight %}  \n\nLa variable `point1` tendrá una propiedad llamada `x` de tipo double y otra llamada `y` del tipo float. Inclusive podemos combinar las formas de inicializar, en este caso `point2` tiene como propiedades `x` y `SuperY`.\n\n### No es tipado dinámico  \nUna de las grandes dudas que te podrían surgir es si esto no viola el hecho de que C# es un lenguaje fuertemente tipado y pues no. Los tipos anónimos **siguen siendo fuertemente tipados**, como ya se dijo antes, al momento de la compilación se crea una clase para nuestra variable y esta variable no puede cambiar de tipo con el flujo del programa.  \n\nPodemos comprobarlo fácilmente. El compilador nos marcará un error si intentamos hacer algo como esto:\n\n{% highlight csharp %}\n// \"Teacher\" no es una propiedad de estudianteDesconocido\nestudianteDesconocido.Teacher = \"Andrés\";\n{% endhighlight %}  \n\nO algo como esto:\n\n{% highlight csharp %}\n// Son tipos diferentes\nestudianteDesconocido = estudianteDesconocido2;\n{% endhighlight %}  \n\n### Propiedades de solo lectura  \nLas propiedades que un *anónimo* contiene son siempre de solo lectura, es decir que son solo asignables al momento de la inicialización y no podemos cambiar sus valores en otro punto del programa; esto tiene una explicación que tiene que ver con la <a href=\"http://blogs.msdn.com/b/sreekarc/archive/2007/04/03/immutable-the-new-anonymous-type.aspx\" target=\"_blank\">inmutabilidad de los anónimos</a>.  \n\nExplicado en código es decir que no podemos hacer algo como esto:\n\n{% highlight csharp %}\n// Nay, las propiedades en un anónimo son de solo lectura\nestudianteDesconocido.Name = \"Nuevo nombre\";\n{% endhighlight %} \n \n\n### Restricciones  \nUna de las restricciones más notables de los tipos anónimos es que su uso está limitado a un alcance interno, es decir, dentro del cuerpo de un método.  \n\nSi bien es posible crear un método que devuelva `object` (que es la clase base de cualquier tipo anónimo), no podemos usarlo sin violar el tipado estático que provee C#.  \n\n### Derivan de object  \nAl ser tipos derivados de `object` los tipos anónimos tienen métodos que resultan bastante útiles, estos son:\n\n#### ToString\nAl llamar `ToString` el resultado será una cadena que contiene todas y cada una de las propiedades que contiene así como sus valores. Por ejemplo, llamar:\n\n{% highlight csharp %}\nConsole.WriteLine(estudianteDesconocido);\nConsole.WriteLine(estudianteDesconocido2);\nConsole.WriteLine(point2);\n{% endhighlight %}  \n\nMostrará en pantalla `{ Name = Rigoberto }`, `{ Nombre = Pedro, Edad = 12 }`, `{ x = 9.1, SuperY = 3.2 }` respectivamente.  \n\n#### Equals  \nEs posible comparar los tipos anónimos contra cualquier otro tipo, sin embargo el método `Equals` únicamente devolverá `true` si los tipos comparten:  \n\n - Las mismas propiedades, en nombre y número\n - El mismo orden de declaración de las propiedades\n - Los mismos valores para esas propiedades  \n\nEsto tal vez requiere un ejemplo en código, así que, considera las declaraciones de tipos anónimos siguientes:\n\n{% highlight csharp %}\nvar p1 = new { X = 1, Y = 0 };\nvar p2 = new { X = 1, Y = 0 };\nvar p3 = new { Y = 0, X = 1 };\nvar p4 = new { X = 5, Y = 2 };\n{% endhighlight %}  \n\nTodas tienen propiedades con nombre similar `X` y `Y`, pero únicamente `p1` y `p2` son iguales en propiedades y en valores. `p3` y `p1` son iguales en valores pero no en orden. `p1` y `p4` son iguales en orden pero no en valores.\n\n{% highlight csharp %}\t\t\nConsole.WriteLine(p1.Equals(p2)); // True\nConsole.WriteLine(p1.Equals(p3)); // False\nConsole.WriteLine(p1.Equals(p4)); // False\n{% endhighlight %}  \n\n### Uso  \nBueno... pero ¿para qué sirven?\n\n#### LINQ  \nLos anónimos son tipos que otorgan a <a href=\"/post/linq-en-c-sharp/\">LINQ (otra de las herramientas de C#)</a> un gran poder, y es que usandola junto con las consultas se pueden crear tipos \"al vuelo\" para usarlos dentro de nuestro código, este es un ejemplo sencillo de uso:\n\n{% highlight csharp %}\nvar olderStudents = from s in students\n                    where s.Age > 10\n                    select new { FullName = s.Name + \" \" + s.Surname, s.Age };\n{% endhighlight %}\n\n#### Debuguear  \nDada la facilidad y limpieza con la que se pueden declarar, los anónimos son comunmente usados para cuando se debugea, como recordamos, al llamar `ToString` en un anónimo, este nos mostrará una lista de sus propiedades junto con sus valores.  \n\n### Lo que sigue  \nEn posts siguientes revisaremos consultas más complejas con LINQ y los tipos anónimos, además de otras de las características del lenguaje. Te invito a que revises las nuevas páginas de etiquetas en <a href=\"/tag\">etiquetas del blog</a> y a que te estés al tanto de mis posts en <a href=\"/registro\">el registro</a>. \n"
}