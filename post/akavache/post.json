{	
	"id" : "/post/akavache/",
	"tv" : false,
	"date": "2016-08-08 14:00:01 -0500",
	"title" : "Persistencia de datos con Akavache",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//akavache/featured.jpg",
	"tags" : ["NuGetRecomendado"],
	"content": "<p>Una característica que es de suma importancia en nuestras aplicaciones móviles es la capacidad de persistir la información que se genera en ella para que esté disponible para uso posterior. Por ejemplo, podemos almacenar la información de inicio de sesión del usuario, las recetas favoritas o tal vez la cantidad de PokeInciensos que tiene nuestro personaje.</p>\n\n<p>Además de que, si la información de nuestra app es almacenada localmente, es posible darle al usuario una sensación de rapidez. Ya que de otro modo tendríamos que obtener los datos de un servicio externo, como un servicio web, lo cual toma tiempo dependiendod de la red a la que esté conectado el usuario.</p>\n\n<p>Para persistir los datos podemos usar muchas opciones, desde archivos de texto plano, las <em>shared preferences</em> o <em>NSDefaults</em>, hasta aventurarnos a usar SQLite; todas tienen sus ventajas y sus desventajas, pero si lo que quieres es almacenar pares <em>clave-valor</em>, debes considerar el uso de <em>Akavache</em>.</p>\n\n<p><em>Akavache</em>, que es una pequeña librería que se puede descargar de NuGet, nos ahora mucho del trabajo necesario para realizar la persistencia de información dentro de nuestra app. <em>Akavache</em> está basado en SQLite3 y permite almacenar todo tipo de objetos asociados a una llave de tipo <code>string</code>.</p>\n\n<h2 id=\"el-cdigo\">El código</h2>\n\n<h3 id=\"applicationname\">ApplicationName</h3>\n<p>Antes de comenzar a utilizar cualquier método relacionado con <em>Akavache</em>, es necesario establecer el nombre de nuestra aplicación usando la propiedad estática <code>ApplicationName</code> de la clase <code>BlobCache</code>:</p>\n\n<pre class=\"csharp\">\nBlobCache.ApplicationName = \"AvakacheSample\";\n</pre>\n\n<h3 id=\"blobcache\">BlobCache</h3>\n<p>La forma de acceder al almacenamiento es através de la clase estática <code>BlobCache</code> y cualquiera de sus propiedades:</p>\n\n<ul>\n  <li><code>LocalMachine</code>, almacenamiento convencional</li>\n  <li><code>Secure</code>, almacenamiento encriptado</li>\n  <li><code>UserAccount</code>, almacenamiento que se sincroniza a través de dispositivos de la misma familia</li>\n</ul>\n\n<p>Para este post usaré únicamente <code>LocalMachine</code> o <code>Secure</code>.</p>\n\n<h3 id=\"insertobject\">InsertObject</h3>\n<p>Comencemos con algo simple: Supongamos que tenemos una clase que representa un usuario, con las propiedades <code>Username</code> y <code>FullName</code>, para almacenar debemos hacer uso del método <code>InsertObject</code>:</p>\n\n<pre class=\"csharp\">\nawait BlobCache\n    .LocalMachine\n    .InsertObject(\"user_key\",\n                  new Usuario\n                  \n                      Username = usernameEntry.Text,\n                      FullName = fullNameEntry.Text\n                  ,\n                  DateTimeOffset.Now.AddSeconds(15));\n</pre>\n\n<p>Como puedes ver, el primer argumento es una cadena que será la llave, el segundo argumento es el objeto a guardar y el tercer argumento es un <code>DateTimeOffset</code> opcional, nos ayuda a establecer una fecha de expiración de la información guardada, si no lo enviamos la información permanecerá “vigente” indeterminadamente. Presta atención a que en este caso, el objeto únicamente está vigente por quince segundos.</p>\n\n<h3 id=\"vacumm\">Vacumm</h3>\n<p>El método <code>Vacumm</code> sirve para remover del almacenamiento los valores expirados, por ejemplo, si esperamos 15 segundos después de haber ejecutado el código anterior, nuestro objeto ya no existirá:</p>\n\n<pre class=\"csharp\">\nawait BlobCache.LocalMachine.Vacuum();\n</pre>\n\n<h3 id=\"getobjectt\">GetObject<t></t></h3>\n<p>Para recuperar un objeto es necesario el uso del  <a href=\"../genericos-c-sharp-metodos\" target=\"_blank\" rel=\"nofollow\">método genérico</a> <code>GetObject&lt;T&gt;</code>, este únicamente recibe la llave del elemento que recuperar:</p>\n\n<pre class=\"csharp\">\ntry\n\n    var usuario = await BlobCache\n                    .LocalMachine\n                    .GetObject<usuario>(\"user_key\");\n\ncatch(KeyNotFoundException ex)\n\n\n  \n\nNota cómo es que esta llamada está envuelta en un bloque *try-catch* ya que *Akavache* lanza una excepción en caso de que la llave solicitada ya no exista en el almacenamiento.  \n\n### SaveLogin  \nComo lo mencioné antes, también podemos hacer uso de un almacenamiento seguro, en donde podemos almacenar, entre otras cosas, información del inicio de sesión de los usuarios. Para esto tenemos a nuestra disposición el método `SaveLogin`:  \n\n<pre class=\"csharp\">\nawait BlobCache.Secure.SaveLogin(userEntry.Text,\n                                 passEntry.Text,\n                                 \"thatcsharpguy.com\",\n                                 DateTimeOffset.Now.AddDays(7));\n</pre>  \n\nLos argumentos son:  \n\n 1. Nombre de usuario\n 2. Password\n 3. Host (opcional), que podríamos ver como la *llave* de ese login\n 4. Fecha de expiración (opcional)\n\n### GetLoginAsync  \nPara recuperar la información de inicio de sesión basta con llamar al método `GetLoginAsync` pasándole el host deseado como argumento. Este método también lanzará una excepción si la información solicitada no existe:  \n\n<pre class=\"csharp\">\ntry\n\n    var loginInfo = await BlobCache.Secure.GetLoginAsync(\"thatcsharpguy.com\");\n\ncatch(KeyNotFoundException ex)\n\n\n</pre>  \n\n## Cacheando objetos  \nPara los siguientes ejemplos tomaremos en cuenta el siguiente método asíncorono, que lo único que hace es esperar dos segundos antes de devolver la fecha y hora actuales:\n\n<pre class=\"csharp\">\nasync Task<datetime> GetDateTime()\n\n    await Task.Delay(2000);\n    return DateTime.Now;\n\n  \n\n### GetOrFetchObject<t>\nEl método `GetOrFetchObject` es muy parecido a `GetObject`, con la salvedad de que este método no lanza una excepción si no existe el elemento buscado. Para no fallar, recibe como argumento un delegado `Func<t>` que ejecutará en caso de ser necesario. El valor devuelto por este delegado se guardará en la memoria y se devolverá al usuario:\n\n<pre class=\"csharp\">\nvar dt = await BlobCache.LocalMachine\n                        .GetOrFetchObject(\"Date\", () =&gt; GetDateTime());\nSetValue(dt);\n</pre>  \n\n### GetAndFetchLatest<t>  \nDe igual manera, supongamos que tenemos información guardada en el dispositivo, pero es probable que tengamos información más reciente en el servidor. El método `GetAndFetchLatest` es parecido en argumentos a `GetOrFetchObject` (también recibe un delegado), pero este realiza dos cosas:  \n\n 1. Devuelve inmediatamente el valor almacenado en el dispositivo (si existe)\n 2. Ejecuta el delegado para recuperar el valor más reciente  \n\nPara llamar a este método NO debemos utilizar la palabra reservada *await*, sino, usar el método `Suscribe` que en pocas palabras indica una acción que se debe realizar cada que se obtenga un valor como resultado de la ejecución del método (en nuestro caso se ejecutará dos veces, una con el valor existente y otra cuando se obtenga el nuevo valor):\n\n<pre class=\"csharp\">\nBlobCache.LocalMachine\n            .GetAndFetchLatest(Key,\n                            () =&gt; GetDateTime())\n            .Subscribe((obj) =&gt; \n\n    Device.BeginInvokeOnMainThread(() =&gt;\n    \n        SetValue(obj);\n    );\n);\n</pre>  \n\nNo hay nada mejor que ver en funcionamiento los métodos mencionados, presta atención al reloj sobre el simulador y a cómo es que se comporta cada botón:\n\n<iframe width=\"420\" height=\"315\" src=\"https://www.youtube.com/embed/8VMuxhH9IWg\" frameborder=\"0\" allowfullscreen=\"\"></iframe>\n\n## Conclusión  \nAún hay algunas cuantas funciones de *Akavache* de las que no hablé en este post, te invito a consultar <a href=\"https://github.com/akavache/Akavache\" target=\"_blank\">la documentación</a> y <a href=\"https://codemilltech.com/akavache-is-aka-awesome/\" target=\"_blank\">este otro post</a> en el que hay mucha información. No está de más decir que *Akavache* es muy potente, pero que usada <a href=\"http://arteksoftware.com/resilient-network-services-with-xamarin/\" target=\"_blank\">junto con otras librerías</a> sus capacidades se multiplican. En general su experiencia de uso es bastante buena, salvo por algunos pequeños requerimientos en las plataformas de Windows, pero nada del otro mundo.\n \n# Instalación  \nComo siempre, hay que buscar en el gestor de paquetes de NuGet: `Akavache`\n\nO desde la consola: \n\n console titulo \nPM&gt; Install-Package Akavache\n endconsole \n\nRecuerda que si lo usas en Xamarin.Forms debes instalar Akavache en todos tus proyectos (núcleo y clientes) para que funcione correctamente. No olvides revisar el código fuente de *Akavache* <a href=\"https://github.com/JimBobSquarePants/ImageProcessor\" target=\"_blank\">en GitHub</a> (thanks <a href=\"https://github.com/paulcbetts\" target=\"_blank\" rel=\"nofollow\">Mr. Paul Betts</a>).  \n  \nEn cuanto a este post, también te invito a descargar el código de la aplicación que ves en el vídeo anterior, está en <a href=\"https://github.com/ThatCSharpGuy/Akavache-sample\" target=\"_blank\" rel=\"nofollow\">este repositorio de GitHub</a>.\n</t></t></t></datetime></pre></usuario></pre>\n"
}