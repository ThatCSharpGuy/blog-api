{	
	"id" : "/post/creando-propios-alias/",
	"tv" : false,
	"date": "2015-09-16 08:00:00 -0500",
	"title" : "Creando nuestros propios alias",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages/creando-propios-alias/featured.jpg",
	"tags" : ["AprendeCSharp"],
	"content": "Hace poco vimos que existen <a href=\"/string-vs-system-string-es\" target=\"_blank\">alias en C# para los tipos predefinidos</a> de datos, y hasta ahí todo claro. Pero nosotros como programadores también podemos beneficiarnos de crear nuestros propios alias. Hay dos maneras de hacer uso de los alias:  \n\n### Para tipos de dato  \n¿No sería fabuloso poder \"cambiarle\" (entre comillas porque en realidad solamente le estamos dando otro nombre) el nombre a <code>int</code>? tal vez sea mejor ponerle algo como <code>Entero</code>. Lo podemos hacer con una sentencia <code>using</code> de la siguiente manera:\n<pre class=\"csharp\">\nusing Entero = System.Int32;\n</pre>  \nY después usarlo de la siguiente manera:\n<pre class=\"csharp\">\nEntero uno = 1;\nEntero dos = 2;\nConsole.WriteLine(uno + dos); // Imprimirá 3\n</pre>  \nPero bueno, no creo que cambiarle el nombre a un entero les haga mucho sentido, así que trasladémoslo a una aplicación real. Supongamos que tenemos una aplicación que separa el modelo del acceso a datos, dentro de ella también tenemos dos clases llamadas <code>Person</code>, una dentro del namespace <code>MyApp.DataAccess.Entities</code> y otra dentro de <code>MyApp.ViewModels.Editable</code>. Para que la aplicación funcione hay un punto en el que ambas clases deben coincidir para que *mapear* de una a otra. Sin alias tendríamos que usar el nombre completo de las clases: \n<pre class=\"csharp\">\npublic static MyApp.DataAccess.Entities.Person MapPerson(MyApp.ViewModels.Editable.Person person)\n\n\t// ...\n</pre>  \nAhora, usando alias reemplazaremos los nombres por algo más corto (y probablemente amigable):  \n<pre class=\"csharp\">\nusing EntityPerson = MyApp.DataAccess.Entities.Person;\nusing EditablePerson = MyApp.ViewModels.Editable.Person;\n// ... ... ...\npublic static EntityPerson MapPerson(EditablePerson person)\n\n\t// ...\n</pre>  \n### Para nombres de espacio  \nHay que aceptarlo, cambiar el nombre de los tipos puede resultar un poco confuso, pero C# también nos ofrece la posibilidad de ponerle un alias a los *namespaces* y se hace de la misma manera que para los tipos de dato:  \n<pre class=\"csharp\">\nusing Ents = MyApp.DataAccess.Entities;\nusing Edt = MyApp.ViewModels.Editable;\n// ... ... ...\npublic static Ents.Person MapPerson(Edt.Person person)\n\n\t// ...\n</pre>  \n### Gran, gran desventaja  \nDejé lo peor para el final: Los alias creados por nosotros solamente son válidos dentro del bloque de código en el que los definamos, ya sea dentro de un <code>namespace</code> o dentro de un archivo completo, lo cual significa que tenemos que repetirlo para cada archivo en el que lo usemos. Sería muy útil poderlos definir una sola vez a nivel global y después poder usarlas en toda nuestra aplicación.\n\n#### Mi consejo \nEstos alias existen, pero yo procuro no usarlas salvo en casos extremos y es que si no se usan con moderación pueden complicar mucho la lectura del código. \n\n"
}