{	
	"id" : "/post/tuples-c-sharp/",
	"tv" : false,
	"date": "2016-05-16 14:00:01 -0500",
	"title" : "Tuples en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/tuples.png",
	"tags" : ["AprendeCSharp"],
	"content": "<p>Seguramente te ha pasado, alguna vez has pensado “Ojalá pudiera devolver dos cosas desde este método” y si bien recuerdas que los <a href=\"../metodos-c-sharp\">métodos en C#</a> únicamente pueden tener un solo tipo de retorno, es posible devolver más de dos valores haciendo uso de la clase genérica <code>Tuple</code>.</p>\n\n<p>Podemos ver a <code>Tuple</code> (o tupla) como un auxiliar para el programador, que <strong>permite “agrupar” otros tipos dato dentro de uno solo</strong>, para así tratarlos como uno solo, esto, a través de varias clases genéricas definidas de la siguiente manera:</p>\n\n<ul>\n  <li><code>Tuple&lt;T1&gt;</code></li>\n  <li><code>Tuple&lt;T1, T2&gt;</code></li>\n  <li><code>Tuple&lt;T1, T2, T3&gt;</code></li>\n  <li><code>Tuple&lt;T1, T2, T3, T4&gt;</code></li>\n  <li><code>Tuple&lt;T1, T2, T3, T4, T5&gt;</code></li>\n  <li><code>Tuple&lt;T1, T2, T3, T4, T5, T6&gt;</code></li>\n  <li><code>Tuple&lt;T1, T2, T3, T4, T5, T6, T7&gt;</code></li>\n  <li><code>Tuple&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt;</code></li>\n</ul>\n\n<p>## Creando tuplas</p>\n\n<p>A través de los tipos <code>T#</code> se define el contenido de la clase, siendo así que para crear una tupla que contiene un entero y dos cadenas debemos usar:</p>\n\n<pre class=\"csharp\">\nvar t = new Tuple&lt;int, string, string&gt;(1, \"A\", \"B\");\n</pre>\n\n<p>O, por ejemplo, si quisiéramos crear algo más complejo como una clase que contiene un entero, un decimal, un objeto, otro entero, un booleano y un flotante, tendríamos que hacer algo como esto:</p>\n\n<pre class=\"csharp\">\nvar t1 = new Tuple&lt;int, decimal, object, int, bool, float&gt;(3, 1.5m, new  emoji = \":grin:\" , 5, true, 7.5f);\n</pre>\n\n<p>Uhhmm, la sintaxis se pone un poco complicada, ¿no? para eliminar esta sintaxis complicada, podemos usar el método estático <code>Create</code> de la clase <code>Tuple</code> para crear tuplas:</p>\n\n<pre class=\"csharp\">\nvar t1 = Tuple.Create(3, 1.5m, new  emoji = \":grin:\" , 5, true, 7.5f);\n</pre>\n\n<p>Este método, inferirá de los tipos de dato a partir de los parámetros pasados como argumentos.</p>\n\n<h2 id=\"accediendo-a-los-miembros\">Accediendo a los miembros</h2>\n<p>Una vez creada la clase (ya sea con el constructor o el método estático), podemos acceder a cada uno de los datos a través de las propiedades llamadas  <code>Item#</code>, donde # es el número de la propiedad a la que nos referimos:</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(t.Item1); // 1 -&gt; int\nConsole.WriteLine(t.Item2 + \" - \" + t.Item3 ); // \"A - B\" -&gt; string\n</pre>\n\n<p>Es importante señalar que las propiedades de la clase <code>Tuple</code> son de solo lectura, y que una vez asignadas en el constructor, no pueden ser modificadas:</p>\n\n<pre class=\"csharp\">\n// t1.Item4 = 7; // Error, solo lectura\n</pre>\n\n<h2 id=\"ejemplos-de-uso\">Ejemplos de uso</h2>\n\n<h3 id=\"como-parmetros-de-mtodo\">Como parámetros de método</h3>\n<p>Podríamos pensar en un método como este:</p>\n\n<pre class=\"csharp\">\nstring MegaMetodoArgumentos(int studentId, int classroomId, string type, decimal sum, bool active)\n</pre>\n\n<p>Para llamarlo necesitaríamos escribir algo como esto:</p>\n\n<pre class=\"csharp\">\nMegaMetodoArgumentos(10, 3, \"MX\", 3.1m, true);\n</pre>\n\n<p>O, también podríamos haber escrito el método de la siguiente manera:</p>\n\n<pre class=\"csharp\">\nstring MegaMetodoTuple(Tuple&lt;int, int, string, decimal, bool&gt; args)\n</pre>\n\n<p>E invocarlo así:</p>\n\n<pre class=\"csharp\">\nvar tuple = Tuple.Create(10, 3, \"MX\", 3.1m, true);\nMegaMetodoTuple(tuple);  \n</pre>\n\n<h3 id=\"como-valores-de-retorno\">Como valores de retorno</h3>\n\n<p>El beneficio se nota más cuando se usa una tupa como valor de retorno, imaginemos un método en el que convertimos tomamos un color definido en hexadecimal y lo convertimos a su representación RGB en decimal.</p>\n\n<p>Podríamos usar <a href=\"http://thatcsharpguy.com/post/out-ref-c-sharp/\">parámetros de salida</a>:</p>\n\n<pre class=\"csharp\">\nprivate static void SplitColors(string hex, out int r, out int g, out int b)\n\n    r = Int32.Parse(hex.Substring(0, 2), NumberStyles.HexNumber);\n    g = Int32.Parse(hex.Substring(2, 2), NumberStyles.HexNumber);\n    b = Int32.Parse(hex.Substring(4, 2), NumberStyles.HexNumber);\n\n</pre>\n\n<p>Pero también podríamos usar una tupla como valor de retorno:</p>\n\n<pre class=\"csharp\">\nprivate static Tuple&lt;int, int, int&gt; SplitColors(string hex)\n\n    int r = Int32.Parse(hex.Substring(0, 2), NumberStyles.HexNumber);\n    int g = Int32.Parse(hex.Substring(2, 2), NumberStyles.HexNumber);\n    int b = Int32.Parse(hex.Substring(4, 2), NumberStyles.HexNumber);\n    return Tuple.Create(r, g, b);\n\n</pre>\n\n<p>Entonces para llamarlo, simplemente necesitaríamos escribir lo siguiente:</p>\n\n<pre class=\"csharp\">\nstring color = \"3C8A3F\";\nvar colors = SplitColors(color);\nConsole.WriteLine(\"0 es R:1 G:2 B:3\", color, colors.Item1, colors.Item2, colors.Item3);\n</pre>\n\n<h2 id=\"tuplas-de-8-elementos\">Tuplas de 8 elementos</h2>\n<p>Si volvemos a las definiciones de las clases <code>Tuple</code> puedes ver que existen hasta 8 versiones genéricas disponibles. Sin embargo, la octava una peculiaridad: el octavo valor no se almacena dentro de “Item8”, sino dentro de otra tupla (a la que accedemos desde la propiedad <code>Rest</code>):</p>\n\n<pre class=\"csharp\">\nvar megaTuple = Tuple.Create(1, 2, 3, 4, 5, 6, 7, 8);\n//Console.WriteLine(miniTuple.Item8); // Item8 no existe, entonces tenemos que usar Rest:\nConsole.WriteLine(megaTuple.Rest.Item1); \n</pre>\n\n<h2 id=\"ejemplo-de-la-vida-real\">Ejemplo de la vida real</h2>\n<p>Mmm… en realidad no existe alguna api dentro del framework de .NET que haga uso de tuplas, pero en específico se recomienda para:</p>\n\n<ul>\n  <li>Representar un set de datos, por ejemplo, un registro en una base de datos</li>\n  <li>Proveer acceso fácil, y manipulación de, un set de datos</li>\n  <li>Regresar múltiples valores de un método sin usar parámetros por referencia</li>\n  <li>Enviar múltiples valores a un método</li>\n</ul>\n\n<h2 id=\"lo-que-sigue\">Lo que sigue</h2>\n<p>Revisa el <a href=\"https://github.com/ThatCSharpGuy/aprende-c-sharp/tree/master/Tuples\" target=\"_blank\" rel=\"nofollow\">código que acompaña al post</a> y juegues un poco con él, sé que tal vez el asunto de los genéricos en C# puede causar un poco de confusión y es un tema que estoy planeando cubrir en un post futuro.</p>\n"
}