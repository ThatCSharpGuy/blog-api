{	
	"id" : "/post/usos-using-2/",
	"tv" : false,
	"date": "2016-07-18 14:00:01 -0500",
	"title" : "Uso de using",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/using-2.png",
	"tags" : ["AprendeCSharp"],
	  
	"content": '"¿Cuántas veces has visto la palabra  `using` en C#? ... me aventuraré a decir que muchas, y es que la palabra `using` tiene varios significados en el lenguaje. Previamente escribí sobre cómo se <a href=\"../creando-propios-alias\">usa para crear aliases</a>. En este post hablaré sobre otro de sus usos.  \n\nEn C#, también podemos emplear `using` para especificar un bloque de código asociado a una o varias instancias de una clase que implemente `IDisposable`, el hacer uso de estos bloques de código nos ayuda a manejar correctamente este tipo de objetos, ya que se encarga de llamar al método `Dispose` antes de terminar de ejecutar dicho bloque.  \n\nLa importancia de llamar al método `Dispose` en un objeto radica en que es dentro de ese método que se recomienda liberar todos los recursos que fueron empleados para su correcto funcionamiento, y olvidar ejecutar dicho método puede traducirse en problemas que causarán que nuestra aplicación se comporte incorrectamente.\n\n### Ejemplo  \n\nPara poner un ejemplo, cree la clase `Desechable` que implementa `IDisposable`:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">Desechable</span> <span class="p">:</span> <span class="n">IDisposable</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">Desechable</span><span class="p">()</span><span class="err">\</span><span class="n">n</span>    <span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Hello, Desechable.\&quot;);\n    }\n    //...\n    public void Dispose()\n    {\n        Console.WriteLine(\&quot;Bye bye, Desechable.\&quot;);\n    }\n}\n</span></code></pre></figure>  \n\n### Simplificando sintaxis\n\nUna forma recomendada de usar la clase `Desechable` es la siguiente, ya que de ese modo nos aseguramos que se llame al método `Dispose` que, en teoría, se encargará de liberar los recursos asociados a la instancia:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">desechable1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Desechable</span><span class="p">();</span><span class="err">\</span><span class="n">ntry</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="n">desechable1</span><span class="p">.</span><span class="n">DoSomething</span><span class="p">();</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">nfinally</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">if</span> <span class="p">(</span><span class="n">desechable1</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span><span class="err">\</span><span class="n">n</span>    <span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="p">((</span><span class="n">IDisposable</span><span class="p">)</span><span class="n">desechable1</span><span class="p">).</span><span class="n">Dispose</span><span class="p">();</span><span class="err">\</span><span class="n">n</span>    <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nSin embargo, `using` hace más sencilla la sintaxis. Podemos reemplazar el código anterior por el siguiente, y nuestro programa segurá funcionando igual:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nusing</span> <span class="p">(</span><span class="kt">var</span> <span class="n">desechable1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Desechable</span><span class="p">())</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="n">desechable1</span><span class="p">.</span><span class="n">DoSomething</span><span class="p">();</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nMucho más simple, ¿no?\n\n### Manejo de errores  \n\nA pesar de que a final de cuentas nuestro código quede envuelto en un bloque *try-finally*, no significa que este se \"comerá\" las excepciones que puedan ocurrir, es por eso que también podemos usar bloques *try-catch* dentro de un bloque `using`:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nusing</span> <span class="p">(</span><span class="kt">var</span> <span class="n">desechable2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Desechable</span><span class="p">())</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">try</span><span class="err">\</span><span class="n">n</span>    <span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="n">desechable2</span><span class="p">.</span><span class="n">DoSomethingWithException</span><span class="p">();</span><span class="err">\</span><span class="n">n</span>    <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">catch</span><span class="err">\</span><span class="n">n</span>    <span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;¡¡¡¡¡Error!!!!!\&quot;);\n    }\n}\n</span></code></pre></figure>  \n\n### Alcance \nAl ser bloques de códigos envueltos por `{` `}` todas las variables, incluyendo la instancia dentro de `using`, únicamente estarán disponibles dentro de sus respectivos bloques e intentar usarlas fuera de este provocará un error en tiempo de compilación. \n\n### Agrupando declaraciones  \nHay ocasiones en las que es necesario instanciar la misma clase varias veces, para dichas ocasiones, `using` tiene esta sintaxis:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nusing</span> <span class="p">(</span><span class="n">Desechable</span> <span class="n">d1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Desechable</span><span class="p">(),</span><span class="err">\</span><span class="n">n</span>                <span class="n">d2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Desechable</span><span class="p">())</span><span class="err">\</span><span class="n">n</span><span class="p">{</span> <span class="c1">// ...                \n</span></code></pre></figure>\n\nEs importante señalar que tanto `d1` como `d2` deben ser del mismo tipo. O, si son de distinto, también podemos agruparlas de la siguiente manera:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nusing</span> <span class="p">(</span><span class="n">FileStream</span> <span class="n">homerStream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FileStream</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Homer.txt\&quot;, FileMode.Open))\nusing (Desechable d1 = new Desechable())\n{ // ...\n</span></code></pre></figure>    \n\n### Ejemplo de la vida real  \n\nMás que ejemplos de `using` más bien existen muchas clases en el framework que implementan `IDisposable`, como el uso de `Socket`s, recursos de red, conexiones a servicios web y los fluhos de datos, como `FileStream`:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nusing</span> <span class="p">(</span><span class="n">FileStream</span> <span class="n">homerStream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FileStream</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Homer.txt\&quot;, FileMode.Open))\n{\n    read = homerStream.Read(buffer, current, buffer.Length);\n    while (read != 0)\n    {\n        read = homerStream.Read(buffer, current, buffer.Length);\n        current += read;\n        Console.WriteLine(Encoding.UTF8.GetString(buffer));\n    }\n}\n</span></code></pre></figure>  \n\n### No se recomienda en todos los casos\n\nHay ocasiones en las que emplear `using` puede traernos más problemas de los que resuelve, específicamente para <a href=\"https://msdn.microsoft.com/en-us/library/aa355056.aspx\" target=\"_blank\" rel=\"nofollow\">gestionar la conexión a un servicio WCF</a>, fuera de ahí no hay problemas conocidos. Esta información me sorprendió incluso a mi. \n\n## Lo que sigue  \nLa palabra reservada que revisamos hoy tiene otro par de usos que estaré revisando más adelante en este blog, no olvides suscribirte para estar al tanto."'   
}