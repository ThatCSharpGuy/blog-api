{	
	"id" : "/post/usos-using-2/",
	"tv" : false,
	"date": "2016-07-18 14:00:01 -0500",
	"title" : "Uso de using",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/using-2.png",
	"tags" :
	[ 
		"AprendeCSharp"
	],
	"content" : "<p>¿Cuántas veces has visto la palabra  <code>using</code> en C#? … me aventuraré a decir que muchas, y es que la palabra <code>using</code> tiene varios significados en el lenguaje. Previamente escribí sobre cómo se <a href=\"../creando-propios-alias\">usa para crear aliases</a>. En este post hablaré sobre otro de sus usos.</p>

<p>En C#, también podemos emplear <code>using</code> para especificar un bloque de código asociado a una o varias instancias de una clase que implemente <code>IDisposable</code>, el hacer uso de estos bloques de código nos ayuda a manejar correctamente este tipo de objetos, ya que se encarga de llamar al método <code>Dispose</code> antes de terminar de ejecutar dicho bloque.</p>

<p>La importancia de llamar al método <code>Dispose</code> en un objeto radica en que es dentro de ese método que se recomienda liberar todos los recursos que fueron empleados para su correcto funcionamiento, y olvidar ejecutar dicho método puede traducirse en problemas que causarán que nuestra aplicación se comporte incorrectamente.</p>

<h3 id=\"ejemplo\">Ejemplo</h3>

<p>Para poner un ejemplo, cree la clase <code>Desechable</code> que implementa <code>IDisposable</code>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Desechable</span> <span class="p">:</span> <span class="n">IDisposable</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="nf">Desechable</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">Hello</span><span class="p">,</span> <span class="n">Desechable</span><span class="p">.</span><span class="err">”</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">//…</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">Bye</span> <span class="n">bye</span><span class="p">,</span> <span class="n">Desechable</span><span class="p">.</span><span class="err">”</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure></p>

<h3 id=\"simplificando-sintaxis\">Simplificando sintaxis</h3>

<p>Una forma recomendada de usar la clase <code>Desechable</code> es la siguiente, ya que de ese modo nos aseguramos que se llame al método <code>Dispose</code> que, en teoría, se encargará de liberar los recursos asociados a la instancia:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">desechable1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Desechable</span><span class="p">();</span>
<span class="k">try</span>
<span class="p">{</span>
    <span class="n">desechable1</span><span class="p">.</span><span class="n">DoSomething</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">finally</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">desechable1</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="p">((</span><span class="n">IDisposable</span><span class="p">)</span><span class="n">desechable1</span><span class="p">).</span><span class="n">Dispose</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure></p>

<p>Sin embargo, <code>using</code> hace más sencilla la sintaxis. Podemos reemplazar el código anterior por el siguiente, y nuestro programa segurá funcionando igual:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">desechable1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Desechable</span><span class="p">())</span>
<span class="p">{</span>
    <span class="n">desechable1</span><span class="p">.</span><span class="n">DoSomething</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure></p>

<p>Mucho más simple, ¿no?</p>

<h3 id=\"manejo-de-errores\">Manejo de errores</h3>

<p>A pesar de que a final de cuentas nuestro código quede envuelto en un bloque <em>try-finally</em>, no significa que este se “comerá” las excepciones que puedan ocurrir, es por eso que también podemos usar bloques <em>try-catch</em> dentro de un bloque <code>using</code>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">desechable2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Desechable</span><span class="p">())</span>
<span class="p">{</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="n">desechable2</span><span class="p">.</span><span class="n">DoSomethingWithException</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">catch</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“¡¡¡¡¡</span><span class="n">Error</span><span class="p">!!!!!</span><span class="err">”</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure></p>

<h3 id=\"alcance\">Alcance</h3>
<p>Al ser bloques de códigos envueltos por <code>{</code> <code>}</code> todas las variables, incluyendo la instancia dentro de <code>using</code>, únicamente estarán disponibles dentro de sus respectivos bloques e intentar usarlas fuera de este provocará un error en tiempo de compilación.</p>

<h3 id=\"agrupando-declaraciones\">Agrupando declaraciones</h3>
<p>Hay ocasiones en las que es necesario instanciar la misma clase varias veces, para dichas ocasiones, <code>using</code> tiene esta sintaxis:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="p">(</span><span class="n">Desechable</span> <span class="n">d1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Desechable</span><span class="p">(),</span>
                <span class="n">d2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Desechable</span><span class="p">())</span>
<span class="p">{</span> <span class="c1">// …              &lt;br /&gt;</span></code></pre></figure></p>

<p>Es importante señalar que tanto <code>d1</code> como <code>d2</code> deben ser del mismo tipo. O, si son de distinto, también podemos agruparlas de la siguiente manera:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="p">(</span><span class="n">FileStream</span> <span class="n">homerStream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FileStream</span><span class="p">(</span><span class="err">“</span><span class="n">Homer</span><span class="p">.</span><span class="n">txt</span><span class="err">”</span><span class="p">,</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">Open</span><span class="p">))</span>
<span class="k">using</span> <span class="p">(</span><span class="n">Desechable</span> <span class="n">d1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Desechable</span><span class="p">())</span>
<span class="p">{</span> <span class="c1">// …</span></code></pre></figure></p>

<h3 id=\"ejemplo-de-la-vida-real\">Ejemplo de la vida real</h3>

<p>Más que ejemplos de <code>using</code> más bien existen muchas clases en el framework que implementan <code>IDisposable</code>, como el uso de <code>Socket</code>s, recursos de red, conexiones a servicios web y los fluhos de datos, como <code>FileStream</code>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="p">(</span><span class="n">FileStream</span> <span class="n">homerStream</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FileStream</span><span class="p">(</span><span class="err">“</span><span class="n">Homer</span><span class="p">.</span><span class="n">txt</span><span class="err">”</span><span class="p">,</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">Open</span><span class="p">))</span>
<span class="p">{</span>
    <span class="n">read</span> <span class="p">=</span> <span class="n">homerStream</span><span class="p">.</span><span class="n">Read</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">current</span><span class="p">,</span> <span class="n">buffer</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">read</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">read</span> <span class="p">=</span> <span class="n">homerStream</span><span class="p">.</span><span class="n">Read</span><span class="p">(</span><span class="n">buffer</span><span class="p">,</span> <span class="n">current</span><span class="p">,</span> <span class="n">buffer</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
        <span class="n">current</span> <span class="p">+=</span> <span class="n">read</span><span class="p">;</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">UTF8</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">buffer</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure></p>

<h3 id=\"no-se-recomienda-en-todos-los-casos\">No se recomienda en todos los casos</h3>

<p>Hay ocasiones en las que emplear <code>using</code> puede traernos más problemas de los que resuelve, específicamente para <a href=\"https://msdn.microsoft.com/en-us/library/aa355056.aspx\" target=\"_blank\" rel=\"nofollow\">gestionar la conexión a un servicio WCF</a>, fuera de ahí no hay problemas conocidos. Esta información me sorprendió incluso a mi.</p>

<h2 id=\"lo-que-sigue\">Lo que sigue</h2>
<p>La palabra reservada que revisamos hoy tiene otro par de usos que estaré revisando más adelante en este blog, no olvides suscribirte para estar al tanto.</p>
"
}