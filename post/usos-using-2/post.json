{	
	"id" : "/post/usos-using-2/",
	"tv" : false,
	"date": "2016-07-18 14:00:01 -0500",
	"title" : "Uso de using",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/using-2.png",
	"tags" : ["AprendeCSharp"],
	"content": "<p>¿Cuántas veces has visto la palabra  <code>using</code> en C#? … me aventuraré a decir que muchas, y es que la palabra <code>using</code> tiene varios significados en el lenguaje. Previamente escribí sobre cómo se <a href=\"../creando-propios-alias\">usa para crear aliases</a>. En este post hablaré sobre otro de sus usos.</p>\n\n<p>En C#, también podemos emplear <code>using</code> para especificar un bloque de código asociado a una o varias instancias de una clase que implemente <code>IDisposable</code>, el hacer uso de estos bloques de código nos ayuda a manejar correctamente este tipo de objetos, ya que se encarga de llamar al método <code>Dispose</code> antes de terminar de ejecutar dicho bloque.</p>\n\n<p>La importancia de llamar al método <code>Dispose</code> en un objeto radica en que es dentro de ese método que se recomienda liberar todos los recursos que fueron empleados para su correcto funcionamiento, y olvidar ejecutar dicho método puede traducirse en problemas que causarán que nuestra aplicación se comporte incorrectamente.</p>\n\n<h3 id=\"ejemplo\">Ejemplo</h3>\n\n<p>Para poner un ejemplo, cree la clase <code>Desechable</code> que implementa <code>IDisposable</code>:</p>\n\n<pre class=\"csharp\">\npublic class Desechable : IDisposable\n\n    public Desechable()\n    \n        Console.WriteLine(\"Hello, Desechable.\");\n    \n    //...\n    public void Dispose()\n    \n        Console.WriteLine(\"Bye bye, Desechable.\");\n    \n\n</pre>\n\n<h3 id=\"simplificando-sintaxis\">Simplificando sintaxis</h3>\n\n<p>Una forma recomendada de usar la clase <code>Desechable</code> es la siguiente, ya que de ese modo nos aseguramos que se llame al método <code>Dispose</code> que, en teoría, se encargará de liberar los recursos asociados a la instancia:</p>\n\n<pre class=\"csharp\">\nvar desechable1 = new Desechable();\ntry\n\n    desechable1.DoSomething();\n\nfinally\n\n    if (desechable1 != null)\n    \n        ((IDisposable)desechable1).Dispose();\n    \n\n</pre>\n\n<p>Sin embargo, <code>using</code> hace más sencilla la sintaxis. Podemos reemplazar el código anterior por el siguiente, y nuestro programa segurá funcionando igual:</p>\n\n<pre class=\"csharp\">\nusing (var desechable1 = new Desechable())\n\n    desechable1.DoSomething();\n\n</pre>\n\n<p>Mucho más simple, ¿no?</p>\n\n<h3 id=\"manejo-de-errores\">Manejo de errores</h3>\n\n<p>A pesar de que a final de cuentas nuestro código quede envuelto en un bloque <em>try-finally</em>, no significa que este se “comerá” las excepciones que puedan ocurrir, es por eso que también podemos usar bloques <em>try-catch</em> dentro de un bloque <code>using</code>:</p>\n\n<pre class=\"csharp\">\nusing (var desechable2 = new Desechable())\n\n    try\n    \n        desechable2.DoSomethingWithException();\n    \n    catch\n    \n        Console.WriteLine(\"¡¡¡¡¡Error!!!!!\");\n    \n\n</pre>\n\n<h3 id=\"alcance\">Alcance</h3>\n<p>Al ser bloques de códigos envueltos por <code></code> todas las variables, incluyendo la instancia dentro de <code>using</code>, únicamente estarán disponibles dentro de sus respectivos bloques e intentar usarlas fuera de este provocará un error en tiempo de compilación.</p>\n\n<h3 id=\"agrupando-declaraciones\">Agrupando declaraciones</h3>\n<p>Hay ocasiones en las que es necesario instanciar la misma clase varias veces, para dichas ocasiones, <code>using</code> tiene esta sintaxis:</p>\n\n<pre class=\"csharp\">\nusing (Desechable d1 = new Desechable(),\n                d2 = new Desechable())\n // ...                \n</pre>\n\n<p>Es importante señalar que tanto <code>d1</code> como <code>d2</code> deben ser del mismo tipo. O, si son de distinto, también podemos agruparlas de la siguiente manera:</p>\n\n<pre class=\"csharp\">\nusing (FileStream homerStream = new FileStream(\"Homer.txt\", FileMode.Open))\nusing (Desechable d1 = new Desechable())\n // ...\n</pre>\n\n<h3 id=\"ejemplo-de-la-vida-real\">Ejemplo de la vida real</h3>\n\n<p>Más que ejemplos de <code>using</code> más bien existen muchas clases en el framework que implementan <code>IDisposable</code>, como el uso de <code>Socket</code>s, recursos de red, conexiones a servicios web y los fluhos de datos, como <code>FileStream</code>:</p>\n\n<pre class=\"csharp\">\nusing (FileStream homerStream = new FileStream(\"Homer.txt\", FileMode.Open))\n\n    read = homerStream.Read(buffer, current, buffer.Length);\n    while (read != 0)\n    \n        read = homerStream.Read(buffer, current, buffer.Length);\n        current += read;\n        Console.WriteLine(Encoding.UTF8.GetString(buffer));\n    \n\n</pre>\n\n<h3 id=\"no-se-recomienda-en-todos-los-casos\">No se recomienda en todos los casos</h3>\n\n<p>Hay ocasiones en las que emplear <code>using</code> puede traernos más problemas de los que resuelve, específicamente para <a href=\"https://msdn.microsoft.com/en-us/library/aa355056.aspx\" target=\"_blank\" rel=\"nofollow\">gestionar la conexión a un servicio WCF</a>, fuera de ahí no hay problemas conocidos. Esta información me sorprendió incluso a mi.</p>\n\n<h2 id=\"lo-que-sigue\">Lo que sigue</h2>\n<p>La palabra reservada que revisamos hoy tiene otro par de usos que estaré revisando más adelante en este blog, no olvides suscribirte para estar al tanto.</p>\n"
}