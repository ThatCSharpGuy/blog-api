{	
	"id" : "/post/usos-using-2/",
	"tv" : false,
	"date": "2016-07-18 14:00:01 -0500",
	"title" : "Uso de using",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/using-2.png",
	"tags" :
	["AprendeCSharp"],
	
	"content" : body"¿Cuántas veces has visto la palabra  `using` en C#? ... me aventuraré a decir que muchas, y es que la palabra `using` tiene varios significados en el lenguaje. Previamente escribí sobre cómo se <a href=\"../creando-propios-alias\">usa para crear aliases</a>. En este post hablaré sobre otro de sus usos.  \n\nEn C#, también podemos emplear `using` para especificar un bloque de código asociado a una o varias instancias de una clase que implemente `IDisposable`, el hacer uso de estos bloques de código nos ayuda a manejar correctamente este tipo de objetos, ya que se encarga de llamar al método `Dispose` antes de terminar de ejecutar dicho bloque.  \n\nLa importancia de llamar al método `Dispose` en un objeto radica en que es dentro de ese método que se recomienda liberar todos los recursos que fueron empleados para su correcto funcionamiento, y olvidar ejecutar dicho método puede traducirse en problemas que causarán que nuestra aplicación se comporte incorrectamente.\n\n### Ejemplo  \n\nPara poner un ejemplo, cree la clase `Desechable` que implementa `IDisposable`:\n\n{% highlight csharp %}\npublic class Desechable : IDisposable\n{\n    public Desechable()\n    {\n        Console.WriteLine(\"Hello, Desechable.\");\n    }\n    //...\n    public void Dispose()\n    {\n        Console.WriteLine(\"Bye bye, Desechable.\");\n    }\n}\n{% endhighlight %}  \n\n### Simplificando sintaxis\n\nUna forma recomendada de usar la clase `Desechable` es la siguiente, ya que de ese modo nos aseguramos que se llame al método `Dispose` que, en teoría, se encargará de liberar los recursos asociados a la instancia:  \n\n{% highlight csharp %}\nvar desechable1 = new Desechable();\ntry\n{\n    desechable1.DoSomething();\n}\nfinally\n{\n    if (desechable1 != null)\n    {\n        ((IDisposable)desechable1).Dispose();\n    }\n}\n{% endhighlight %}  \n\nSin embargo, `using` hace más sencilla la sintaxis. Podemos reemplazar el código anterior por el siguiente, y nuestro programa segurá funcionando igual:\n\n{% highlight csharp %}\nusing (var desechable1 = new Desechable())\n{\n    desechable1.DoSomething();\n}\n{% endhighlight %}  \n\nMucho más simple, ¿no?\n\n### Manejo de errores  \n\nA pesar de que a final de cuentas nuestro código quede envuelto en un bloque *try-finally*, no significa que este se \"comerá\" las excepciones que puedan ocurrir, es por eso que también podemos usar bloques *try-catch* dentro de un bloque `using`:  \n\n{% highlight csharp %}\nusing (var desechable2 = new Desechable())\n{\n    try\n    {\n        desechable2.DoSomethingWithException();\n    }\n    catch\n    {\n        Console.WriteLine(\"¡¡¡¡¡Error!!!!!\");\n    }\n}\n{% endhighlight %}  \n\n### Alcance \nAl ser bloques de códigos envueltos por `{` `}` todas las variables, incluyendo la instancia dentro de `using`, únicamente estarán disponibles dentro de sus respectivos bloques e intentar usarlas fuera de este provocará un error en tiempo de compilación. \n\n### Agrupando declaraciones  \nHay ocasiones en las que es necesario instanciar la misma clase varias veces, para dichas ocasiones, `using` tiene esta sintaxis:\n\n{% highlight csharp %}\nusing (Desechable d1 = new Desechable(),\n                d2 = new Desechable())\n{ // ...                \n{% endhighlight %}\n\nEs importante señalar que tanto `d1` como `d2` deben ser del mismo tipo. O, si son de distinto, también podemos agruparlas de la siguiente manera:  \n\n{% highlight csharp %}\nusing (FileStream homerStream = new FileStream(\"Homer.txt\", FileMode.Open))\nusing (Desechable d1 = new Desechable())\n{ // ...\n{% endhighlight %}    \n\n### Ejemplo de la vida real  \n\nMás que ejemplos de `using` más bien existen muchas clases en el framework que implementan `IDisposable`, como el uso de `Socket`s, recursos de red, conexiones a servicios web y los fluhos de datos, como `FileStream`:\n\n{% highlight csharp %}\nusing (FileStream homerStream = new FileStream(\"Homer.txt\", FileMode.Open))\n{\n    read = homerStream.Read(buffer, current, buffer.Length);\n    while (read != 0)\n    {\n        read = homerStream.Read(buffer, current, buffer.Length);\n        current += read;\n        Console.WriteLine(Encoding.UTF8.GetString(buffer));\n    }\n}\n{% endhighlight %}  \n\n### No se recomienda en todos los casos\n\nHay ocasiones en las que emplear `using` puede traernos más problemas de los que resuelve, específicamente para <a href=\"https://msdn.microsoft.com/en-us/library/aa355056.aspx\" target=\"_blank\" rel=\"nofollow\">gestionar la conexión a un servicio WCF</a>, fuera de ahí no hay problemas conocidos. Esta información me sorprendió incluso a mi. \n\n## Lo que sigue  \nLa palabra reservada que revisamos hoy tiene otro par de usos que estaré revisando más adelante en este blog, no olvides suscribirte para estar al tanto."
}