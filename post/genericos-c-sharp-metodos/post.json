{	
	"id" : "/post/genericos-c-sharp-metodos/",
	"tv" : false,
	"date": "2016-06-19 14:00:01 -0500",
	"title" : "Métodos genéricos en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/generics-es.png",
	"tags" : ["AprendeCSharp"],
	  
	"content": '"En un <a href=\"../genericos-c-sharp-clases\">post anterior</a> hablé sobre las clases genéricas en C#, ahí mencioné que había otra posibilidad de usar el mismo concepto (de plantillas y marcadores) pero en la creación de métodos, y este post habla sobre ellos.\n\n### Sintaxis\n\nLa sintaxis es casi la misma que al declarar un método tradicional, salvo que de nuevo aparecen los *placeholders* de tipos entre `<` `>`, por ejemplo, en el siguiente método se declara únicamente `T`:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nstatic</span> <span class="k">void</span> <span class="n">WriteType</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="kt">var</span> <span class="n">a</span> <span class="p">=</span> <span class="k">typeof</span><span class="p">(</span><span class="n">T</span><span class="p">);</span><span class="err">\</span><span class="n">n</span>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n### Uso\n\nEntonces, para llamarlo, tendremos que hacerlo de la siguiente manera:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nWriteType</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span> <span class="c1">// Int32\nWriteType&lt;Program&gt;(); // Program\n</span></code></pre></figure>  \n\nAl igual que con los tipos, una vez indicado el *placeholder* podemos utilizarlo tanto en la firma del método como en el cuerpo del mismo:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nstatic</span> <span class="n">T</span> <span class="n">GetDefault</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span> <span class="n">useless</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">return</span> <span class="k">default</span><span class="p">(</span><span class="n">T</span><span class="p">);</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nPara usarlos tenemos dos opciones:  \n  \n  1. Indicar explícitamente los tipos a la hora de realizar la llamada\n  2. Permitir que el compilador infiera a qué tipos nos referimos a partir de los argumentos pasados\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">dflt</span> <span class="p">=</span> <span class="n">GetDefault</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="m">10</span><span class="p">);</span><span class="err">\</span><span class="n">nvar</span> <span class="n">dflt2</span> <span class="p">=</span> <span class="n">GetDefault</span><span class="p">(</span><span class="m">4.0</span><span class="p">);</span> <span class="c1">// Se infiere que es double a partir del argumento pasado al método\n// int dflt3 = GetDefault(DateTime.Now); // Error, DateTime no se puede convertir a int implícitamente\n</span></code></pre></figure>  \n\n### Ejemplos  \n\nUno de los ejemplos más usados para explicar los métodos genéricos es un método que intercambia dos valores dados:\n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nstatic</span> <span class="k">void</span> <span class="n">Swap</span><span class="p">(</span><span class="k">ref</span> <span class="kt">decimal</span> <span class="n">a</span><span class="p">,</span> <span class="k">ref</span> <span class="kt">decimal</span> <span class="n">b</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="kt">decimal</span> <span class="n">t</span> <span class="p">=</span> <span class="n">a</span><span class="p">;</span><span class="err">\</span><span class="n">n</span>    <span class="n">a</span> <span class="p">=</span> <span class="n">b</span><span class="p">;</span><span class="err">\</span><span class="n">n</span>    <span class="n">b</span> <span class="p">=</span> <span class="n">t</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nstatic</span> <span class="k">void</span> <span class="n">Swap</span><span class="p">(</span><span class="k">ref</span> <span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="k">ref</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="kt">int</span> <span class="n">t</span> <span class="p">=</span> <span class="n">a</span><span class="p">;</span><span class="err">\</span><span class="n">n</span>    <span class="n">a</span> <span class="p">=</span> <span class="n">b</span><span class="p">;</span><span class="err">\</span><span class="n">n</span>    <span class="n">b</span> <span class="p">=</span> <span class="n">t</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n</div>  \n</div>\n\nHasta aquí todo bien, ya podemos intercambiar de lugar decimales y enteros, pero ¿qué va a pasar cuando tengamos que intercambiar `DateTime` o `doubles`? podríamos copiar y pegar el código del método cambiando únicamente los tipos de dato... o podríamos en su lugar usar un método genérico:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nstatic</span> <span class="k">void</span> <span class="n">Swap</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">ref</span> <span class="n">T</span> <span class="n">a</span><span class="p">,</span> <span class="k">ref</span> <span class="n">T</span> <span class="n">b</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="n">T</span> <span class="n">t</span> <span class="p">=</span> <span class="n">a</span><span class="p">;</span><span class="err">\</span><span class="n">n</span>    <span class="n">a</span> <span class="p">=</span> <span class="n">b</span><span class="p">;</span><span class="err">\</span><span class="n">n</span>    <span class="n">b</span> <span class="p">=</span> <span class="n">t</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nEntonces ya podríamos usar el método con cualquier tipo que deseemos:\n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nint</span> <span class="n">uno</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span> <span class="n">dos</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span><span class="err">\</span><span class="n">nConsole</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">uno</span> <span class="p">+</span> <span class="err">\</span><span class="s">&quot; \&quot; + dos);\n\nSwap&lt;int&gt;(ref uno, ref dos);\nConsole.WriteLine(uno + \&quot; \&quot; + dos);\n\nSwap(ref uno, ref dos); // Se infiere int\nConsole.WriteLine(uno + \&quot; \&quot; + dos);\n</span></code></pre></figure>  \n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nfloat</span> <span class="n">d1</span> <span class="p">=</span> <span class="m">10</span><span class="p">,</span> <span class="n">d2</span> <span class="p">=</span> <span class="m">20</span><span class="p">;</span><span class="err">\</span><span class="n">nConsole</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">d1</span> <span class="p">+</span> <span class="err">\</span><span class="s">&quot; \&quot; + d2);\n\nSwap(ref d1, ref d2); // Se infiere float\nConsole.WriteLine(d1 + \&quot; \&quot; + d2);  \n\n  \n  \n</span></code></pre></figure>  \n</div>  \n</div>  \n\n#### Errores\n\nCuando usamos métodos genéricos es posible incurrir en errores, los más comunes son que el compilador no pueda inferir los tipos a los que nos referimos, como en este caso que estamos usando `Swap` con un `int` y un `float`:   \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nSwap</span><span class="p">(</span><span class="n">uno</span><span class="p">,</span> <span class="n">d2</span><span class="p">);</span> <span class="c1">// Error, los tipos no pueden ser inferidos\n</span></code></pre></figure>  \n\nO que intentemos usar un tipo de dato que no corresponde si especificamos explícitamente los tipos:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nSwap</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="k">ref</span> <span class="n">uno</span><span class="p">,</span> <span class="k">ref</span> <span class="n">d2</span><span class="p">);</span> <span class="c1">// Error, d2 no es entero\n</span></code></pre></figure>  \n\n### Restricciones  \n\nAl igual que los tipos genéricos, los métodos también aceptan restricciones usando la palabra reservada `where`, por ejemplo, en el método siguiente se restringe que tanto el tipo `T` como `W` sean `Athlete` o derivados de este. Además de que `T` tenga un constructor público sin parámetros:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nstatic</span> <span class="n">T</span> <span class="n">ChangeSport</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">W</span><span class="p">&gt;(</span><span class="n">W</span> <span class="n">toCast</span><span class="p">)</span><span class="err">\</span><span class="n">n</span>    <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">Athlete</span><span class="p">,</span> <span class="k">new</span><span class="p">()</span><span class="err">\</span><span class="n">n</span>    <span class="k">where</span> <span class="n">W</span> <span class="p">:</span> <span class="n">Athlete</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="c1">// ...\n</span></code></pre></figure>  \n\n## Para cerrar  \n\nEs importante señalar que un método de un tipo genérico no es genérico simplemente por eso, para que un método genérico sea considerado así debe tener al menos un *placeholder* de tipo. También debes considerar que a veces no todo es suceptible de *genericalizar*, es cuestión de analizar bien el problema."'   
}