{	
	"id" : "/post/c-sharp-events/",
	"tv" : false,
	"date": "2016-08-22 14:00:01 -0500",
	"title" : "Events en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/events.png",
	"tags" :
	[ 
		"AprendeCSharp"
	],
	"content" : "<p>¿Recuerdas que en los primeros posts de este blog hablé sobre <a href=\"../delegados-en-c-sharp\">delegados en C#</a>? pues bien, hoy toca hablar de un pariente muy cercano a ellos: Los eventos o <code>events</code>.</p>

<p>El paso de mensajes entre objetos es uno de los pilares de la programación orientada a objetos, y un evento no es más que eso: un mensaje que se envía de un objeto (el emisor) a otros (los receptores) cada vez que se cumple cierta condición o un cambio ocurre en él.</p>

<p>Los receptores, por su cuenta, se suscriben a los eventos para ser informados cada vez que son <em>lanzados</em> desde el emisor y poder así manejarlos adecuadamente.</p>

<h3 id=\"declarando-eventos-en-el-emisor\">Declarando eventos en el emisor</h3>

<p>Para el código de ejemplo de este post cree una clase llamada <code>Generator</code>, que “genera” números aleatorios cada 0.5 segundos. Supongamos que queremos que la clase nos “avise” a través de un evento cada vez que esté a punto de generar un nuevo número. En C# declaramos eventos de la siguiente manera:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">delegate</span> <span class="k">void</span> <span class="nf">GeneratingNumberEventHandler</span><span class="p">(</span><span class="n">Generator</span> <span class="n">sender</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">event</span> <span class="n">GeneratingNumberEventHandler</span> <span class="n">GeneratingNumber</span><span class="p">;</span></code></pre></figure></p>

<p>En la primera línea de código puedes observar a un viejo conocido, los delegados, en este caso es un delegado que regresa valor alguno y recibe una instancia de <code>Generator</code> como parámetro. Este delegado será el molde para nuestros manejadores de evento.</p>

<p>En la segunda línea se realiza la declaración del evento, la cual se compone de:</p>

<ul>
  <li>El modificador de acceso (<code>public</code>, <code>internal</code>, …).</li>
  <li>La palabra reservada <code>event</code>.</li>
  <li>El tipo del delegado asociado con ese evento.</li>
  <li>El nombre del evento.</li>
</ul>

<h3 id=\"manejando-los-eventos-en-el-receptor\">Manejando los eventos en el receptor</h3>

<p>Para que un receptor esté al pendiente de algún evento en un objeto debe suscribirse a él. La suscripción a los eventos se ejecuta con el operador <code>+=</code> más el <strong>manejador de eventos</strong>, que no es más que un método que cumple con los requisitos del evento:</p>

<p>Por ejemplo, tenemos el siguiente método, que tiene <code>void</code> como valor de retorno y <code>Generator</code> como parámetro (y que por tanto puede ser usado como manjador para el evento declarado arriba):</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">static</span> <span class="k">void</span> <span class="nf">G_GeneratingNumber</span><span class="p">(</span><span class="n">Generator</span> <span class="n">sender</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">sender</span><span class="p">.</span><span class="n">Name</span> <span class="p">+</span> <span class="err">“</span> <span class="n">generará</span> <span class="n">un</span> <span class="n">número</span><span class="err">”</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>

<p>Para asignarlo como manejador, debemos usar el operador <code>+=</code>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">g</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Generator</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
<span class="n">g</span><span class="p">.</span><span class="n">GeneratingNumber</span> <span class="p">+=</span> <span class="n">G_GeneratingNumber</span><span class="p">;</span></code></pre></figure></p>

<h3 id=\"invocando-los-eventos-en-el-emisor\">Invocando los eventos en el emisor</h3>

<p>Así pues, dentro de nuestro método que genera los números podemos hacer algo como lo siguiente, justamente antes de que se genere un número:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">if</span> <span class="p">(</span><span class="n">GeneratingNumber</span><span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">GeneratingNumber</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">var</span> <span class="n">generated</span> <span class="p">=</span> <span class="n">r</span><span class="p">.</span><span class="n">Next</span><span class="p">();</span></code></pre></figure></p>

<p>Es importante que antes de invocar el evento compruebes que existe al menos un receptor (<code>GeneratingNumber!= null</code>) ya que de otro modo obtendrás una espantosa <code>NullReferenceException</code>.</p>

<p>Tras lo cual, si ejecutas el programa podrás ver algo como esto:</p>

<pre>
Locotrón generará un número  
Locotrón generará un número  
Locotrón generará un número  
</pre>

<h3 id=\"auxiliares-eventhandler-y--y-eventhandlert\">Auxiliares (EventHandler y  y EventHandler<t>)</t></h3>

<p>De nueva cuenta, y al igual que con <a href=\"../func-y-action-en-c-sharp\">Func y Action</a>, C# nos ofrece dos tipos auxiliares de delegado: <code>EventHandler</code> y <code>EventHandler&lt;T&gt;</code>, esto para no tener que definir delegados para cada evento en nuestro código.</p>

<h4 id=\"declaracin\">Declaración</h4>

<p>Para declararlo:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">event</span> <span class="n">EventHandler</span> <span class="n">GeneratingNumber1</span><span class="p">;</span></code></pre></figure></p>

<h4 id=\"manejo\">Manejo</h4>
<p>El delegado <code>EventHandler</code> indica que el método devuelve <code>void</code> y recibe una instancia de <code>object</code> y una de <code>EventArgs</code> como parámetros… sí, un poco complicado, pero tiene sus razones. De nuevo, mira a la forma de asignar un manejador, en esta ocasión estamos <a href=\"../lambdas-en-c-sharp\">usando una lambda</a>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">g</span><span class="p">.</span><span class="n">GeneratingNumber1</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> 
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">generador</span> <span class="p">=</span> <span class="n">sender</span> <span class="k">as</span> <span class="n">Generator</span><span class="p">;</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">generador</span><span class="p">.</span><span class="n">Name</span> <span class="p">+</span> <span class="err">“</span> <span class="n">generará</span> <span class="n">un</span> <span class="n">número</span> <span class="p">(</span><span class="n">EventHandler</span><span class="p">)</span><span class="err">”</span><span class="p">);</span>
<span class="p">};</span></code></pre></figure></p>

<p>Comúnmente el parámetro <code>sender</code> es una referencia al objeto que lanzó el evento, es por eso que se puede hacer el <em>cast</em> a <code>Generator</code> sin problema.</p>

<h4 id=\"invocacin\">Invocación</h4>
<p>La invocación no varía mucho, igual hay que checar que no sea nulo antes de llamar al <code>event</code>, solo que esta vez es necesario pasar dos argumentos:</p>

<ul>
  <li><code>this</code> que hace referencia a quién genera el evento, y</li>
  <li><code>EventArgs.Empty</code></li>
</ul>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">if</span> <span class="p">(</span><span class="n">GeneratingNumber1</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">GeneratingNumber1</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">EventArgs</span><span class="p">.</span><span class="n">Empty</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>

<h3 id=\"eventos-con-informacin-extra-eventhandlert\">Eventos con información extra (EventHandler<t>)</t></h3>

<p>Hay ocasiones en que los eventos por si mismos sean solo una parte de la información, por ejemplo: imagina que de nuestro generador de números aleatorios queremos saber cuándo se genera un número par, y saber cuál es el número par que se generó. Es ahí cuando podemos hacer uso de <code>EventHandler&lt;T&gt;</code>:</p>

<h4 id=\"declaracin-1\">Declaración</h4>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">event</span> <span class="n">EventHandler</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">EvenNumberGenerated</span><span class="p">;</span></code></pre></figure></int></p>

<h4 id=\"manejo-1\">Manejo</h4>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">g</span><span class="p">.</span><span class="n">EvenNumberGenerated</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">number</span><span class="p">)</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> 
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">Se</span> <span class="n">generó</span> <span class="n">el</span> <span class="n">número</span> <span class="n">par</span><span class="p">:</span> <span class="err">“</span> <span class="p">+</span> <span class="n">number</span> <span class="p">+</span> <span class="err">“</span> <span class="p">(</span><span class="n">manejador</span> <span class="m">1</span><span class="p">)</span><span class="err">”</span><span class="p">);</span>
<span class="p">};</span></code></pre></figure></p>

<h4 id=\"mltiples-manejadores\">Múltiples manejadores</h4>

<p>Hay ocasiones en que para un mismo evento existen muchos suscriptores. Para suscribir más de un manejador de evento basta con seguir utilizando el operador <code>+=</code></p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// Método para el manejador</span>
<span class="k">static</span> <span class="k">void</span> <span class="nf">G_EvenNumberGenerated</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="kt">int</span> <span class="n">number</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="err">“</span><span class="n">Se</span> <span class="n">generó</span> <span class="n">el</span> <span class="n">número</span> <span class="n">par</span><span class="err">”</span> <span class="p">+</span> <span class="n">number</span> <span class="p">+</span> <span class="err">“</span> <span class="p">(</span><span class="n">manejador</span> <span class="m">2</span><span class="p">)</span><span class="err">”</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">number</span> <span class="p">%</span> <span class="m">7</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="err">“</span> <span class="n">que</span> <span class="n">además</span> <span class="n">es</span> <span class="n">múltiplo</span> <span class="n">de</span> <span class="m">7</span><span class="p">,</span> <span class="n">bye</span> <span class="n">bye</span><span class="p">!</span><span class="err">”</span><span class="p">);</span>
        <span class="n">g</span><span class="p">.</span><span class="n">EvenNumberGenerated</span> <span class="p">-=</span> <span class="n">G_EvenNumberGenerated</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
<span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// Suscripción del manejador&lt;br /&gt;</span>
<span class="n">g</span><span class="p">.</span><span class="n">EvenNumberGenerated</span> <span class="p">+=</span> <span class="n">G_EvenNumberGenerated</span><span class="p">;&lt;</span><span class="n">br</span> <span class="p">/&gt;</span></code></pre></figure></p>

<h4 id=\"invocacin-1\">Invocación</h4>

<p>Ahora, para invocar un evento de este tipo es necesario usar como argumentos el objeto que lo provoca y el valor asociado con el evento:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">generated</span> <span class="p">=</span> <span class="n">r</span><span class="p">.</span><span class="n">Next</span><span class="p">();&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">if</span> <span class="p">(</span><span class="n">generated</span> <span class="p">%</span> <span class="m">2</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">EvenNumberGenerated</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">EvenNumberGenerated</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">generated</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="c1">// …</span></code></pre></figure></p>

<p>Tras lo cual, el resultado de ejecutar el programa es el siguiente:</p>

<pre>
Leña generará un número
Leña generará un número (EventHandler)
Se generó el número par: 1817673842 (manejador 1)
Se generó el número par1817673842 (manejador 2)
Leña generará un número
Leña generará un número (EventHandler)
Se generó el número par: 1464150850 (manejador 1)
Se generó el número par1464150850 (manejador 2)
</pre>

<h3 id=\"desuscribindose-de-eventos\">Desuscribiéndose de eventos</h3>

<p>Así como podemos suscribirnos a eventos, también es posible hacer lo contrario: desuscribirse de los eventos. Nos desuscribimos de un evento cuando no queremos seguir al tanto de su invocación.</p>

<p>Para desuscribimos usamos el operador <code>-=</code> junto con el manejador de evento con el que nos suscribimos:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">g</span><span class="p">.</span><span class="n">EvenNumberGenerated</span> <span class="p">-=</span> <span class="n">G_EvenNumberGenerated</span><span class="p">;</span></code></pre></figure></p>

<p>Si en tu código tendrás que desuscribir eventos, lo ideal es que los declares como métodos con nombre, no lambdas y no delegados, ya que es más natural <a href=\"http://stackoverflow.com/questions/183367/unsubscribe-anonymous-method-in-c-sharp\" target=\"_blank\">remover un manejador</a> que uno anónimo.</p>

<h3 id=\"por-qu-no-usar-un-delegado\">¿Por qué no usar un delegado?</h3>

<p>Una de las preguntas que te podrían surgir es ¿por qué no usar solamente un <code>delegate</code> en lugar de la sintaxis extra de los <code>event</code>?</p>

<p>La respuesta es un tanto sencilla, además del valor semántico que le da un evento a tu código, los eventos tienen dos características:</p>

<ul>
  <li>Solamente pueden ser invocados dentro del objeto al que pertenecen.</li>
  <li>Únicamente pueden ser eliminados (igualados a <code>null</code>) dentro del objeto al que pertenecen.</li>
</ul>

<p>O, en código:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// Dentro de la clase Generator</span>
<span class="k">public</span> <span class="n">Action</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">EvenNumberGeneratedAction</span><span class="p">;&lt;/</span><span class="kt">int</span><span class="p">&gt;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">//  Fuera de la clase Generator			</span>
<span class="c1">//g.EvenNumberGenerated(5); // No se puede ejecutar el evento desde “afuera”</span>
<span class="n">g</span><span class="p">.</span><span class="n">EvenNumberGeneratedAction</span><span class="p">(</span><span class="m">3</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">//g.EvenNumberGenerated = null; // No se puede “eliminar” a todos los manejadores desde fuera&lt;br /&gt;</span>
<span class="n">g</span><span class="p">.</span><span class="n">EvenNumberGeneratedAction</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span></code></pre></figure></p>

<h3 id=\"conclusin\">Conclusión</h3>

<p>Los eventos son de mucha importancia cuando se programan aplicaciones en C#, y más aún cuando se tiene que reaccionar a cambios en un objeto o cuando debemos estar al tanto de interacciones con los usuarios. Conocer qué es lo que tienen detrás y cómo es que se declaran, invocan y manejan debería estar en el repertorio de todo desarrollador en C#.</p>
"
}