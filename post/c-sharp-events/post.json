{	
	"id" : "/post/c-sharp-events/",
	"tv" : false,
	"date": "2016-08-22 14:00:01 -0500",
	"title" : "Events en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/events.png",
	"tags" : ["AprendeCSharp"],
	"content": "<p>¿Recuerdas que en los primeros posts de este blog hablé sobre <a href=\"../delegados-en-c-sharp\">delegados en C#</a>? pues bien, hoy toca hablar de un pariente muy cercano a ellos: Los eventos o <code>events</code>.</p>\n\n<p>El paso de mensajes entre objetos es uno de los pilares de la programación orientada a objetos, y un evento no es más que eso: un mensaje que se envía de un objeto (el emisor) a otros (los receptores) cada vez que se cumple cierta condición o un cambio ocurre en él.</p>\n\n<p>Los receptores, por su cuenta, se suscriben a los eventos para ser informados cada vez que son <em>lanzados</em> desde el emisor y poder así manejarlos adecuadamente.</p>\n\n<h3 id=\"declarando-eventos-en-el-emisor\">Declarando eventos en el emisor</h3>\n\n<p>Para el código de ejemplo de este post cree una clase llamada <code>Generator</code>, que “genera” números aleatorios cada 0.5 segundos. Supongamos que queremos que la clase nos “avise” a través de un evento cada vez que esté a punto de generar un nuevo número. En C# declaramos eventos de la siguiente manera:</p>\n\n<pre class=\"csharp\">\npublic delegate void GeneratingNumberEventHandler(Generator sender);\n\npublic event GeneratingNumberEventHandler GeneratingNumber;\n</pre>\n\n<p>En la primera línea de código puedes observar a un viejo conocido, los delegados, en este caso es un delegado que regresa valor alguno y recibe una instancia de <code>Generator</code> como parámetro. Este delegado será el molde para nuestros manejadores de evento.</p>\n\n<p>En la segunda línea se realiza la declaración del evento, la cual se compone de:</p>\n\n<ul>\n  <li>El modificador de acceso (<code>public</code>, <code>internal</code>, …).</li>\n  <li>La palabra reservada <code>event</code>.</li>\n  <li>El tipo del delegado asociado con ese evento.</li>\n  <li>El nombre del evento.</li>\n</ul>\n\n<h3 id=\"manejando-los-eventos-en-el-receptor\">Manejando los eventos en el receptor</h3>\n\n<p>Para que un receptor esté al pendiente de algún evento en un objeto debe suscribirse a él. La suscripción a los eventos se ejecuta con el operador <code>+=</code> más el <strong>manejador de eventos</strong>, que no es más que un método que cumple con los requisitos del evento:</p>\n\n<p>Por ejemplo, tenemos el siguiente método, que tiene <code>void</code> como valor de retorno y <code>Generator</code> como parámetro (y que por tanto puede ser usado como manjador para el evento declarado arriba):</p>\n\n<pre class=\"csharp\">\nstatic void G_GeneratingNumber(Generator sender)\n\n    Console.WriteLine(sender.Name + \" generará un número\");\n\n</pre>\n\n<p>Para asignarlo como manejador, debemos usar el operador <code>+=</code>:</p>\n\n<pre class=\"csharp\">\ng = new Generator(name);\ng.GeneratingNumber += G_GeneratingNumber;\n</pre>\n\n<h3 id=\"invocando-los-eventos-en-el-emisor\">Invocando los eventos en el emisor</h3>\n\n<p>Así pues, dentro de nuestro método que genera los números podemos hacer algo como lo siguiente, justamente antes de que se genere un número:</p>\n\n<pre class=\"csharp\">\nif (GeneratingNumber!= null)\n\n    GeneratingNumber(this);\n\nvar generated = r.Next();\n</pre>\n\n<p>Es importante que antes de invocar el evento compruebes que existe al menos un receptor (<code>GeneratingNumber!= null</code>) ya que de otro modo obtendrás una espantosa <code>NullReferenceException</code>.</p>\n\n<p>Tras lo cual, si ejecutas el programa podrás ver algo como esto:</p>\n\n<pre>\nLocotrón generará un número  \nLocotrón generará un número  \nLocotrón generará un número  \n</pre>\n\n<h3 id=\"auxiliares-eventhandler-y--y-eventhandlert\">Auxiliares (EventHandler y  y EventHandler<t>)</t></h3>\n\n<p>De nueva cuenta, y al igual que con <a href=\"../func-y-action-en-c-sharp\">Func y Action</a>, C# nos ofrece dos tipos auxiliares de delegado: <code>EventHandler</code> y <code>EventHandler&lt;T&gt;</code>, esto para no tener que definir delegados para cada evento en nuestro código.</p>\n\n<h4 id=\"declaracin\">Declaración</h4>\n\n<p>Para declararlo:</p>\n\n<pre class=\"csharp\">\npublic event EventHandler GeneratingNumber1;\n</pre>\n\n<h4 id=\"manejo\">Manejo</h4>\n<p>El delegado <code>EventHandler</code> indica que el método devuelve <code>void</code> y recibe una instancia de <code>object</code> y una de <code>EventArgs</code> como parámetros… sí, un poco complicado, pero tiene sus razones. De nuevo, mira a la forma de asignar un manejador, en esta ocasión estamos <a href=\"../lambdas-en-c-sharp\">usando una lambda</a>:</p>\n\n<pre class=\"csharp\">\ng.GeneratingNumber1 += (sender, e) =&gt; \n\n    var generador = sender as Generator;\n    Console.WriteLine(generador.Name + \" generará un número (EventHandler)\");\n;\n</pre>\n\n<p>Comúnmente el parámetro <code>sender</code> es una referencia al objeto que lanzó el evento, es por eso que se puede hacer el <em>cast</em> a <code>Generator</code> sin problema.</p>\n\n<h4 id=\"invocacin\">Invocación</h4>\n<p>La invocación no varía mucho, igual hay que checar que no sea nulo antes de llamar al <code>event</code>, solo que esta vez es necesario pasar dos argumentos:</p>\n\n<ul>\n  <li><code>this</code> que hace referencia a quién genera el evento, y</li>\n  <li><code>EventArgs.Empty</code></li>\n</ul>\n\n<pre class=\"csharp\">\nif (GeneratingNumber1 != null)\n\n    GeneratingNumber1(this, EventArgs.Empty);\n\n</pre>\n\n<h3 id=\"eventos-con-informacin-extra-eventhandlert\">Eventos con información extra (EventHandler<t>)</t></h3>\n\n<p>Hay ocasiones en que los eventos por si mismos sean solo una parte de la información, por ejemplo: imagina que de nuestro generador de números aleatorios queremos saber cuándo se genera un número par, y saber cuál es el número par que se generó. Es ahí cuando podemos hacer uso de <code>EventHandler&lt;T&gt;</code>:</p>\n\n<h4 id=\"declaracin-1\">Declaración</h4>\n\n<pre class=\"csharp\">\npublic event EventHandler<int> EvenNumberGenerated;\n  \n\n#### Manejo  \n\n<pre class=\"csharp\">\ng.EvenNumberGenerated += (sender, number) =&gt; \n\n    Console.WriteLine(\"Se generó el número par: \" + number + \" (manejador 1)\");\n;\n</pre>  \n\n#### Múltiples manejadores  \n\nHay ocasiones en que para un mismo evento existen muchos suscriptores. Para suscribir más de un manejador de evento basta con seguir utilizando el operador `+=`\n\n<pre class=\"csharp\">\n// Método para el manejador\nstatic void G_EvenNumberGenerated(object sender, int number)\n\n    Console.Write(\"Se generó el número par\" + number + \" (manejador 2)\");\n    if (number  7 == 0)\n    \n        Console.Write(\" que además es múltiplo de 7, bye bye!\");\n        g.EvenNumberGenerated -= G_EvenNumberGenerated;\n    \n    Console.WriteLine();\n\n\n// Suscripción del manejador  \ng.EvenNumberGenerated += G_EvenNumberGenerated;  \n</pre>    \n\n#### Invocación  \n\nAhora, para invocar un evento de este tipo es necesario usar como argumentos el objeto que lo provoca y el valor asociado con el evento:   \n\n<pre class=\"csharp\">\nvar generated = r.Next();\n\nif (generated  2 == 0)\n\n    if (EvenNumberGenerated != null)\n    \n        EvenNumberGenerated(this, generated);\n    \n    // ...\n</pre>  \n\nTras lo cual, el resultado de ejecutar el programa es el siguiente:  \n\n<pre>\nLeña generará un número\nLeña generará un número (EventHandler)\nSe generó el número par: 1817673842 (manejador 1)\nSe generó el número par1817673842 (manejador 2)\nLeña generará un número\nLeña generará un número (EventHandler)\nSe generó el número par: 1464150850 (manejador 1)\nSe generó el número par1464150850 (manejador 2)\n</pre>\n\n### Desuscribiéndose de eventos  \n\nAsí como podemos suscribirnos a eventos, también es posible hacer lo contrario: desuscribirse de los eventos. Nos desuscribimos de un evento cuando no queremos seguir al tanto de su invocación.  \n\nPara desuscribimos usamos el operador `-=` junto con el manejador de evento con el que nos suscribimos:  \n\n<pre class=\"csharp\">\ng.EvenNumberGenerated -= G_EvenNumberGenerated;\n</pre>  \n\nSi en tu código tendrás que desuscribir eventos, lo ideal es que los declares como métodos con nombre, no lambdas y no delegados, ya que es más natural <a href=\"http://stackoverflow.com/questions/183367/unsubscribe-anonymous-method-in-c-sharp\" target=\"_blank\">remover un manejador</a> que uno anónimo.  \n  \n### ¿Por qué no usar un delegado?  \n\nUna de las preguntas que te podrían surgir es ¿por qué no usar solamente un `delegate` en lugar de la sintaxis extra de los `event`?\n\nLa respuesta es un tanto sencilla, además del valor semántico que le da un evento a tu código, los eventos tienen dos características:  \n\n - Solamente pueden ser invocados dentro del objeto al que pertenecen.    \n - Únicamente pueden ser eliminados (igualados a `null`) dentro del objeto al que pertenecen.  \n\n O, en código:\n\n<pre class=\"csharp\">\n// Dentro de la clase Generator\npublic Action<int> EvenNumberGeneratedAction;\n\n//  Fuera de la clase Generator\t\t\t\n//g.EvenNumberGenerated(5); // No se puede ejecutar el evento desde \"afuera\"\ng.EvenNumberGeneratedAction(3);\n\n//g.EvenNumberGenerated = null; // No se puede \"eliminar\" a todos los manejadores desde fuera  \ng.EvenNumberGeneratedAction = null;\n  \n\n### Conclusión  \n\nLos eventos son de mucha importancia cuando se programan aplicaciones en C#, y más aún cuando se tiene que reaccionar a cambios en un objeto o cuando debemos estar al tanto de interacciones con los usuarios. Conocer qué es lo que tienen detrás y cómo es que se declaran, invocan y manejan debería estar en el repertorio de todo desarrollador en C#. \n</int></pre></int></pre>\n"
}