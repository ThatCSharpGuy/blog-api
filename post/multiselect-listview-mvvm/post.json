{	
	"id" : "/post/multiselect-listview-mvvm/",
	"tv" : false,
	"date": "2016-03-23 02:00:00 -0600",
	"title" : "Multi-select ListView y MVVM",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//xamarin-forms/multiselect-featured.png",
	"tags" :
	[ 
		"XamarinForms",
		"Xamarin"
	],
	"content" : "<p>Por fin he vuelto a desarrollar algo con Xamarin.Forms y parte de lo que he tenido que hacer tuvo que ver con implementar una lista que permitiera la selección múltiple de filas y fuera compatible con el patrón MVVM.</p>

<p>Investigando un poco encontré que el control <code>ListView</code>, que es el más usado para mostrar datos en forma de lista, no permite la selección múltiple y que habría que hacerlo de otra manera. Dentro de la documentación de Xamarin también <a href=\"https://developer.xamarin.com/recipes/cross-platform/xamarin-forms/controls/multiselect/\" target=\"_blank\" rel=\"nofollow\">este artículo</a> en el que explica una forma de hacerlo y en ese está basado este post.</p>

<p>Para llevar a cabo la tarea, debemos tomar en cuenta que necesitaremos de algunas clases auxiliares que explicaré a detalle más adelante.</p>

<h3 id=\"el-modelo\">El modelo</h3>
<p>Para este ejemplo vamos a mostrar una lista de Pokemons y permitiremos al usuario seleccionar varios de ellos a través de una lista, la clase de nuestro modelo es la siguiente:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Pokemon</span> 
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">double</span> <span class="n">Weight</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">double</span> <span class="n">Height</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure></p>

<h3 id=\"selectableitemwrapperlttgt\">SelectableItemWrapper&lt;T&gt;</h3>
<p>Adicionalmente al modelo, también es necesario esta clase auxiliar que como el nombre lo indica, es una envoltura para nuestro modelo, la definición es la siguiente:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">SelectableItemWrapper</span><span class="p">&lt;</span><span class="n">t</span><span class="p">&gt;</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsSelected</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">T</span> <span class="n">Item</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure></t></p>

<p>La propiedad <code>IsSelected</code> servirá para determinar si el usuario seleccionó el ítem o no, mientras que <code>Item</code> contendrá el modelo.</p>

<h2 id=\"la-vista\">La vista</h2>
<p>(If you prefer to work with XAML, <a href=\"//thatcsharpguy.com/post/multiselect-listview-mvvm-en\">see this post</a>)</p>

<p>Usaremos dos páginas de Forms, una donde mostraremos todos los Pokemon y otra donde se mostrarán únicamente los que el usuario eligió.</p>

<p>Para la primera, donde estarán todos los Pokemon, debemos modificar un poco la forma en la que estamos acostumbrados a crear los templates para las celdas de la lista, y es que necesitamos tomar en cuenta que cada fila de la lista estará ligado a un <code>SelectableItemWrapper&lt;Pokemon&gt;</code> y no a un <code>Pokemon</code>.</p>

<p>Declararemos la lista y pondremos la colección <code>Pokemons</code>, definida más adelante en el ViewModel, como la fuente de ítems:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ListView</span><span class="p">();</span>
<span class="n">list</span><span class="p">.</span><span class="n">SetBinding</span><span class="p">(</span><span class="n">ListView</span><span class="p">.</span><span class="n">ItemsSourceProperty</span><span class="p">,</span> <span class="err">“</span><span class="n">Pokemons</span><span class="err">”</span><span class="p">);</span></code></pre></figure></p>

<p>Como sabemos, ahora cada uno de los elementos de la colección será una celda en la lista.</p>

<h4 id=\"pokemonselectablecell\">PokemonSelectableCell</h4>
<p>Para esta celda es necesario que se muestre el nombre, el peso y la altura, además de un control para permitir que dicho pokemon sea seleccionable, es por eso que se crean las propiedades <em>bindeables</em> necesarias.</p>

<p>Es por eso que se crean tres etiquetas para mostrar la información y en este caso se hará uso de <code>Switch</code>, que llamaremos <code>sw</code>, para marcar la selección de cada uno (intenté usar el <a href=\"https://github.com/XLabs/Xamarin-Forms-Labs/wiki/Checkbox-Control\" target=\"_blank\" rel=\"nofollow\">CheckBox de XLabs</a>, pero encontré un pequeño bug con las listas).</p>

<p>Tu puedes diseñar tu celda como quieras, pero es importante que dentro de ella <em>bindees</em> o ligues una propiedad booleana, como <code>IsToggled</code> o <code>Checked</code>, a la propiedad <code>IsSelected</code> de la clase <code>SelectableItemWrapper</code>. Bastará con una línea así:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// Important:</span>
<span class="n">sw</span><span class="p">.</span><span class="n">SetBinding</span><span class="p">(</span><span class="n">Switch</span><span class="p">.</span><span class="n">IsToggledProperty</span><span class="p">,</span> <span class="err">“</span><span class="n">IsSelected</span><span class="err">”</span><span class="p">);</span></code></pre></figure></p>

<p>Es importante señalar que dicho <em>binding</em> está definido en la implementación de la celda y no en el código de la vista.</p>

<h3 id=\"volviendo-a-la-vista\">Volviendo a la vista</h3>
<p>Ya de vuelta en la vista, podemos hacer uso de la celda en nuestra <code>ListView</code>, podemos definir los otros <em>bindings</em>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">template</span> <span class="p">=</span> <span class="k">new</span> <span class="n">DataTemplate</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">PokemonSelectableCell</span><span class="p">));</span>
<span class="n">template</span><span class="p">.</span><span class="n">SetBinding</span><span class="p">(</span><span class="n">PokemonSelectableCell</span><span class="p">.</span><span class="n">NameProperty</span><span class="p">,</span> <span class="err">“</span><span class="n">Item</span><span class="p">.</span><span class="n">Name</span><span class="err">”</span><span class="p">);</span>
<span class="n">template</span><span class="p">.</span><span class="n">SetBinding</span><span class="p">(</span><span class="n">PokemonSelectableCell</span><span class="p">.</span><span class="n">WeightProperty</span><span class="p">,</span> <span class="err">“</span><span class="n">Item</span><span class="p">.</span><span class="n">Weight</span><span class="err">”</span><span class="p">);</span>
<span class="n">template</span><span class="p">.</span><span class="n">SetBinding</span><span class="p">(</span><span class="n">PokemonSelectableCell</span><span class="p">.</span><span class="n">HeightProperty</span><span class="p">,</span> <span class="err">“</span><span class="n">Item</span><span class="p">.</span><span class="n">Height</span><span class="err">”</span><span class="p">);</span>
<span class="n">list</span><span class="p">.</span><span class="n">ItemTemplate</span> <span class="p">=</span> <span class="n">template</span><span class="p">;</span></code></pre></figure></p>

<p>Podrás notar que la ruta del <em>binding</em> no es “directa”, si no que primero nos estamos refiriendo a la propiedad <code>Item</code> y luego a las propiedades “reales” y esto es porque estamos <em>bindeando</em> un <code>SelectableItemWrapper&lt;Pokemon&gt;</code> y no una instancia de <code>Pokemon</code>.</p>

<h3 id=\"el-viewmodel\">El ViewModel</h3>
<p>Para el ViewModel requeriremos dos colecciones:</p>

<ul>
  <li>Una para contener una lista de todos los elementos</li>
  <li>Una para contener los elementos seleccionados</li>
</ul>

<p>Sus definiciones son las siguientes:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="n">ObservableCollection</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">SelectableItemWrapper</span><span class="p">&lt;</span><span class="n">pokemon</span><span class="p">&gt;&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">_pokemons</span><span class="p">;</span>
<span class="k">public</span> <span class="n">ObservableCollection</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">SelectableItemWrapper</span><span class="p">&lt;</span><span class="n">pokemon</span><span class="p">&gt;&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">Pokemons</span>
<span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_pokemons</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span> <span class="n">_pokemons</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">RaisePropertyChanged</span><span class="p">();</span> <span class="p">}</span>
<span class="p">}&lt;/</span><span class="n">pokemon</span><span class="p">&gt;&lt;/</span><span class="n">pokemon</span><span class="p">&gt;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">private</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="n">pokemon</span><span class="p">&gt;</span> <span class="n">_selectedPokemons</span><span class="p">;</span>
<span class="k">public</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="n">pokemon</span><span class="p">&gt;</span> <span class="n">SelectedPokemons</span>
<span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_selectedPokemons</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">private</span> <span class="k">set</span> <span class="p">{</span> <span class="n">_selectedPokemons</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">RaisePropertyChanged</span><span class="p">();</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure></pokemon></pokemon></p>

<p>La primera, <code>Pokemons</code> es una <code>ObservableCollection</code> de <code>SelectableItemWrapper</code> de <code>Pokemon</code> ya que es la contiene los elementos que serán seleccionables. Mientras que la segunda es una colección como cualquier otra.</p>

<p>Entonces, en el ViewModel podemos obtener todos los elementos seleccionados usando Linq:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="n">pokemon</span><span class="p">&gt;</span> <span class="n">GetSelectedPokemons</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">selected</span> <span class="p">=</span> <span class="n">Pokemons</span>
        <span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">p</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">p</span><span class="p">.</span><span class="n">IsSelected</span><span class="p">)</span>
        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">p</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">p</span><span class="p">.</span><span class="n">Item</span><span class="p">)</span>
        <span class="p">.</span><span class="n">ToList</span><span class="p">();</span>   
    <span class="k">return</span> <span class="k">new</span> <span class="n">ObservableCollection</span><span class="p">&lt;</span><span class="n">pokemon</span><span class="p">&gt;(</span><span class="n">selected</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></pokemon></pokemon></p>

<p>Marcar o desmarcar todos los elementos como seleccionados:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">void</span> <span class="nf">SelectAll</span><span class="p">(</span><span class="kt">bool</span> <span class="k">select</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">p</span> <span class="k">in</span> <span class="n">Pokemons</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">p</span><span class="p">.</span><span class="n">IsSelected</span> <span class="p">=</span> <span class="k">select</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure></p>

<p>Y todo, desde el ViewModel. Recuerda, puedes <a href=\"https://github.com/ThatCSharpGuy/MultiPokeList\" target=\"_blank\">ver el código fuente</a>. Y también puedes ver un ejemplo de la app terminada:</p>

<p><img src=\"http://i.giphy.com/qpfRFj3MrFqow.gif\" title=\"Multi-select ListView y MVVM\" /></p>

<h4 id=\"crditos\">Créditos</h4>
<p>La clase <code>SelectMultipleBasePage&lt;T&gt;</code> en la que está completamente basada la información de este post, fue escrita por Glenn Stephens de la  Xamarin University, <a href=\"https://developer.xamarin.com/recipes/cross-platform/xamarin-forms/controls/multiselect/\" target=\"_blank\" rel=\"nofollow\">mira el post original</a>.</p>
"
}