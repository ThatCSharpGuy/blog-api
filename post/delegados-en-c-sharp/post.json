{	
	"id" : "/post/delegados-en-c-sharp/",
	"tv" : false,
	"date": "2015-07-24 05:00:00 -0500",
	"title" : "Delegados en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimagesfeatured.png",
	"tags" :
	[ 
		"AprendeCSharp"
	],
	"content" : "<p>Para comenzar la explicación debemos comprender qué es un delegado. Podemos ver un delegado en C# como un tipo de dato que apunta a un método permitiéndonos así extender las capacidades de nuestro código o permitir que otros lo hagan. La forma de declarar un delegado es de la siguiente manera: <code>&lt;modificador de acceso&gt; delegate &lt;tipo de retorno&gt; &lt;nombre del delegado&gt; (&lt;lista de parámetros&gt;)</code>. Podríamos, por ejemplo, tener un delegado que realice una operación con dos números enteros y devuelva un solo número entero. La defnición de este sería algo como:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">delegate</span> <span class="kt">int</span> <span class="nf">Operacion</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">);</span></code></pre></figure></p>

<p>En ella, identificamos las partes:<br />
 - <strong>public</strong>, el modificador de acceso<br />
 - <strong>delegate</strong> la palabra clave para indicar que se trata de un delegado<br />
 - <strong>int</strong>, el tipo de retorno<br />
 - <strong>Operacion</strong>, el nombre del delegado<br />
 - <strong>int a</strong> e <strong>int b</strong>, los parámetros de entrada</p>

<h4 id=\"instanciacin\">Instanciación</h4>
<p>Ahora la parte interesante, porque seguramente te preguntas: ¿cómo instancío un delegado? y ¿cómo defino el comportamiento de un delegado? Como mencioné arriba, el delegado es en cierta manera un apuntador a un método, luego entonces supongamos que tenemos varios métodos que comparten el mismo tipo de retorno y lista de parámetros que nuestro delegado. Para el ejemplo, tomemos los siguientes métodos:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"> 
<span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">Suma</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> 
<span class="p">{</span>
	<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="err">“</span><span class="n">Ejecutando</span> <span class="n">Suma</span><span class="err">”</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">a</span> <span class="p">+</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Resta</span><span class="p">(</span><span class="kt">int</span> <span class="n">r</span><span class="p">,</span> <span class="kt">int</span> <span class="n">t</span><span class="p">)</span> 
<span class="p">{</span>
	<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="err">“</span><span class="n">Ejecutando</span> <span class="n">Resta</span><span class="err">”</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">r</span> <span class="p">-</span> <span class="n">t</span><span class="p">;</span>
<span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Multiplicacion</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> 
<span class="p">{</span>
	<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="err">“</span><span class="n">Ejecutando</span> <span class="n">Multiplicacion</span><span class="err">”</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">x</span> <span class="p">*</span> <span class="n">y</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure></p>

<p>Podemos ver que no importa el nombre del método ni de el de los parámetros que recibe. A partir de ellos se puede instanciar los delegados, para ello debemos utilizar el operador <code>new</code> seguido del nombre de nuestro delegado y como parámetro el método al que este “apunta”. Para muestra:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">Operacion</span> <span class="n">mas</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Operacion</span><span class="p">(</span><span class="n">Suma</span><span class="p">);</span>
	<span class="n">Operacion</span> <span class="n">menos</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Operacion</span> <span class="p">(</span><span class="n">Resta</span><span class="p">);</span>
	<span class="n">Operacion</span> <span class="n">por</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Operacion</span> <span class="p">(</span><span class="n">Multiplicacion</span><span class="p">);</span></code></pre></figure></p>

<h4 id=\"ejecucin\">Ejecución</h4>
<p>Para ejecutarlo basta con llamarlo como habitualmente llamaríamos al método al que hace referencia, es decir, el nombre asignado a la “variable” del tipo delegado y entre paréntesis la lista de parámetros, para este ejemplo los usaríamos de esta manera:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp">	<span class="c1">// </span>
	<span class="kt">int</span> <span class="n">r1</span> <span class="p">=</span> <span class="n">mas</span><span class="p">(</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">);</span> <span class="c1">// r1 es igual a 9</span>
	<span class="kt">int</span> <span class="n">r2</span> <span class="p">=</span> <span class="n">menos</span><span class="p">(</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">);</span> <span class="c1">// r2 es igual a -1</span>
	<span class="kt">int</span> <span class="n">r3</span> <span class="p">=</span> <span class="n">por</span><span class="p">(</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">);</span> <span class="c1">// r3 es igual a 20</span>
	<span class="c1">//</span></code></pre></figure></p>

<h4 id=\"combinacin\">Combinación</h4>
<p>Otra función útil de los delegados es la posiblidad de combinarlos, lo cual se realiza mediante el operador <code>+=</code>. Es confuso decir combinarlos, dado que la combinación es en realidad un tipo de encolamiento, haciéndo que se ejecute uno tras de otro, pero de manera independiente.</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp">	<span class="c1">// </span>
	<span class="n">Operacion</span> <span class="n">combinado</span> <span class="p">=</span> <span class="n">mas</span><span class="p">;</span>
	<span class="n">combinado</span> <span class="p">+=</span> <span class="n">por</span><span class="p">;</span> <span class="c1">// combinación con el operador +=&lt;/p&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="kt">int</span> <span class="n">r4</span> <span class="p">=</span> <span class="n">combinado</span><span class="p">(</span><span class="m">4</span><span class="p">,</span><span class="m">5</span><span class="p">);</span> <span class="c1">// r4 es igual a 20 } </span></code></pre></figure>  
</code></pre>

<p>De ejecutarse el código anterior, en la consola se vería el texto: “Ejecutando Suma” seguido de “Ejecutando Multiplicacion” ya que ambos se ejecutan y el valor de <code>r4</code> es <code>20</code> porque siempre se respeta el valor devuelto por el último delegado ejecutado.</p>

<h4 id=\"pasos-siguientes\">Pasos siguientes</h4>
<p>C# nos otorga plantillas para crear delegados con una serie personalizable de parámetros de entrada y de salida, a estos se les conoce como <code>Func</code> y <code>Action</code>, pero de ellos les hablaré en el siguiente post. Recuerda que el código de este post está disponible para que lo descargues, lo edites y juegues con él, búscalo en la <a href=\"#post-meta\">información del post</a></p>
"
}