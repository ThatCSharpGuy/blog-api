{	
	"id" : "/post/delegados-en-c-sharp/",
	"tv" : false,
	"date": "2015-07-24 05:00:00 -0500",
	"title" : "Delegados en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages/delegados-en-c-sharp/featured.png",
	"tags" : ["AprendeCSharp"],
	"content": "<p>Para comenzar la explicación debemos comprender qué es un delegado. Podemos ver un delegado en C# como un tipo de dato que apunta a un método permitiéndonos así extender las capacidades de nuestro código o permitir que otros lo hagan. La forma de declarar un delegado es de la siguiente manera: <code>&lt;modificador de acceso&gt; delegate &lt;tipo de retorno&gt; &lt;nombre del delegado&gt; (&lt;lista de parámetros&gt;)</code>. Podríamos, por ejemplo, tener un delegado que realice una operación con dos números enteros y devuelva un solo número entero. La defnición de este sería algo como:</p>\n\n<pre class=\"csharp\">\npublic delegate int Operacion(int a, int b);\n</pre>\n\n<p>En ella, identificamos las partes:<br />\n - <strong>public</strong>, el modificador de acceso<br />\n - <strong>delegate</strong> la palabra clave para indicar que se trata de un delegado<br />\n - <strong>int</strong>, el tipo de retorno<br />\n - <strong>Operacion</strong>, el nombre del delegado<br />\n - <strong>int a</strong> e <strong>int b</strong>, los parámetros de entrada</p>\n\n<h4 id=\"instanciacin\">Instanciación</h4>\n<p>Ahora la parte interesante, porque seguramente te preguntas: ¿cómo instancío un delegado? y ¿cómo defino el comportamiento de un delegado? Como mencioné arriba, el delegado es en cierta manera un apuntador a un método, luego entonces supongamos que tenemos varios métodos que comparten el mismo tipo de retorno y lista de parámetros que nuestro delegado. Para el ejemplo, tomemos los siguientes métodos:</p>\n\n<pre class=\"csharp\"> \npublic static int Suma(int a, int b) \n\n\tConsole.WriteLine (\"Ejecutando Suma\");\n\treturn a + b;\n\n \npublic static int Resta(int r, int t) \n\n\tConsole.WriteLine (\"Ejecutando Resta\");\n\treturn r - t;\n\n \npublic static int Multiplicacion(int x, int y) \n\n\tConsole.WriteLine (\"Ejecutando Multiplicacion\");\n\treturn x * y;\n\n</pre>\n\n<p>Podemos ver que no importa el nombre del método ni de el de los parámetros que recibe. A partir de ellos se puede instanciar los delegados, para ello debemos utilizar el operador <code>new</code> seguido del nombre de nuestro delegado y como parámetro el método al que este “apunta”. Para muestra:</p>\n\n<pre class=\"csharp\">\npublic static void Main()\n\n\tOperacion mas = new Operacion(Suma);\n\tOperacion menos = new Operacion (Resta);\n\tOperacion por = new Operacion (Multiplicacion);\n</pre>\n\n<h4 id=\"ejecucin\">Ejecución</h4>\n<p>Para ejecutarlo basta con llamarlo como habitualmente llamaríamos al método al que hace referencia, es decir, el nombre asignado a la “variable” del tipo delegado y entre paréntesis la lista de parámetros, para este ejemplo los usaríamos de esta manera:</p>\n\n<pre class=\"csharp\">\n\t// \n\tint r1 = mas(4,5); // r1 es igual a 9\n\tint r2 = menos(4,5); // r2 es igual a -1\n\tint r3 = por(4,5); // r3 es igual a 20\n\t//\n</pre>\n\n<h4 id=\"combinacin\">Combinación</h4>\n<p>Otra función útil de los delegados es la posiblidad de combinarlos, lo cual se realiza mediante el operador <code>+=</code>. Es confuso decir combinarlos, dado que la combinación es en realidad un tipo de encolamiento, haciéndo que se ejecute uno tras de otro, pero de manera independiente.</p>\n\n<pre class=\"csharp\">\n\t// \n\tOperacion combinado = mas;\n\tcombinado += por; // combinación con el operador +=\n\t\n\tint r4 = combinado(4,5); // r4 es igual a 20\n\n</pre>\n\n<p>De ejecutarse el código anterior, en la consola se vería el texto: “Ejecutando Suma” seguido de “Ejecutando Multiplicacion” ya que ambos se ejecutan y el valor de <code>r4</code> es <code>20</code> porque siempre se respeta el valor devuelto por el último delegado ejecutado.</p>\n\n<h4 id=\"pasos-siguientes\">Pasos siguientes</h4>\n<p>C# nos otorga plantillas para crear delegados con una serie personalizable de parámetros de entrada y de salida, a estos se les conoce como <code>Func</code> y <code>Action</code>, pero de ellos les hablaré en el siguiente post. Recuerda que el código de este post está disponible para que lo descargues, lo edites y juegues con él, búscalo en la <a href=\"#post-meta\">información del post</a></p>\n"
}