{	
	"id" : "/post/delegados-en-c-sharp/",
	"tv" : false,
	"date": "2015-07-24 05:00:00 -0500",
	"title" : "Delegados en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimagesfeatured.png",
	"tags" : ["AprendeCSharp"],
	  
	"content": '"Para comenzar la explicación debemos comprender qué es un delegado. Podemos ver un delegado en C# como un tipo de dato que apunta a un método permitiéndonos así extender las capacidades de nuestro código o permitir que otros lo hagan. La forma de declarar un delegado es de la siguiente manera: ```<modificador de acceso> delegate <tipo de retorno> <nombre del delegado> (<lista de parámetros>)```. Podríamos, por ejemplo, tener un delegado que realice una operación con dos números enteros y devuelva un solo número entero. La defnición de este sería algo como:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">delegate</span> <span class="kt">int</span> <span class="n">Operacion</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nEn ella, identificamos las partes:  \n - **public**, el modificador de acceso  \n - **delegate** la palabra clave para indicar que se trata de un delegado  \n - **int**, el tipo de retorno  \n - **Operacion**, el nombre del delegado  \n - **int a** e **int b**, los parámetros de entrada\n \n#### Instanciación\nAhora la parte interesante, porque seguramente te preguntas: ¿cómo instancío un delegado? y ¿cómo defino el comportamiento de un delegado? Como mencioné arriba, el delegado es en cierta manera un apuntador a un método, luego entonces supongamos que tenemos varios métodos que comparten el mismo tipo de retorno y lista de parámetros que nuestro delegado. Para el ejemplo, tomemos los siguientes métodos:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"> <span class="err">\</span><span class="n">npublic</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">Suma</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tConsole</span><span class="p">.</span><span class="n">WriteLine</span> <span class="p">(</span><span class="err">\</span><span class="s">&quot;Ejecutando Suma\&quot;);\n\treturn a + b;\n}\n \npublic static int Resta(int r, int t) \n{\n\tConsole.WriteLine (\&quot;Ejecutando Resta\&quot;);\n\treturn r - t;\n}\n \npublic static int Multiplicacion(int x, int y) \n{\n\tConsole.WriteLine (\&quot;Ejecutando Multiplicacion\&quot;);\n\treturn x * y;\n}\n</span></code></pre></figure> \n\nPodemos ver que no importa el nombre del método ni de el de los parámetros que recibe. A partir de ellos se puede instanciar los delegados, para ello debemos utilizar el operador <code>new</code> seguido del nombre de nuestro delegado y como parámetro el método al que este \"apunta\". Para muestra:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Main</span><span class="p">()</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tOperacion</span> <span class="n">mas</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Operacion</span><span class="p">(</span><span class="n">Suma</span><span class="p">);</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tOperacion</span> <span class="n">menos</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Operacion</span> <span class="p">(</span><span class="n">Resta</span><span class="p">);</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tOperacion</span> <span class="n">por</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Operacion</span> <span class="p">(</span><span class="n">Multiplicacion</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>\n\n#### Ejecución\nPara ejecutarlo basta con llamarlo como habitualmente llamaríamos al método al que hace referencia, es decir, el nombre asignado a la \"variable\" del tipo delegado y entre paréntesis la lista de parámetros, para este ejemplo los usaríamos de esta manera:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="c1">// \n\tint r1 = mas(4,5); // r1 es igual a 9\n\tint r2 = menos(4,5); // r2 es igual a -1\n\tint r3 = por(4,5); // r3 es igual a 20\n\t//\n</span></code></pre></figure>\n\n#### Combinación\nOtra función útil de los delegados es la posiblidad de combinarlos, lo cual se realiza mediante el operador <code>+=</code>. Es confuso decir combinarlos, dado que la combinación es en realidad un tipo de encolamiento, haciéndo que se ejecute uno tras de otro, pero de manera independiente.  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="c1">// \n\tOperacion combinado = mas;\n\tcombinado += por; // combinación con el operador +=\n\t\n\tint r4 = combinado(4,5); // r4 es igual a 20\n}\n</span></code></pre></figure>  \n\nDe ejecutarse el código anterior, en la consola se vería el texto: \"Ejecutando Suma\" seguido de \"Ejecutando Multiplicacion\" ya que ambos se ejecutan y el valor de <code>r4</code> es <code>20</code> porque siempre se respeta el valor devuelto por el último delegado ejecutado. \n\n#### Pasos siguientes\nC# nos otorga plantillas para crear delegados con una serie personalizable de parámetros de entrada y de salida, a estos se les conoce como <code>Func</code> y <code>Action</code>, pero de ellos les hablaré en el siguiente post. Recuerda que el código de este post está disponible para que lo descargues, lo edites y juegues con él, búscalo en la <a href=\"#post-meta\">información del post</a>\n"'   
}