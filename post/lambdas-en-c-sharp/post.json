{	
	"id" : "/post/lambdas-en-c-sharp/",
	"tv" : false,
	"date": "2015-08-03 13:00:00 -0500",
	"title" : "Lambdas en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimagesfeatured.png",
	"tags" :
	["AprendeCSharp"],
	
	"content" : body"Una vez que conocemos lo que es un delegado, y lo que son Func y Action, es momento de llegar a un tema que se convierte en algo muy sencillo, además es de mis cosas favoritas en C#: Las **expresiones lambda**. Comenzaré por dar un ejemplo de su uso: \n  \nEs decir, suponiendo que tenemos el método del ejemplo pasado.\n{% highlight csharp %}\nvoid RealizaOperacionSecreta(List<string> palabras, Func<string, bool> filtro)\n{% endhighlight %}\nPara el que escribimos un método para usarlo como filtro:\n{% highlight csharp %}\npublic static bool SoloConU(string s)\n{\n\treturn s.StartsWith(\"u\");\n}\n\n// ...\n// Ejemplo de uso:\nRealizaOperacionSecrete(palabras, SoloConU);\n{% endhighlight %}\nEn realidad, no es necesario escribir tanto, el método ```SoloConU```, puede ser reemplazado en el código por:  \n{% highlight csharp %}\nRealizaOperacionSecrete(palabras, (s) => { return s.StartsWith(\"u\"); });\n\n// O simplemente por:\nRealizaOperacionSecrete(palabras, s => s.StartsWith(\"u\"));\n{% endhighlight %}\nPor definición, las expresiones lambda son \"métodos anónimos para crear tipos delegados y árboles de expresión\", nos enfocaremos en lo primero. El método <code>SoloConU</code> es usado solamente una vez en nuestro programa y es por eso que es un buen candidato a ser reemplazado por un método anónimo (entre otras cosas, sin nombre). Y es que podría muchas veces resultarnos bastante engorroso tener que escribir le método completo para hacer referencia a él solamente una vez dentro de todo nuestro código.\n\n#### Crear una expresión lambda  \nMe gusta imaginar la creación de expresiones lambda como una especie de recorte de los métodos tradicionales, y es que lo podemos ver como una serie de pasos que funcionan tanto para métodos con tipo de dato de retorno o para los que no lo tienen:  \n\n<ol>\n\t<li>Quitamos todo lo que esté antes del primer paréntesis de apertura</li>\n\t<li>Agregamos el operador <code>=&gt;</code></li>\n\t<li>... listo</li>\n</ol>  \n\n#### Consideraciones extras  \nExisten otras consideraciones que podemos tomar en cuenta si queremos reducir aún más la cantidad de código escrito. Por ejemplo si a la expresión lambda recibe **un solo parámetro** se pueden omitir los paréntesis:\n\n<div class=\"pure-g\">\n    <div class=\"pure-u-1-2\">\n{% highlight csharp %}\n// Versión normal\n(a) => { return a.ToString(); }\n{% endhighlight %}\n\t</div>\n    <div class=\"pure-u-1-2\">\n{% highlight csharp %}\n// Versión \"simplificada\"\na => { return a.ToString(); }\n{% endhighlight %}\n\t</div>\n</div>\nSi la expresión lambda consta de una **única sentencia**, y esta es una **operación de retorno**, podemos omitir los corchetes, la palabra clave ```return``` y el ```;``` de fin de sentencia: \n\n<div class=\"pure-g\">\n    <div class=\"pure-u-1-2\">\n{% highlight csharp %}\na => { return a.ToString(); }\n{% endhighlight %}\n\t</div>\n    <div class=\"pure-u-1-2\">\n{% highlight csharp %}\na => a.ToString()\n{% endhighlight %}\n\t</div>\n</div>  \n\n#### Usos más frecuentes  \n{% highlight csharp %}\n// Eventos\naccessButton.Clicked += (sender, args) => { DoAccess(); };\n\n// Linq\nvar solteros = \tpersonas\n\t\t\t\t.Where(persona => persona.EsSoltero)\n\t\t\t\t.OrderBy(persona => persona.Nombre)\n\t\t\t\t.Select (persona => new Soltero { Nombre = persona.Nombre });\n{% endhighlight %}\nDe los usos más frecuentes de las expresiones lambda, podemos encontrar la asignación de manejadores de evento y en conjunto con Linq. Herramientas de las que les hablaré más adelante.\n\n**Este es el fin de la serie de posts** que comenzó con <a href=\"/delegados-en-c-sharp\" target=\"_blank\">delegados en C#</a> continuando con <a href=\"/func-y-action-en-c-sharp\" target=\"_blank\">func y action en C#</a>. Hay otro tema en el tintero, que son los árboles de expresiones, pero aún está en preparación."
}