{	
	"id" : "/post/string-vs-system-string-es/",
	"tv" : false,
	"date": "2015-08-21 08:00:00 -0500",
	"title" : "Un post sobre alias, ¿string vs. System.String?",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimagesfeatured.jpg",
	"tags" :
	[ 
		"AprendeCSharp"
	],
	"content" : "<p>He de aceptarlo, una de las cosas que más dudas me causaba cuando inicié a programar usando C# era sobre cuál era la diferencia entre usar string o System.String, la idea que yo tenía al respecto que estaba totalmente equivocada. Tenía la mala creencia de que <code>string</code> y <code>String</code> (sí, la diferencia es la mayúscula inicial) eran cosas un tanto distintas cuando resulta que no es así.</p>

<h3 id=\"alias\">Alias</h3>
<p>Resulta que <code>string</code> y <code>System.String</code> (o simplemente <code>String</code>) son lo mismo, es decir, en nuestro código podemos fácilmente intercambiar ambas palabras sin problema alguno. Por poner otro ejemplo, usando el alias para <code>Int32</code>, podemos escribir de cualquiera de las dos siguientes maneras y el código significará lo mismo.</p>
<div class=\"pure-g\">
    <div class=\"pure-u-1-2\">
<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">int</span> <span class="n">abc</span> <span class="p">=</span> <span class="m">123</span><span class="p">;</span>
<span class="n">Int32</span> <span class="n">xyz</span> <span class="p">=</span> <span class="m">123</span><span class="p">;</span></code></pre></figure>
	</div>
    <div class=\"pure-u-1-2\">
<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Int32</span> <span class="n">abc</span> <span class="p">=</span> <span class="m">123</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">xyz</span> <span class="p">=</span> <span class="m">123</span><span class="p">;</span></code></pre></figure>
	</div>
</div>

<h4 id=\"referencias-o-valores\">¿Referencias o valores?</h4>
<p>Como parte de mis falsas creencias, pensaba que al usar <code>System.Int32</code> estaba creando tipos de dato por referencias (o <em>envoltorios</em>, como en Java) con todo lo que eso representa, pero repito: No es así. Todos los tipos de valor permanecen así independientemente de cómo los hayamos declarado. Eso sí, no olvides que <code>string</code> y por tanto <code>String</code> son un tipo de referencia. Abajo pongo una tabla con algunos alias de C#:</p>
<table>
	<thead>
		<tr>
			<th>Alias</th>
			<th>Framework</th>
			<th>Tipo</th>
		</tr>
	</thead>
	<tr>
		<td>int</td>
		<td>System.Int32</td>
		<td>Valor</td>
	</tr>
	<tr>
		<td>bool</td>
		<td>System.Boolean</td>
		<td>Valor</td>
	</tr>
	<tr>
		<td>float</td>
		<td>System.Single</td>
		<td>Referencia</td>
	</tr>
	<tr>
		<td>object</td>
		<td>System.Object</td>
		<td>Referencia</td>
	</tr>
</table>

<h4 id=\"para-qu-existen\">¿Para qué existen?</h4>
<p>Puede que te estés preguntando eso, y la verdad es que no sé. Muchos sugieren que es por cuestión de hábito, ya que los alias se parecen (si no es que son iguales) a las declaraciones de variables para lenguajes de programación más antiguos que C#, como C o C++. Para un programador sería más sencillo migrar de un lenguaje a otro si encuentra cosas parecidas a las que está acostumbrado, aunque sean detalles pequeños como este.</p>

<h4 id=\"cul-es-correcto\">¿Cuál es correcto?</h4>
<p>Al significar lo mismo en términos de programación su uso es cuestión de gustos, pero yo prefiero usar el alias para declarar variables, tipos de dato de retorno y parámetros de método. Mientras que prefiero usar el nombre “completo” para hacer referencia a métodos y constantes de cada tipo, por ejemplo</p>
<div class=\"pure-g\">
    <div class=\"pure-u-1-2\">
<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// Yo prefiero...</span>
<span class="kt">int</span> <span class="n">abc</span> <span class="p">=</span> <span class="n">Int32</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;123\&quot;);</span>
<span class="kt">string</span> <span class="n">emptyString</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span></code></pre></figure>
	</div>
    <div class=\"pure-u-1-2\">
<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// ... a esto</span>
<span class="n">Int32</span> <span class="n">abc</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;123\&quot;);</span>
<span class="n">String</span> <span class="n">xyz</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span></code></pre></figure>
	</div>
</div>

<h4 id=\"lo-que-sigue\">Lo que sigue</h4>
<p>En el siguiente post les platicaré de una forma en la que podemos crear nuestros propios alias y así también tomar ventaja de las características que nos ofrece el lenguaje.</p>
"
}