{	
	"id" : "/post/string-vs-system-string-es/",
	"tv" : false,
	"date": "2015-08-21 08:00:00 -0500",
	"title" : "Un post sobre alias, ¿string vs. System.String?",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages/string-vs-system-string-es/featured.jpg",
	"tags" : ["AprendeCSharp"],
	"content": "<p>He de aceptarlo, una de las cosas que más dudas me causaba cuando inicié a programar usando C# era sobre cuál era la diferencia entre usar string o System.String, la idea que yo tenía al respecto que estaba totalmente equivocada. Tenía la mala creencia de que <code>string</code> y <code>String</code> (sí, la diferencia es la mayúscula inicial) eran cosas un tanto distintas cuando resulta que no es así.</p>\n\n<h3 id=\"alias\">Alias</h3>\n<p>Resulta que <code>string</code> y <code>System.String</code> (o simplemente <code>String</code>) son lo mismo, es decir, en nuestro código podemos fácilmente intercambiar ambas palabras sin problema alguno. Por poner otro ejemplo, usando el alias para <code>Int32</code>, podemos escribir de cualquiera de las dos siguientes maneras y el código significará lo mismo.</p>\n<div class=\"pure-g\">\n    <div class=\"pure-u-1-2\">\n<pre class=\"csharp\">\nint abc = 123;\nInt32 xyz = 123;\n</pre>\n\t</div>\n    <div class=\"pure-u-1-2\">\n<pre class=\"csharp\">\nInt32 abc = 123;\nint xyz = 123;\n</pre>\n\t</div>\n</div>\n\n<h4 id=\"referencias-o-valores\">¿Referencias o valores?</h4>\n<p>Como parte de mis falsas creencias, pensaba que al usar <code>System.Int32</code> estaba creando tipos de dato por referencias (o <em>envoltorios</em>, como en Java) con todo lo que eso representa, pero repito: No es así. Todos los tipos de valor permanecen así independientemente de cómo los hayamos declarado. Eso sí, no olvides que <code>string</code> y por tanto <code>String</code> son un tipo de referencia. Abajo pongo una tabla con algunos alias de C#:</p>\n<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>Alias</th>\n\t\t\t<th>Framework</th>\n\t\t\t<th>Tipo</th>\n\t\t</tr>\n\t</thead>\n\t<tr>\n\t\t<td>int</td>\n\t\t<td>System.Int32</td>\n\t\t<td>Valor</td>\n\t</tr>\n\t<tr>\n\t\t<td>bool</td>\n\t\t<td>System.Boolean</td>\n\t\t<td>Valor</td>\n\t</tr>\n\t<tr>\n\t\t<td>float</td>\n\t\t<td>System.Single</td>\n\t\t<td>Referencia</td>\n\t</tr>\n\t<tr>\n\t\t<td>object</td>\n\t\t<td>System.Object</td>\n\t\t<td>Referencia</td>\n\t</tr>\n</table>\n\n<h4 id=\"para-qu-existen\">¿Para qué existen?</h4>\n<p>Puede que te estés preguntando eso, y la verdad es que no sé. Muchos sugieren que es por cuestión de hábito, ya que los alias se parecen (si no es que son iguales) a las declaraciones de variables para lenguajes de programación más antiguos que C#, como C o C++. Para un programador sería más sencillo migrar de un lenguaje a otro si encuentra cosas parecidas a las que está acostumbrado, aunque sean detalles pequeños como este.</p>\n\n<h4 id=\"cul-es-correcto\">¿Cuál es correcto?</h4>\n<p>Al significar lo mismo en términos de programación su uso es cuestión de gustos, pero yo prefiero usar el alias para declarar variables, tipos de dato de retorno y parámetros de método. Mientras que prefiero usar el nombre “completo” para hacer referencia a métodos y constantes de cada tipo, por ejemplo</p>\n<div class=\"pure-g\">\n    <div class=\"pure-u-1-2\">\n<pre class=\"csharp\">\n// Yo prefiero...\nint abc = Int32.Parse(\"123\");\nstring emptyString = String.Empty;\n</pre>\n\t</div>\n    <div class=\"pure-u-1-2\">\n<pre class=\"csharp\">\n// ... a esto\nInt32 abc = int.Parse(\"123\");\nString xyz = string.Empty;\n</pre>\n\t</div>\n</div>\n\n<h4 id=\"lo-que-sigue\">Lo que sigue</h4>\n<p>En el siguiente post les platicaré de una forma en la que podemos crear nuestros propios alias y así también tomar ventaja de las características que nos ofrece el lenguaje.</p>\n"
}