{	
	"id" : "/post/tips-xamarin-forms/",
	"tv" : false,
	"date": "2016-05-30 03:00:00 -0500",
	"title" : "Tips de desempeño en Xamarin Forms",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//xamarin-forms/tips.png",
	"tags" : ["XamarinForms","Xamarin"],
	  
	"content": '"Esta es la traducción de <a href=\"http://kent-boogaart.com/blog/jason-smith's-xamarin-forms-performance-tips\" target=\"_blank\">un post de Kent Boogaart</a> en donde recopiló una serie de tips sobre cómo mejorar el desempeño de apps hechas con Xamarin Forms.\r\n\r\n<hr />\r\n<br />\r\n\r\nJason Smith, ingeniero a cargo de Xamarin Forms, hizo una <a href=\"https://www.youtube.com/watch?v=RZvdql3Ev0E\" target=\"_blank\" rel=\"nofollow\">fantástica presentación</a> en la conferencia Evolve de este año. En ella, él repasó una larga lista de tips de desempeño, así como una sesión de preguntas y respuestas. No he podido encontrar estos tips por escrito (en diapositivas, transcripción o post en blog). Con el interés de hacer esta información más fácilmente accesible para mi y otros, decidí resumirlos aquí.\r\n\r\nMe tomé la libertad de reacomodar y agrupar tips relacionados, pero quiero dejar en claro que este es el contenido de Jason, no el mío.\r\n\r\n## General  \r\n**HABILITA** la compilación de XAML si estás usándolo para tus vistas:\r\n\r\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">n</span><span class="p">[</span><span class="n">assembly</span><span class="p">:</span> <span class="n">XamlCompilation</span><span class="p">(</span><span class="n">XamlCompilationOptions</span><span class="p">.</span><span class="n">Compile</span><span class="p">)]</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">n</span></code></pre></figure>   \r\n\r\n**NO USES** *bindings* cuando asignaciones estáticas sean suficientes.\r\n\r\n**NO** asignes valores por default. Hacerlo conlleva un costo, aunque nunca modifiques el valor.\r\n\r\n**EVITA** usar transparencias. Busca lograr efectos similares con la opacidad al 100%.\r\n\r\n**USA** `async` / `await` para evitar bloquear el hilo principal.\r\n\r\n**CONSIDERA** crear los controles en un hilo distinto al principal, pero asegurate de agregarlos al *árbol visual* en el hilo principal. De no hacerlo no hará que tu app falle inmediatamente, pero corromperá su estado. Se especialmente cuidadoso si estás usando `MessagingCenter` en el constructor de tu control.\r\n\r\n## Layout\r\n**NO USES** un `ContentView` con `Padding` solo para aplicarle un margen al hijo. Usa, en su lugar, la propiedad `Margin` en el hijo (disponible desde Xamarin.Forms 2.2).\r\n\r\n**NO USES** un `StackLayout` para contener un solo hijo.\r\n\r\n**NO USES** un `Grid` cuando con `StackLayout` basta.\r\n\r\n**NO USES** múltiples `StackLayout`s cuando con un `Grid` es suficiente.\r\n\r\n**TOMA EN CUENTA** las propiedades `Spacing` (`ColumnSpacing` / `RowSpacing` en `Grid`) y `Padding`. En lugar de esto:\r\n\r\n<figure class="highlight"><pre><code class="language-xml" data-lang="xml">\r\n<span class="nt">&lt;StackLayout&gt;</span>\r\n    <span class="nt">&lt;ContentView</span> <span class="na">Padding=</span><span class="s">\&quot;10,10,10,5\&quot;</span><span class="nt">&gt;</span>\r\n        <span class="nt">&lt;Label</span> <span class="na">Text=</span><span class="s">\&quot;1\&quot;/</span><span class="nt">&gt;</span>\r\n    <span class="nt">&lt;/ContentView&gt;</span>\r\n    <span class="nt">&lt;ContentView</span> <span class="na">Padding=</span><span class="s">\&quot;10,0,10,5\&quot;</span><span class="nt">&gt;</span>\r\n        <span class="nt">&lt;Label</span> <span class="na">Text=</span><span class="s">\&quot;2\&quot;/</span><span class="nt">&gt;</span>\r\n    <span class="nt">&lt;/ContentView&gt;</span>\r\n    <span class="nt">&lt;ContentView</span> <span class="na">Padding=</span><span class="s">\&quot;10,0,10,0\&quot;</span><span class="nt">&gt;</span>\r\n        <span class="nt">&lt;Label</span> <span class="na">Text=</span><span class="s">\&quot;3\&quot;/</span><span class="nt">&gt;</span>\r\n    <span class="nt">&lt;/ContentView&gt;</span>\r\n<span class="nt">&lt;/StackLayout&gt;</span>\r\n</code></pre></figure>   \r\n\r\nHaz esto:\r\n\r\n<figure class="highlight"><pre><code class="language-xml" data-lang="xml">\r\n<span class="nt">&lt;StackLayout</span> <span class="na">Padding=</span><span class="s">\&quot;10\&quot;</span> <span class="na">Spacing=</span><span class="s">\&quot;5\&quot;</span><span class="nt">&gt;</span>\r\n    <span class="nt">&lt;Label</span> <span class="na">Text=</span><span class="s">\&quot;1\&quot;/</span><span class="nt">&gt;</span>\r\n    <span class="nt">&lt;Label</span> <span class="na">Text=</span><span class="s">\&quot;2\&quot;/</span><span class="nt">&gt;</span>\r\n    <span class="nt">&lt;Label</span> <span class="na">Text=</span><span class="s">\&quot;3\&quot;/</span><span class="nt">&gt;</span>\r\n<span class="nt">&lt;/StackLayout&gt;</span>\r\n</code></pre></figure>   \r\n\r\n**PREFIERE** usar `LayoutOptions.Fill` (o `LayoutOptions.FillAndExpand`). Estos son los valores por default y la *mayoría* de las veces no deben ser modificados.\r\n\r\n**PREFIERE** filas/columnas de `Grid` con tamaño definido con `*` en lugar de `Auto`.\r\n\r\n**NO USES** múltiples `StackLayout`s para simular un `Grid`.\r\n\r\n**NO USES** `RelativeLayout` si es posible.\r\n\r\n**AÑADE** agrega los controles hijos a su contenedor padre antes de agregar el padre a la pantalla.\r\n\r\nEn lugar de esto:\r\n\r\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">page</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContentPage</span><span class="p">();</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">stackLayout</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StackLayout</span><span class="p">();</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">image</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Image</span> <span class="p">{</span> <span class="n">Source</span> <span class="p">=</span> <span class="err">\</span><span class="s">&quot;person.png\&quot; };\r\nvar label = new Label { Text = \&quot;Name\&quot; };\r\n\r\npage.Content = stackLayout;\r\n\r\nnavigationPage.Push(page);\r\nstackLayout.Children.Add(image);\r\nstackLayout.Children.Add(label);\r\n</span></code></pre></figure>  \r\n\r\nHaz esto:\r\n\r\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">page</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ContentPage</span><span class="p">();</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">stackLayout</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StackLayout</span><span class="p">();</span><span class="err">\</span><span class="n">r</span><span class="err">\</span><span class="n">nvar</span> <span class="n">image</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Image</span> <span class="p">{</span> <span class="n">Source</span> <span class="p">=</span> <span class="err">\</span><span class="s">&quot;person.png\&quot; };\r\nvar label = new Label { Text = \&quot;Name\&quot; };\r\n\r\nstackLayout.Children.Add(image);\r\nstackLayout.Children.Add(label);\r\npage.Content = stackLayout;\r\n\r\nnavigationPage.Push(page);\r\n</span></code></pre></figure>  \r\n\r\nXAML ya agrega los controles en el orden *correcto*.\r\n\r\n**AÑADE** los controles a la página en el constructor en lugar de en el método `OnAppearing`.\r\n\r\n**PREFIERE** animar los controles usando las propiedades `TranslationX` y `TranslatonY`.\r\n\r\n**NO** llames al método `Layout()` (y especialmente `ForceLayout()`).\r\n\r\n**CONSIDERA** crear un *custom layout*. Es la mejor opción si es fácil describir el orden de tus controles con palabras pero difícil de implementarlo con los *layouts* que vienen en forms, si `AbsoluteLayout` hace *casi* lo que te gusta, o si simplemente necesitas velocidad pura.\r\n\r\n**NO USES** un `StackLayout` dentro de un `ScrollView` para simular un `ListView`.\r\n\r\n**USA** un `Grids` para hacer ordenamiento por capas.\r\n\r\n## Labels\r\n**NO USES** múltiples `Label`s cuando con una (usando *spans* con `FormattedText` cuando es necesario) basta.\r\n\r\n**DESACTIVA** `Label` *wrapping* si es posible (`LineBreakMode=\"NoWrap\"`).\r\n\r\n**NO** cambies el valor de `VerticalTextAlignment` a menos que sea necesario. El valor por default elimina un ciclo de medición completo.\r\n\r\n**PREFIERE** las propiedades `VerticalTextAlignment` y `HorizontalTextAlignment` sobre `VerticalOptions` y `HorizontalOptions`.\r\n\r\n**EVITA** actualizaciones esporádicas a `Label`s. Si las actualizaciones son a múltiples `Label`s, agrupa las actualizaciones de ser posible.\r\n\r\n## ListViews\r\n\r\n**NO** pongas un `ListView` dentro de un `ScrollView`. Usa las propiedades `Header` y `Footer` en su lugar.  \r\n\r\n**NO USES** `TableView` donde puedas usar `ListView`. Hoy en día, la única razón real para usar un `TableView` es por interfaces del estilo de un panel de configuración en el que cada celda tiene un contenido único.\r\n\r\n**USA** `ListViewCachingStrategy.RecycleElement` cuando puedas. Si no te funciona, revisa por qué no lo hace, realmente vale la pena. Debes activar esta propiedad manualmente.\r\n\r\n**USA** los selectores de *data template* para facilitar el uso de distintos controles dentro de un solo `ListView`. No sobreescribas `OnBindingContextChanged` para obtener el mismo efecto.\r\n\r\n**EVITA** usar `IEnumerable<T>` como origen de datos para un `ListView`, en su lugar, intenta usar `IList<T>`.\r\n\r\n**NO** anides `ListView`s, en su lugar utiliza grupos dentro de uno. No hay soporte para anidamiento de `ListViews` y hará que tu aplicación falle.\r\n\r\n**USA** la propiedad `HasUnevenRows` cuando tu `ListView` tenga filas de distintos tamaños. Si el contenido de una celda es modificado dinámicamente (tal vez despuésde cargar información de la base de datos), asegúrate de llamar `ForceUpdateSize()` en la celda.\r\n\r\n## Navegación\r\n**USA** `await` cuando ejecutes `PushAsync` y `PopAsync`. El no hacerlo reduce el desempeño y la *correctitud* de tu aplicación.\r\n\r\n**EVITA** ocultar / mostrar la barra de navegación.\r\n\r\n**USA** el <a href=\"https://gist.github.com/jassmith/a3b2a543f99126782936\" target=\"_blank\" rel=\"nofollow\">soporte para AppCompat</a> para Android. Esto mejorará el desempeño y apariencia de la aplicación.\r\n\r\n## Imágenes  \r\n**TOMA EN CUENTA** que Android no se optimiza el tamaño de la imagen.\r\n\r\n**ASIGNA** `true` a `Image.IsOpaque` si es posible.\r\n\r\n**CARGA** imagenes desde *Content* en lugar de *Recursos*.\r\n\r\n## BindableProperty\r\n**NO USES** la versión genérica de `BindableProperty.Create` (usa la versión basada en `string` en conjunto con el operador `nameof`).\r\n\r\n## CarouselPage\r\n\r\n**NO USES** la `CarouselPage`\r\n\r\n**USA** un `ContentView` dentro de una `ContentPage\r\n\r\n## MessagingCenter\r\n**PREFIERE** usar otro framework (como Prism).\r\n\r\n**USA** un método estático o de instancia en lugar de una expresión lambda para el `MessagingCenter`.\r\n"'   
}