{	
	"id" : "/post/null-coalescing/",
	"tv" : false,
	"date": "2016-09-19 14:00:01 -0500",
	"title" : "Operador null coalescing en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/null-c.png",
	"tags" : ["AprendeCSharp"],
	"content": "<p>Pese a estar desarrollando en C# desde hace tiempo, tengo que aceptar que hay algunas cosas que me tardé en conocer… entre ellas, el operador <code>??</code> . Seguramente ya lo conoces, pero si no, te invito a seguir leyendo para que lo hagas. En realidad, aunque lo conozcas te invito a seguir leyendo, espero apreandas algo nuevo.</p>\n\n<p>Este operador es básicamente una especie de <a href=\"../../tv/azucar-sintactica\" target=\"_blank\">azúcar sintáctica</a> para escribir una <strong>asignación condicional</strong> de tipos por referencia. En otras palabras (en código), observa las siguientes líneas:</p>\n\n<pre class=\"csharp\">\nstring personName;\nif (inputName == null)\n    personName = \"no name\";\nelse\n    personName = inputName;\nConsole.WriteLine(personName);\n</pre>\n\n<p>Si <code>inputName</code> es <code>null</code>, el valor de <code>personName</code> será <em>“no name”</em> para cuando el método <code>WriteLine</code>, todo eso en 4 líneas. Pero esta no es la única forma de realizar la asignación dependiendo del valor, también podríamos haber hecho uso del <a href=\"https://msdn.microsoft.com/en-us/library/be21c7hw(VS.94).aspx\" target=\"_blank\">operador ternario</a>:</p>\n\n<pre class=\"csharp\">\npersonName = inputName == null ? \"no name\" : inputName;\nConsole.WriteLine(personName);\n</pre>\n\n<h3 id=\"null-coalescing\">Null coalescing</h3>\n\n<p>Que producirá el mismo resultado si <code>inputName == null</code>, todo en 1 sola línea… sin embargo esta sigue sin ser la manera más corta de realizar una asignación de este tipo, la más corta se consigue a través del operador <code>??</code>, llamado <strong>null coalescing</strong> (o de uso combinado de NULL, en español):</p>\n\n<pre class=\"csharp\">\npersonName = inputName ?? \"no name\";\nConsole.WriteLine(personName);\n</pre>\n\n<p>Y listo, realiza la misma acción que los dos bloques de código anteriores, pero en menor cantidad de caracteres.</p>\n\n<p>Si aún no has inferido su funcionamiento, es el siguiente: la asignación comienza del lado derecho del signo <code>=</code>, y va de izquierda a derecha evaluando los las expresiones en busca del primer valor no nulo, en cuanto alguno sea distinto de <code>null</code>, lo asignará a la variable ubicada a la izquierda de <code>=</code>.</p>\n\n<h3 id=\"encadenamiento\">Encadenamiento</h3>\n\n<p>Otra de sus particularidades es que permite ser <em>encadenado</em>: si colocamos un operador tras otro, se aplicará el mismo principio de buscar desde la izquierda el primer valor no nulo para ser asignado:</p>\n\n<pre class=\"csharp\">\npersonName = inputName ?? GetRandomName() ?? TryGetName() ?? \"no name\";\n</pre>\n\n<p>Si esta misma asignación se intentara haecer con sentencias <code>if</code> o con operadores ternarios, la cantidad de código a escribir aumentaría considerablemente.</p>\n\n<h3 id=\"tipos-nullables\">Tipos nullables</h3>\n\n<p>Uno de sus usos es junto a los <a href=\"../tipos-nullables-en-c-sharp\">tipos nullables</a>:</p>\n\n<pre class=\"csharp\">\nint? teamAPoints = null;\nint? teamBPoints = 5;\n\nvar difference = (teamAPoints ?? 0) - (teamBPoints ?? 0);\nConsole.WriteLine(\"Difference \" + difference);\n</pre>\n\n<h3 id=\"carga-diferida\">Carga diferida</h3>\n<p>También suele ser muy frecuente que este operador sea usado para implementar la <em>carga diferida</em> o <a href=\"https://es.wikipedia.org/wiki/Lazy_loading\" target=\"_blank\">lazy loading</a> o el patrón <em>singleton</em>:</p>\n\n<pre class=\"csharp\">\nprivate static Random _random;\npublic static Random Random\n\n    get\n    \n        return _random ?? (_random = new Random(DateTime.Now.Second));\n    \n\n</pre>\n\n<p>Para la primera vez que llamemos a <code>Random</code>, se ejecutará la parte derecha de la instrucción y para llamadas subsecuentes, únicamente nos devolverá eñ valor de <code>_random</code>.</p>\n\n<h3 id=\"observaciones\">Observaciones</h3>\n\n<p>Es importante señalar que para que el operador funcione, los tipos a evaluar deben ser del mismo tipo (o al menos tener conversión implícita) ya que de otro modo, el compilador nos mostrará un error e impedirá la ejecución del programa. El siguiente segmento de código es inválido, ya que <code>personName</code> es una cadena y <code>teamAPoints</code> es <em>nullable de int</em></p>\n\n<pre class=\"csharp\">\nvar invalid = personName ?? teamAPoints;\n</pre>\n\n<h3 id=\"en-c-6\">En C# 6</h3>\n<p>Las cosas buenas no acaban ahí, este operador cobra mayor relevancia cuando lo combinamos con una de las nuevas funciones de C#, <a href=\"../c-sharp-seis/#null-conditional-operator\" target=\"_blank\"><em>null-conditional operator</em></a> (<code>?.</code>) podemos la funcionalidad que deseamos y sin usar tantas líneas de código:</p>\n\n<pre class=\"csharp\">\nvar randomOrNot = MainClass.Random?.Next(0, 10) ?? 0;\n</pre>\n\n<h3 id=\"ventajas\">Ventajas</h3>\n<p>Para ser honesto, aunque todo depende de quién lo mira, al operador <code>??</code> le encuentro únicamente ventajas:</p>\n\n<ul>\n  <li>Es más corto y fácil de escribir</li>\n  <li>Es más fácil de leer</li>\n  <li>Podemos implementar <em>singletons</em> o <em>carga diferida</em></li>\n  <li>Puede ser encadenado uno tras de otro</li>\n</ul>\n\n<p>¿Tu le encuentras otra ventaja o una desventaja? mándame un tuit, un correo o deja un comentario en la parte de abajo.</p>\n"
}