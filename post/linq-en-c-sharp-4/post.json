{	
	"id" : "/post/linq-en-c-sharp-4/",
	"tv" : false,
	"date": "2016-12-13 13:00:02 -0600",
	"title" : "Más Linq en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages/linq-en-c-sharp/featured.png",
	"tags" : ["AprendeCSharp"],
	  
	"content": '"Antes de comenzar con el post vamos a declarar algunos métodos y clases que estaremos usando para los ejemplos que veremos más adelante.  \n\nVamos a necesitar dos métodos utilitarios para imprimir colecciones de datos:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvoid</span> <span class="n">PrintInline</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">collection</span><span class="p">)</span> <span class="p">...</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">nvoid</span> <span class="n">Print</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">collection</span><span class="p">)</span> <span class="p">...</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nY una clase `Persona` que sobreescriba los métodos `Equals` y `GetHashCode`:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nclass</span> <span class="n">Persona</span> <span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Nombre</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Apellido</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="n">ToString</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Apellido</span> <span class="p">+</span> <span class="err">\</span><span class="s">&quot;, \&quot; + Nombre; }\n    public override bool Equals(object o)\n    { \n        var oth = o as Persona;\n        if(oth != null)\n            return oth.Apellido.Equals(Apellido);\n        return false;\n    }\n\n    public override int GetHashCode()\n    {\n        return Apellido.GetHashCode();\n    }\n}\n</span></code></pre></figure>  \n\nListo, más adelante verás por qué sobreescribimos esos dos métodos. Ahora si, comencemos con Linq:\n\n## Zip  \nEl método Zip nos ayuda para cuando queremos combinar dos colecciones de datos en el orden en el que estan. Con Zip tu especificas la forma en las que se deben combinar, por ejemplo en la siguiente linea se combinan dos series numéricas, multiplicando cada elemento entre si:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">coleccion1</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span> <span class="p">[]</span> <span class="p">{</span> <span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span> <span class="p">};</span><span class="err">\</span><span class="n">nvar</span> <span class="n">coleccion2</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span> <span class="p">[]</span> <span class="p">{</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">,</span> <span class="m">6</span><span class="p">,</span> <span class="m">7</span><span class="p">,</span> <span class="m">8</span><span class="p">,</span> <span class="m">9</span> <span class="p">};</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">nvar</span> <span class="n">combinados</span> <span class="p">=</span> <span class="n">coleccion1</span><span class="p">.</span><span class="n">Zip</span><span class="p">(</span><span class="n">coleccion2</span><span class="p">,</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">a</span> <span class="p">*</span> <span class="n">b</span><span class="p">);</span><span class="err">\</span><span class="n">nPrintInline</span><span class="p">(</span><span class="n">combinados</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nImprimirá:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n0</span> <span class="m">5</span> <span class="m">12</span> <span class="m">21</span> <span class="m">32</span> <span class="m">45</span> <span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nTambién se pueden combinar cadenas, como las de nombres y apellidos para crear un objeto de la clase Persona:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">nombres</span> <span class="p">=</span> <span class="k">new</span> <span class="n">String</span><span class="p">[]</span> <span class="p">{</span> <span class="err">\</span><span class="s">&quot;A\&quot;, \&quot;B\&quot;, \&quot;A\&quot;, \&quot;C\&quot;, \&quot;D\&quot;, \&quot;A\&quot; };\nvar apellidos = new String[] { \&quot;Z\&quot;, \&quot;X\&quot;, \&quot;Y\&quot;, \&quot;Y\&quot;, \&quot;W\&quot;, \&quot;Z\&quot; };\n\nvar personas = nombres.Zip(apellidos, (n, a) =&gt; new Persona { Nombre= n, Apellido = a}).OrderBy(p =&gt; p.Apellido);\nvar otrasPersonas = nombres.Zip(apellidos.Reverse(), (n, a) =&gt; new Persona { Nombre= n, Apellido = a}).OrderBy(p =&gt; p.Apellido);\nPrint(personas);\nPrint(otrasPersonas);\n</span></code></pre></figure>  \n\nImprimirá \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nW</span><span class="p">,</span> <span class="n">D</span><span class="err">\</span><span class="n">nX</span><span class="p">,</span> <span class="n">B</span><span class="err">\</span><span class="n">nY</span><span class="p">,</span> <span class="n">A</span><span class="err">\</span><span class="n">nY</span><span class="p">,</span> <span class="n">C</span><span class="err">\</span><span class="n">nZ</span><span class="p">,</span> <span class="n">A</span><span class="err">\</span><span class="n">nZ</span><span class="p">,</span> <span class="n">A</span><span class="err">\</span><span class="n">nW</span><span class="p">,</span> <span class="n">B</span><span class="err">\</span><span class="n">nX</span><span class="p">,</span> <span class="n">D</span><span class="err">\</span><span class="n">nY</span><span class="p">,</span> <span class="n">A</span><span class="err">\</span><span class="n">nY</span><span class="p">,</span> <span class="n">C</span><span class="err">\</span><span class="n">nZ</span><span class="p">,</span> <span class="n">A</span><span class="err">\</span><span class="n">nZ</span><span class="p">,</span> <span class="n">A</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n## Equals, GetHashCode & IEqualityComparer\nEn los siguientes métodos vamos a requerir de una forma de discernir si dos instancias de una misma clase son las mismas o no (y es por eso que sobreescribimos `Equals` y `GetHashCode`), sin embargo no siempre tendremos acceso a las \"entrañas\" de una clase para sobrescribir sus métodos o simplemente queremos tener otra forma de comparar dos objetos. Para estos casos podemos usar una implementación de la interfaz `IEqualityComparer`, por ejemplo, la siguente clase nos ayudará a distinguir una `Persona` de otra únicamente por su nombre:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nclass</span> <span class="n">NameEqualityComparer</span> <span class="p">:</span> <span class="n">IEqualityComparer</span><span class="p">&lt;</span><span class="n">Persona</span><span class="p">&gt;</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">bool</span> <span class="n">Equals</span><span class="p">(</span><span class="n">Persona</span> <span class="n">x</span><span class="p">,</span> <span class="n">Persona</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Nombre</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">Nombre</span><span class="p">);</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">int</span> <span class="n">GetHashCode</span><span class="p">(</span><span class="n">Persona</span> <span class="n">obj</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">obj</span><span class="p">.</span><span class="n">Nombre</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">();</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n## Union  \nCon `Union` se juntan dos colecciones de datos, es importante que se diferencíe este método de Concat, ya que mientras que uno junta las dos colecciones sin preocuparse del contenido de estas, Union no permite que existan duplicados en la colección resultante:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">concatenados</span> <span class="p">=</span> <span class="n">coleccion1</span><span class="p">.</span><span class="n">Concat</span><span class="p">(</span><span class="n">coleccion2</span><span class="p">);</span><span class="err">\</span><span class="n">nvar</span> <span class="n">unidos</span> <span class="p">=</span> <span class="n">coleccion1</span><span class="p">.</span><span class="n">Union</span><span class="p">(</span><span class="n">coleccion2</span><span class="p">);</span><span class="err">\</span><span class="n">nPrintInline</span><span class="p">(</span><span class="n">concatenados</span><span class="p">);</span><span class="err">\</span><span class="n">nPrintInline</span><span class="p">(</span><span class="n">unidos</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure> \n\nImprimirá\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n0</span> <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">5</span> <span class="m">4</span> <span class="m">5</span> <span class="m">6</span> <span class="m">7</span> <span class="m">8</span> <span class="m">9</span> <span class="err">\</span><span class="n">n0</span> <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">5</span> <span class="m">6</span> <span class="m">7</span> <span class="m">8</span> <span class="m">9</span> <span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n## Intersect  \nEs bastante obvio lo que realiza este método, intersecta dos colecciones, dando como resultado otra con solo los elementos que tienen en comun. Nuevamente, usa el método `Equals` (o `IEqualityComparer`)  para decidir qué elementos se parecen y cuales no.  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">interseccion</span> <span class="p">=</span>  <span class="n">coleccion1</span><span class="p">.</span><span class="n">Intersect</span><span class="p">(</span><span class="n">coleccion2</span><span class="p">);</span><span class="err">\</span><span class="n">nPrintInline</span><span class="p">(</span><span class="n">interseccion</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nImprimirá únicamente:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n4</span> <span class="m">5</span> <span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n## Except  \nCon `Except` podemos filtrar una colección basándonos en otra. En este caso los únicos elementos que forman parte de la nueva colección que existen en `coleccion1` que no existen en `coleccion2`:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">except</span> <span class="p">=</span> <span class="n">coleccion1</span><span class="p">.</span><span class="n">Except</span><span class="p">(</span><span class="n">coleccion2</span><span class="p">);</span><span class="err">\</span><span class="n">nPrintInline</span><span class="p">(</span><span class="n">except</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nImprimirá\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n0</span> <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n## SequenceEquals  \nEste método nos ayuda para saber si los elementos que contiene una colección existen en el mismo orden en otra. Si uno tiene menos, si un elemento es distinto o si están en diferente posición, este método devolverá false:\n\nAl igual los demás también este puede funcionar con una implementación de `IEqualityComparer`:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">secuencia1</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">4</span><span class="p">);</span><span class="err">\</span><span class="n">nvar</span> <span class="n">secuencia2</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">4</span><span class="p">);</span><span class="err">\</span><span class="n">nvar</span> <span class="n">secuencia3</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">4</span><span class="p">);</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">nvar</span> <span class="n">sonIguales</span> <span class="p">=</span> <span class="n">secuencia1</span><span class="p">.</span><span class="n">SequenceEqual</span><span class="p">(</span><span class="n">secuencia2</span><span class="p">);</span><span class="err">\</span><span class="n">nConsole</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Son iguales \&quot; + sonIguales);\n\nvar sonIguales1 = secuencia1.SequenceEqual(secuencia3);\nConsole.WriteLine(\&quot;Son iguales \&quot; + sonIguales1);\n</span></code></pre></figure>  \n\nY obtendremos en pantalla:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nTodos</span> <span class="n">divisibles</span><span class="p">:</span> <span class="n">False</span><span class="err">\</span><span class="n">nAlguno</span> <span class="n">divisible</span><span class="p">:</span> <span class="n">True</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n## Distinct  \nComo tal lo dice el nombre, con `Distnict` vamos a poder filtrar los elementos iguales de nuestra colección dejándonos con una que tiene elementos no repetidos entre si:\n\nEste método también acepta una implementación de `IEqualityComparer`:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">distintos</span> <span class="p">=</span> <span class="n">concatenados</span><span class="p">.</span><span class="n">Distinct</span><span class="p">();</span><span class="err">\</span><span class="n">nPrintInline</span><span class="p">(</span><span class="n">distintos</span><span class="p">);</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">nvar</span> <span class="n">personasDistintas</span> <span class="p">=</span> <span class="n">personas</span><span class="p">.</span><span class="n">Distinct</span><span class="p">();</span><span class="err">\</span><span class="n">nConsole</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Personas distintas por apellido\&quot;);\nPrint(personasDistintas);\n\nvar personasDistintasNombre = personas.Distinct(new NameEqualityComparer());\nConsole.WriteLine(\&quot;Personas distintas por nombre\&quot;);\nPrint(personasDistintasNombre);\n</span></code></pre></figure>  \n\nImprimirá:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n0</span> <span class="m">1</span> <span class="m">2</span> <span class="m">3</span> <span class="m">4</span> <span class="m">5</span> <span class="m">6</span> <span class="m">7</span> <span class="m">8</span> <span class="m">9</span> <span class="err">\</span><span class="n">nPersonas</span> <span class="n">distintas</span> <span class="n">por</span> <span class="n">apellido</span><span class="err">\</span><span class="n">nW</span><span class="p">,</span> <span class="n">D</span><span class="err">\</span><span class="n">nX</span><span class="p">,</span> <span class="n">B</span><span class="err">\</span><span class="n">nY</span><span class="p">,</span> <span class="n">A</span><span class="err">\</span><span class="n">nZ</span><span class="p">,</span> <span class="n">A</span><span class="err">\</span><span class="n">nPersonas</span> <span class="n">distintas</span> <span class="n">por</span> <span class="n">nombre</span><span class="err">\</span><span class="n">nW</span><span class="p">,</span> <span class="n">D</span><span class="err">\</span><span class="n">nX</span><span class="p">,</span> <span class="n">B</span><span class="err">\</span><span class="n">nY</span><span class="p">,</span> <span class="n">A</span><span class="err">\</span><span class="n">nY</span><span class="p">,</span> <span class="n">C</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n## All & Any  \nEstos métodos nos ayudan a responder las preguntas: ¿alguno de los elementos cumple con la condición dada? y ¿todos los elementos cumplen con la condición dada?  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nbool</span> <span class="n">todosDivisiblesEntre2</span> <span class="p">=</span> <span class="n">secuencia1</span><span class="p">.</span><span class="n">All</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span> <span class="p">%</span> <span class="m">2</span> <span class="p">==</span> <span class="m">0</span><span class="p">);</span><span class="err">\</span><span class="n">nbool</span> <span class="n">algunoDivisibleEntre2</span> <span class="p">=</span>  <span class="n">secuencia1</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">i</span> <span class="p">%</span> <span class="m">2</span> <span class="p">==</span> <span class="m">0</span><span class="p">);</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">nConsole</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Todos divisibles: \&quot; + todosDivisiblesEntre2);\nConsole.WriteLine(\&quot;Alguno divisible: \&quot; + algunoDivisibleEntre2);\n</span></code></pre></figure>  \n\n## Para terminar  \nEn el siguiente post hablaré de cómo podemos crear lenguajes específicos de dominio usando Linq y métodos de extensión.\n"'   
}