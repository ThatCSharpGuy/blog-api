{	
	"id" : "/post/string-format/",
	"tv" : false,
	"date": "2016-10-24 14:00:01 -0500",
	"title" : "String.Format",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/format.jpg",
	"tags" :
	[ 
		"AprendeCSharp"
	],
	"content" : "<p>El método estático <code>Format</code> de la clase <code>String</code> nos ayuda en el manejo de las cadenas en C#, específicamente a la hora de la presentación de la información. Antes de continuar, es importante que conozcas la firma del método que estamos a punto de discutir:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">Format</span> <span class="p">(</span><span class="kt">string</span> <span class="n">format</span><span class="p">,</span> <span class="k">params</span> <span class="kt">object</span><span class="p">[]</span> <span class="n">args</span><span class="p">);</span></code></pre></figure></p>

<p>Lo cual significa que recibe una cadena y una colección de objetos y devuelve una cadena. Ahora sí, mejor vemos su funcionamiento, toma por ejemplo la siguiente línea de código:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="n">Buen</span> <span class="n">día</span> <span class="n">señor</span> <span class="p">{</span><span class="m">0</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">sol</span><span class="err">”</span><span class="p">));</span></code></pre></figure></p>

<p>Que produce el siguiente resultado en la pantalla:  <code>Buen día señor sol</code>.</p>

<p>Wow, ¿viste lo que ocurrió? … La cadena “{0}” fue reemplazada por “sol”. Esa es básicamente la función de <code>Format</code>: <strong>reemplazar cadenas por valores</strong>. Pero las cadenas no tienen que ser cualquier cosa, sino una cadena “especial”, que debe contener marcadores (o <em>placeholders</em>) que se forman de un índice entero rodeado de las llaves <code>{</code> y <code>}</code>.</p>

<p>El índice indica en qué lugar dentro de la función aparecerá el valor por el cual debe ser reemplazado, en el caso del código anterior <code>\"sol\"</code> aparece en el lugar 0 (contando de izquierda a derecha) a partir de que termina la cadena “original”. En caso de que hubiera más de un parámetro podríamos usar <code>{1}</code>, <code>{2}</code> y así sucesivamente:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">},</span> <span class="p">{</span><span class="m">1</span><span class="p">}</span> <span class="n">y</span> <span class="p">{</span><span class="m">2</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">uno</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">dos</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">tres</span><span class="err">”</span><span class="p">));</span> <span class="c1">// Imprime: “uno, dos y tres”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">1</span><span class="p">},</span> <span class="p">{</span><span class="m">0</span><span class="p">}</span> <span class="n">y</span> <span class="p">{</span><span class="m">2</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">uno</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">dos</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">tres</span><span class="err">”</span><span class="p">));</span> <span class="c1">// Imprime: “dos, uno y tres”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">2</span><span class="p">},</span> <span class="p">{</span><span class="m">0</span><span class="p">}</span> <span class="n">y</span> <span class="p">{</span><span class="m">1</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">uno</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">dos</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">tres</span><span class="err">”</span><span class="p">));</span> <span class="c1">// Imprime: “tres, uno y dos”</span></code></pre></figure></p>

<p>Del código anterior observa cómo a pesar de que parámetros aparecen en el mismo orden, cambia la forma en que aparecen en la pantalla.</p>

<h2 id=\"formato-especial\">Formato especial</h2>
<p>Además de decidir la ubicación de nuestros objetos en la cadena formateada con las llaves e índices (<code>{0}</code>,<code>{1}</code>, …), también podemos darles un formato más específico. Esto se logra modificando un poco el marcador que indica su posición, la modificación consiste en agregar dos puntos a la derecha del índice, seguido del formato que deseamos darle, todo esto dentro de las llaves. Es decir, <code>{0}</code> se transformaría en <code>{0:X}</code>, o <code>{2}</code> se transformaría en <code>{2:#,##0.00}</code>, la idea se entiende. De los formatos hablaremos un poco más adelante.</p>

<h2 id=\"formateando-enteros\">Formateando enteros</h2>
<p>Formatear enteros es probablemente algo que tendrás que hacer comúnmente, así que por qué no aprender algunas cuantas cosas para hacer que luzcan mejor. Para darle formato a los enteros usando <code>Format</code> tenemos varias opciones a nuestro alcance. Por ejemplo, podemos hacer que se el número tenga tantos ceros a la izquierda como deseamos (cinco ceros en este caso):</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="m">00000</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">1300</span><span class="p">));</span> <span class="c1">// Imprime: “01300”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="m">00000</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="p">-</span><span class="m">52</span><span class="p">));</span> <span class="c1">// Imprime: “-00052”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="m">00000</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">0</span><span class="p">));</span> <span class="c1">// Imprime: “00000”</span></code></pre></figure></p>

<p>O, ¿quién no conoce la notación exponencial? pues también la podemos usar para formatear nuestros números, el modificador de formato es la letra <code>e</code>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">e</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">1300</span><span class="p">));</span> <span class="c1">// Imprime: “1.300000e+003”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">e</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="p">-</span><span class="m">52</span><span class="p">));</span> <span class="c1">// Imprime: “-5.200000e+001”</span></code></pre></figure></p>

<p>El modificador de formato <code>c</code> puede resultar muy útil para aplicaciones que manejan cantidades monetarias, ya que se encarga de darles formato y añadirle el signo de la moneda sin necesidad de más esfuerzo del programador:</p>

<p><strong>NOTA:</strong> Ten especial cuidado con este modificador de formato, ya que modificará el número de acuerdo a la cultura de tu aplicación.</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">c</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">1300</span><span class="p">));</span> <span class="c1">// Imprime: “$1,300.00</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">c</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="p">-</span><span class="m">52</span><span class="p">));</span> <span class="c1">// Imprime: “($52.00)”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">c</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">0</span><span class="p">));</span> <span class="c1">// Imprime: “$0.00”</span></code></pre></figure></p>

<p>Y no podríamos dejar de lado a los números hexadecimales, su modificador es la letra <code>x</code> seguido de un número entero que indica el número de posiciones que debe ocupar, mira:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">int</span> <span class="n">r</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="n">g</span> <span class="p">=</span> <span class="m">133</span><span class="p">,</span> <span class="n">b</span> <span class="p">=</span> <span class="m">20</span><span class="p">;</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="n">Hex</span><span class="p">:</span> <span class="n">R</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">x</span><span class="p">},</span> <span class="n">G</span><span class="p">{</span><span class="m">1</span><span class="p">:</span><span class="n">x4</span><span class="p">},</span> <span class="n">B</span><span class="p">{</span><span class="m">2</span><span class="p">:</span><span class="n">x2</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">b</span><span class="p">));</span> <span class="c1">// Imprime: “Hex: R0, G0085, B14”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">Hex</span><span class="p">:</span> <span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">x2</span><span class="p">}{</span><span class="m">1</span><span class="p">:</span><span class="n">x2</span><span class="p">}{</span><span class="m">2</span><span class="p">:</span><span class="n">x2</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">b</span><span class="p">);</span> <span class="c1">// Imprime: “Hex: 008514”</span></code></pre></figure></p>

<h2 id=\"formateando-numeros-reales\">Formateando numeros reales</h2>
<p>Al igual que los enteros, para los números reales (<code>double</code>, <code>decimal</code> y <code>float</code>) también se pueden formatear. Comenzando por el modificador <code>r</code> que supuestamente garantiza que un número será convertido a cadena y que posteriormente podremos <em>parsear</em> esa cadena de vuelta al número y obtener el mismo valor, aunque esto <a href=\"http://stackoverflow.com/questions/24299692/why-is-a-round-trip-conversion-via-a-string-not-safe-for-a-double?rq=1\" target=\"_blank\">no es del todo cierto</a>. Generalmente se usa <code>r</code> para obtener una representación exacta del número:</p>

<p><strong>NOTA:</strong> Este modificador de formato únicamente puede ser usado con números <code>double</code> y <code>float</code>.</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">r</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">0.6852871999174d</span><span class="p">));</span> <span class="c1">// Imprime: “0.6852871999174”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">r</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">0.6852871999174f</span><span class="p">));</span>  <span class="c1">// Imprime: “0.6852872”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">r</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">0.6852871999174</span><span class="n">m</span><span class="p">));</span>  <span class="c1">// Error, r no está disponible para decimal</span></code></pre></figure><br />
También podemos especificar cuántos decimales deben aparecer cuando imprimimos el número, usando <code>0</code>s para indicar la cantidad de decimales:</p>

<p><strong>NOTA:</strong> Este modificador de formato redondeará los números a su valor más cercano.</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0.00</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">13000d</span><span class="p">));</span> <span class="c1">// Imprime: “13,000.00”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0.00</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">0.6852871999174f</span><span class="p">));</span>  <span class="c1">// Imprime: “0.69”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0.00</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="p">-</span><span class="m">0.50</span><span class="n">m</span><span class="p">));</span>  <span class="c1">// Imprime: “-0.50”</span></code></pre></figure></p>

<p>Si por otro lado estamos trabajando con números que representan porcentajes, podemos hacer uso del modificador <code>0%</code>, este modificador tomará el valor y lo multiplicará por 100 e imprimirá el resultado acompañado del símbolo de por ciento:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="m">0.0</span><span class="p">%}</span><span class="err">”</span><span class="p">,</span> <span class="m">13000d</span><span class="p">));</span> <span class="c1">// Imprime: “1300000.0%”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="m">0.0</span><span class="p">%}</span><span class="err">”</span><span class="p">,</span> <span class="m">0.6852871999174f</span><span class="p">));</span>  <span class="c1">// Imprime: “68.5%”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="m">0.0</span><span class="p">%}</span><span class="err">”</span><span class="p">,</span> <span class="p">-</span><span class="m">0.50</span><span class="n">m</span><span class="p">));</span>  <span class="c1">// Imprime: “-50.0%”</span></code></pre></figure></p>

<p>El resto de modificadores de formato los puedes encontrar en <a href=\"https://msdn.microsoft.com/en-us/library/0c899ak8(v=vs.110).aspx\" target=\"_blank\">este enlace</a>.</p>

<h2 id=\"formato-condicional\">Formato condicional</h2>
<p>Para los tipos numéricos, <code>String.Format</code> tiene una opción más de formateo, que es útil si quieres hacer distinción entre números positivos, negativos y con valor 0. La sintaxis no es tan distinta a las anteriores, basta con separar con <code>;</code> los formatos:</p>

<p><code> 
\"{0:[formato si positivo];[formato si negativo];[formato si cero]}\"  
</code></p>

<p>Los usos de este pueden ser muy variados, por ejemplo, imagina que un requerimiento de tu aplicación es poner guiones en lugar de 0 cuando muestres cifras y la palabra MENOS cuando se trata de números negativos:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0.00</span><span class="p">;</span><span class="n">MENOS</span> <span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0.00</span><span class="p">;</span><span class="err">—</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">13000</span><span class="p">));</span> <span class="c1">// Imprime: “13,000.00”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0.00</span><span class="p">;</span><span class="n">MENOS</span> <span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0.00</span><span class="p">;</span><span class="err">—</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">0</span><span class="p">));</span>  <span class="c1">// Imprime: “—”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0.00</span><span class="p">;</span><span class="n">MENOS</span> <span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0.00</span><span class="p">;</span><span class="err">—</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="p">-</span><span class="m">0.50</span><span class="n">m</span><span class="p">));</span>  <span class="c1">// Imprime: “MENOS 0.50”</span></code></pre></figure></p>

<p>Otro posible uso es para esos sistemas, raros, en donde se utilizan los valores 1 y -1 como booleanos:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">VERDADERO</span><span class="p">;</span><span class="n">FALSO</span><span class="p">;</span><span class="n">DESCONOCIDO</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">1</span><span class="p">));</span> <span class="c1">// Imprime: “VERDADERO”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">VERDADERO</span><span class="p">;</span><span class="n">FALSO</span><span class="p">;</span><span class="n">DESCONOCIDO</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="m">0</span><span class="p">));</span>  <span class="c1">// Imprime: “DESCONOCIDO”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">VERDADERO</span><span class="p">;</span><span class="n">FALSO</span><span class="p">;</span><span class="n">DESCONOCIDO</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="p">-</span><span class="m">1</span><span class="p">));</span>  <span class="c1">// Imprime: “FALSO”</span></code></pre></figure></p>

<p>También puedes hacer cosas como mostrar si un balance es positivo o negativo sin mostrar los números y sin la necesidad de agregar sentencias de control a tu código. Deja que <code>Format</code> haga el trabajo.</p>

<h2 id=\"formateando-fechas\">Formateando fechas</h2>
<p>Probablemente las fechas sean el tipo de dato que más opciones de formato posean. Toma por ejemplo las siguientes opciones de formato:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">now</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">d</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">now</span><span class="p">));</span> <span class="c1">// Imprime: “22/10/2016”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">F</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">now</span><span class="p">));</span> <span class="c1">// Imprime: “sábado, 22 de octubre de 2016 09:54:33 a.m.”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">M</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">now</span><span class="p">));</span> <span class="c1">// Imprime: “22 de octubre”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">T</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">now</span><span class="p">));</span> <span class="c1">// Imprime: “09:54:33 a.m.”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">r</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">now</span><span class="p">));</span> <span class="c1">// Imprime: “Sat, 22 Oct 2016 09:54:33 GMT”</span></code></pre></figure></p>

<p>Pero también puedes crear tus formatos propios, por ejemplo:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">now</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">dd</span><span class="p">/</span><span class="n">MM</span><span class="p">/</span><span class="n">yyyy</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">now</span><span class="p">));</span> <span class="c1">// Imprime: “24/10/2016”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">dd</span><span class="p">-</span><span class="n">MM</span><span class="p">-</span><span class="n">yyyy</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">now</span><span class="p">));</span> <span class="c1">// Imprime: “24-10-2016”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">dd</span> <span class="n">MMM</span> <span class="n">yyyy</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">now</span><span class="p">));</span> <span class="c1">// Imprime: “24 oct. 2016”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">dd</span> <span class="err">‘</span><span class="n">de</span><span class="err">’</span> <span class="n">MMMM</span> <span class="err">‘</span><span class="n">de</span><span class="err">’</span> <span class="n">yy</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">now</span><span class="p">));</span> <span class="c1">// Imprime: “24 de octubre de 16”</span></code></pre></figure></p>

<p>En la última línea, ¿viste cómo es que “de” está escrito entre comillas simples? a esto se le llama <em>“escapar”</em> una cadena, ya que de otro modo (de haber puesto “de” sin comillas simples) el resultado de <code>Format</code> habría sido: “24 24e octubre 24e 16”. Siempre que deseemos que un caracter sea ignorado para cuando se realice el formato, tenemos que <em>escaparlo</em>.</p>

<p>Puedes consultar todos los modificadores de formato para fechas en <a href=\"https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx\" target=\"_blank\">el sitio de MSDN</a>.</p>

<h2 id=\"relleno-o-padding\">Relleno o padding</h2>
<p>La posibilidad de agregar relleno a las cadenas formateadas es una de las características que yo acabo de descubrir. Normalmente concatenaba una cadena vacía con la que quería mostrar y obtenía una subcadena para obtener el resultado deseado, sin embargo, podemos irnos olvidando de eso, ya que <code>Format</code> también nos lo ofrece. Cambia un poco la sintaxis, pero no es nada del otro mundo: ahora es necesario agregar otro número (separado por una coma), inmediatamente después del índice del parámetro y antes de los <code>:</code> en caso de que los contenga.</p>

<p>El número que agreguemos representará la cantidad de relleno que se deberá agregar, lo mejor es que nos permite agregar <em>padding</em> tanto a la izquierda como a la derecha, dependiendo de si el número que agregamos es positivo o negativo:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="n">I</span><span class="p">|{</span><span class="m">0</span><span class="p">,</span><span class="m">10</span><span class="p">}|{</span><span class="m">0</span><span class="p">,-</span><span class="m">10</span><span class="p">}|</span><span class="n">D</span><span class="err">”</span><span class="p">,</span> <span class="m">1300</span><span class="p">));</span>    <span class="c1">// Imprime: “I|      1300|1300      |D”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="n">I</span><span class="p">|{</span><span class="m">0</span><span class="p">,</span><span class="m">10</span><span class="p">}|{</span><span class="m">0</span><span class="p">,-</span><span class="m">10</span><span class="p">}|</span><span class="n">D</span><span class="err">”</span><span class="p">,</span> <span class="p">-</span><span class="m">52</span><span class="p">));</span>     <span class="c1">// Imprime: “I|       -52|-52       |D”</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="n">I</span><span class="p">|{</span><span class="m">0</span><span class="p">,</span><span class="m">10</span><span class="p">}|{</span><span class="m">0</span><span class="p">,-</span><span class="m">10</span><span class="p">}|</span><span class="n">D</span><span class="err">”</span><span class="p">,</span> <span class="m">0</span><span class="p">));</span>       <span class="c1">// Imprime: “I|         0|0         |D”</span></code></pre></figure></p>

<p>Para terminar, podemos combinar todos los tipos de formato con <em>padding</em> y modificadores para presentar datos de una manera más ordenada, por ejemplo, en una tabla:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">data</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span>
<span class="p">{</span>
    <span class="k">new</span> <span class="p">{</span> <span class="n">Dato1</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="n">Dato2</span><span class="p">=</span><span class="err">”</span><span class="n">México</span><span class="err">”</span><span class="p">,</span> <span class="n">Dato3</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">},</span>
    <span class="k">new</span> <span class="p">{</span> <span class="n">Dato1</span> <span class="p">=</span> <span class="m">2</span><span class="p">,</span> <span class="n">Dato2</span> <span class="p">=</span> <span class="err">“</span><span class="n">Canadá</span><span class="err">”</span><span class="p">,</span> <span class="n">Dato3</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(</span><span class="m">3</span><span class="p">)</span> <span class="p">},</span>
    <span class="k">new</span> <span class="p">{</span> <span class="n">Dato1</span> <span class="p">=</span> <span class="m">10</span><span class="p">,</span> <span class="n">Dato2</span> <span class="p">=</span> <span class="err">“</span><span class="n">Panamá</span><span class="err">”</span><span class="p">,</span> <span class="n">Dato3</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddDays</span><span class="p">(-</span><span class="m">2</span><span class="p">)</span> <span class="p">},</span>
    <span class="k">new</span> <span class="p">{</span> <span class="n">Dato1</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="n">Dato2</span> <span class="p">=</span> <span class="err">“</span><span class="n">Perú</span><span class="err">”</span><span class="p">,</span> <span class="n">Dato3</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">AddMonths</span><span class="p">(-</span><span class="m">2</span><span class="p">)</span> <span class="p">}</span>
<span class="p">};</span>
<span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">item</span> <span class="k">in</span> <span class="n">data</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="p">|{</span><span class="m">0</span><span class="p">,</span><span class="m">10</span><span class="p">:</span><span class="m">000</span><span class="p">}|{</span><span class="m">1</span><span class="p">,</span><span class="m">10</span><span class="p">}|{</span><span class="m">2</span><span class="p">,</span><span class="m">10</span><span class="p">:</span><span class="n">dd</span><span class="p">-</span><span class="n">MM</span><span class="p">}|</span><span class="err">”</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">Dato1</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">Dato2</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">Dato3</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>

<p>Con lo cual obtendremos algo así:</p>

<pre>
|       000|    México|     24-10|  
|       002|    Canadá|     27-10|  
|       010|    Panamá|     22-10|  
|       000|      Perú|     24-08|  
</pre>

<p>Cuando un formato no se pueda aplicar, generalmente cuando el tipo de dato no es compatible con el formato elegido, se obtendrá una excepción del tipo <code>FormatException</code>. Generalmente esto no debería ocurrir puesto que tu controlas el código, pero sin duda debes tener cuidado de manejar las excepciones si crees que se podrían presentar.</p>

<h2 id=\"consolewriteline\">Console.WriteLine</h2>
<p>Por si te diste cuenta, hay algunos casos en que uso únicamente el método <code>WriteLine</code> sin llamar a <code>Format</code>, y es que el primero tiene una sobrecarga que ejecuta el segundo, pero imprime directamente el resultado sin necesidad de que tengas que llamarlo tu explícitamente. Muy útil, la verdad.</p>
"
}