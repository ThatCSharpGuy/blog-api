{	
	"id" : "/post/string-format/",
	"tv" : false,
	"date": "2016-10-24 14:00:01 -0500",
	"title" : "String.Format",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/format.jpg",
	"tags" : ["AprendeCSharp"],
	"content": "<p>El método estático <code>Format</code> de la clase <code>String</code> nos ayuda en el manejo de las cadenas en C#, específicamente a la hora de la presentación de la información. Antes de continuar, es importante que conozcas la firma del método que estamos a punto de discutir:</p>\n\n<pre class=\"csharp\">\npublic static string Format (string format, params object[] args);\n</pre>\n\n<p>Lo cual significa que recibe una cadena y una colección de objetos y devuelve una cadena. Ahora sí, mejor vemos su funcionamiento, toma por ejemplo la siguiente línea de código:</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(String.Format(\"Buen día señor 0\", \"sol\"));\n</pre>\n\n<p>Que produce el siguiente resultado en la pantalla:  <code>Buen día señor sol</code>.</p>\n\n<p>Wow, ¿viste lo que ocurrió? … La cadena “0” fue reemplazada por “sol”. Esa es básicamente la función de <code>Format</code>: <strong>reemplazar cadenas por valores</strong>. Pero las cadenas no tienen que ser cualquier cosa, sino una cadena “especial”, que debe contener marcadores (o <em>placeholders</em>) que se forman de un índice entero rodeado de las llaves <code>y</code>.</p>\n\n<p>El índice indica en qué lugar dentro de la función aparecerá el valor por el cual debe ser reemplazado, en el caso del código anterior <code>\"sol\"</code> aparece en el lugar 0 (contando de izquierda a derecha) a partir de que termina la cadena “original”. En caso de que hubiera más de un parámetro podríamos usar <code>1</code>, <code>2</code> y así sucesivamente:</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(String.Format(\"0, 1 y 2\", \"uno\", \"dos\", \"tres\")); // Imprime: \"uno, dos y tres\"\nConsole.WriteLine(String.Format(\"1, 0 y 2\", \"uno\", \"dos\", \"tres\")); // Imprime: \"dos, uno y tres\"\nConsole.WriteLine(String.Format(\"2, 0 y 1\", \"uno\", \"dos\", \"tres\")); // Imprime: \"tres, uno y dos\"\n</pre>\n\n<p>Del código anterior observa cómo a pesar de que parámetros aparecen en el mismo orden, cambia la forma en que aparecen en la pantalla.</p>\n\n<h2 id=\"formato-especial\">Formato especial</h2>\n<p>Además de decidir la ubicación de nuestros objetos en la cadena formateada con las llaves e índices (<code>0</code>,<code>1</code>, …), también podemos darles un formato más específico. Esto se logra modificando un poco el marcador que indica su posición, la modificación consiste en agregar dos puntos a la derecha del índice, seguido del formato que deseamos darle, todo esto dentro de las llaves. Es decir, <code>0</code> se transformaría en <code>0:X</code>, o <code>2</code> se transformaría en <code>2:#,##0.00</code>, la idea se entiende. De los formatos hablaremos un poco más adelante.</p>\n\n<h2 id=\"formateando-enteros\">Formateando enteros</h2>\n<p>Formatear enteros es probablemente algo que tendrás que hacer comúnmente, así que por qué no aprender algunas cuantas cosas para hacer que luzcan mejor. Para darle formato a los enteros usando <code>Format</code> tenemos varias opciones a nuestro alcance. Por ejemplo, podemos hacer que se el número tenga tantos ceros a la izquierda como deseamos (cinco ceros en este caso):</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(String.Format(\"0:00000\", 1300)); // Imprime: \"01300\"\nConsole.WriteLine(String.Format(\"0:00000\", -52)); // Imprime: \"-00052\"\nConsole.WriteLine(String.Format(\"0:00000\", 0)); // Imprime: \"00000\"\n</pre>\n\n<p>O, ¿quién no conoce la notación exponencial? pues también la podemos usar para formatear nuestros números, el modificador de formato es la letra <code>e</code>:</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(String.Format(\"0:e\", 1300)); // Imprime: \"1.300000e+003\"\nConsole.WriteLine(String.Format(\"0:e\", -52)); // Imprime: \"-5.200000e+001\"\n</pre>\n\n<p>El modificador de formato <code>c</code> puede resultar muy útil para aplicaciones que manejan cantidades monetarias, ya que se encarga de darles formato y añadirle el signo de la moneda sin necesidad de más esfuerzo del programador:</p>\n\n<p><strong>NOTA:</strong> Ten especial cuidado con este modificador de formato, ya que modificará el número de acuerdo a la cultura de tu aplicación.</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(String.Format(\"0:c\", 1300)); // Imprime: \"$1,300.00\nConsole.WriteLine(String.Format(\"0:c\", -52)); // Imprime: \"($52.00)\"\nConsole.WriteLine(String.Format(\"0:c\", 0)); // Imprime: \"$0.00\"\n</pre>\n\n<p>Y no podríamos dejar de lado a los números hexadecimales, su modificador es la letra <code>x</code> seguido de un número entero que indica el número de posiciones que debe ocupar, mira:</p>\n\n<pre class=\"csharp\">\nint r = 0, g = 133, b = 20;\nConsole.WriteLine(String.Format(\"Hex: R0:x, G1:x4, B2:x2\", r, g, b)); // Imprime: \"Hex: R0, G0085, B14\"\nConsole.WriteLine(\"Hex: 0:x21:x22:x2\", r, g, b); // Imprime: \"Hex: 008514\"\n</pre>\n\n<h2 id=\"formateando-numeros-reales\">Formateando numeros reales</h2>\n<p>Al igual que los enteros, para los números reales (<code>double</code>, <code>decimal</code> y <code>float</code>) también se pueden formatear. Comenzando por el modificador <code>r</code> que supuestamente garantiza que un número será convertido a cadena y que posteriormente podremos <em>parsear</em> esa cadena de vuelta al número y obtener el mismo valor, aunque esto <a href=\"http://stackoverflow.com/questions/24299692/why-is-a-round-trip-conversion-via-a-string-not-safe-for-a-double?rq=1\" target=\"_blank\">no es del todo cierto</a>. Generalmente se usa <code>r</code> para obtener una representación exacta del número:</p>\n\n<p><strong>NOTA:</strong> Este modificador de formato únicamente puede ser usado con números <code>double</code> y <code>float</code>.</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(String.Format(\"0:r\", 0.6852871999174d)); // Imprime: \"0.6852871999174\"\nConsole.WriteLine(String.Format(\"0:r\", 0.6852871999174f));  // Imprime: \"0.6852872\"\nConsole.WriteLine(String.Format(\"0:r\", 0.6852871999174m));  // Error, r no está disponible para decimal\n</pre>\n<p>También podemos especificar cuántos decimales deben aparecer cuando imprimimos el número, usando <code>0</code>s para indicar la cantidad de decimales:</p>\n\n<p><strong>NOTA:</strong> Este modificador de formato redondeará los números a su valor más cercano.</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(String.Format(\"0:#,##0.00\", 13000d)); // Imprime: \"13,000.00\"\nConsole.WriteLine(String.Format(\"0:#,##0.00\", 0.6852871999174f));  // Imprime: \"0.69\"\nConsole.WriteLine(String.Format(\"0:#,##0.00\", -0.50m));  // Imprime: \"-0.50\"\n</pre>\n\n<p>Si por otro lado estamos trabajando con números que representan porcentajes, podemos hacer uso del modificador <code>0</code>, este modificador tomará el valor y lo multiplicará por 100 e imprimirá el resultado acompañado del símbolo de por ciento:</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(String.Format(\"0:0.0\", 13000d)); // Imprime: \"1300000.0\"\nConsole.WriteLine(String.Format(\"0:0.0\", 0.6852871999174f));  // Imprime: \"68.5\"\nConsole.WriteLine(String.Format(\"0:0.0\", -0.50m));  // Imprime: \"-50.0\"\n</pre>\n\n<p>El resto de modificadores de formato los puedes encontrar en <a href=\"https://msdn.microsoft.com/en-us/library/0c899ak8(v=vs.110).aspx\" target=\"_blank\">este enlace</a>.</p>\n\n<h2 id=\"formato-condicional\">Formato condicional</h2>\n<p>Para los tipos numéricos, <code>String.Format</code> tiene una opción más de formateo, que es útil si quieres hacer distinción entre números positivos, negativos y con valor 0. La sintaxis no es tan distinta a las anteriores, basta con separar con <code>;</code> los formatos:</p>\n\n<p><code> \n\"0:[formato si positivo];[formato si negativo];[formato si cero]\"  \n</code></p>\n\n<p>Los usos de este pueden ser muy variados, por ejemplo, imagina que un requerimiento de tu aplicación es poner guiones en lugar de 0 cuando muestres cifras y la palabra MENOS cuando se trata de números negativos:</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(String.Format(\"0:#,##0.00;MENOS #,##0.00;—\", 13000)); // Imprime: \"13,000.00\"\nConsole.WriteLine(String.Format(\"0:#,##0.00;MENOS #,##0.00;—\", 0));  // Imprime: \"—\"\nConsole.WriteLine(String.Format(\"0:#,##0.00;MENOS #,##0.00;—\", -0.50m));  // Imprime: \"MENOS 0.50\"\n</pre>\n\n<p>Otro posible uso es para esos sistemas, raros, en donde se utilizan los valores 1 y -1 como booleanos:</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(String.Format(\"0:VERDADERO;FALSO;DESCONOCIDO\", 1)); // Imprime: \"VERDADERO\"\nConsole.WriteLine(String.Format(\"0:VERDADERO;FALSO;DESCONOCIDO\", 0));  // Imprime: \"DESCONOCIDO\"\nConsole.WriteLine(String.Format(\"0:VERDADERO;FALSO;DESCONOCIDO\", -1));  // Imprime: \"FALSO\"\n</pre>\n\n<p>También puedes hacer cosas como mostrar si un balance es positivo o negativo sin mostrar los números y sin la necesidad de agregar sentencias de control a tu código. Deja que <code>Format</code> haga el trabajo.</p>\n\n<h2 id=\"formateando-fechas\">Formateando fechas</h2>\n<p>Probablemente las fechas sean el tipo de dato que más opciones de formato posean. Toma por ejemplo las siguientes opciones de formato:</p>\n\n<pre class=\"csharp\">\nvar now = DateTime.Now;\nConsole.WriteLine(String.Format(\"0:d\", now)); // Imprime: \"22/10/2016\"\nConsole.WriteLine(String.Format(\"0:F\", now)); // Imprime: \"sábado, 22 de octubre de 2016 09:54:33 a.m.\"\nConsole.WriteLine(String.Format(\"0:M\", now)); // Imprime: \"22 de octubre\"\nConsole.WriteLine(String.Format(\"0:T\", now)); // Imprime: \"09:54:33 a.m.\"\nConsole.WriteLine(String.Format(\"0:r\", now)); // Imprime: \"Sat, 22 Oct 2016 09:54:33 GMT\"\n</pre>\n\n<p>Pero también puedes crear tus formatos propios, por ejemplo:</p>\n\n<pre class=\"csharp\">\nvar now = DateTime.Now;\nConsole.WriteLine(String.Format(\"0:dd/MM/yyyy\", now)); // Imprime: \"24/10/2016\"\nConsole.WriteLine(String.Format(\"0:dd-MM-yyyy\", now)); // Imprime: \"24-10-2016\"\nConsole.WriteLine(String.Format(\"0:dd MMM yyyy\", now)); // Imprime: \"24 oct. 2016\"\nConsole.WriteLine(String.Format(\"0:dd 'de' MMMM 'de' yy\", now)); // Imprime: \"24 de octubre de 16\"\n</pre>\n\n<p>En la última línea, ¿viste cómo es que “de” está escrito entre comillas simples? a esto se le llama <em>“escapar”</em> una cadena, ya que de otro modo (de haber puesto “de” sin comillas simples) el resultado de <code>Format</code> habría sido: “24 24e octubre 24e 16”. Siempre que deseemos que un caracter sea ignorado para cuando se realice el formato, tenemos que <em>escaparlo</em>.</p>\n\n<p>Puedes consultar todos los modificadores de formato para fechas en <a href=\"https://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx\" target=\"_blank\">el sitio de MSDN</a>.</p>\n\n<h2 id=\"relleno-o-padding\">Relleno o padding</h2>\n<p>La posibilidad de agregar relleno a las cadenas formateadas es una de las características que yo acabo de descubrir. Normalmente concatenaba una cadena vacía con la que quería mostrar y obtenía una subcadena para obtener el resultado deseado, sin embargo, podemos irnos olvidando de eso, ya que <code>Format</code> también nos lo ofrece. Cambia un poco la sintaxis, pero no es nada del otro mundo: ahora es necesario agregar otro número (separado por una coma), inmediatamente después del índice del parámetro y antes de los <code>:</code> en caso de que los contenga.</p>\n\n<p>El número que agreguemos representará la cantidad de relleno que se deberá agregar, lo mejor es que nos permite agregar <em>padding</em> tanto a la izquierda como a la derecha, dependiendo de si el número que agregamos es positivo o negativo:</p>\n\n<pre class=\"csharp\">\nConsole.WriteLine(String.Format(\"I|0,10|0,-10|D\", 1300));    // Imprime: \"I|      1300|1300      |D\"\nConsole.WriteLine(String.Format(\"I|0,10|0,-10|D\", -52));     // Imprime: \"I|       -52|-52       |D\"\nConsole.WriteLine(String.Format(\"I|0,10|0,-10|D\", 0));       // Imprime: \"I|         0|0         |D\"\n</pre>\n\n<p>Para terminar, podemos combinar todos los tipos de formato con <em>padding</em> y modificadores para presentar datos de una manera más ordenada, por ejemplo, en una tabla:</p>\n\n<pre class=\"csharp\">\nvar data = new[]\n\n    new  Dato1 = 0, Dato2=\"México\", Dato3 = DateTime.Now ,\n    new  Dato1 = 2, Dato2 = \"Canadá\", Dato3 = DateTime.Now.AddDays(3) ,\n    new  Dato1 = 10, Dato2 = \"Panamá\", Dato3 = DateTime.Now.AddDays(-2) ,\n    new  Dato1 = 0, Dato2 = \"Perú\", Dato3 = DateTime.Now.AddMonths(-2) \n;\nforeach (var item in data)\n\n    Console.WriteLine(\"|0,10:000|1,10|2,10:dd-MM|\", item.Dato1, item.Dato2, item.Dato3);\n\n</pre>\n\n<p>Con lo cual obtendremos algo así:</p>\n\n<pre>\n|       000|    México|     24-10|  \n|       002|    Canadá|     27-10|  \n|       010|    Panamá|     22-10|  \n|       000|      Perú|     24-08|  \n</pre>\n\n<p>Cuando un formato no se pueda aplicar, generalmente cuando el tipo de dato no es compatible con el formato elegido, se obtendrá una excepción del tipo <code>FormatException</code>. Generalmente esto no debería ocurrir puesto que tu controlas el código, pero sin duda debes tener cuidado de manejar las excepciones si crees que se podrían presentar.</p>\n\n<h2 id=\"consolewriteline\">Console.WriteLine</h2>\n<p>Por si te diste cuenta, hay algunos casos en que uso únicamente el método <code>WriteLine</code> sin llamar a <code>Format</code>, y es que el primero tiene una sobrecarga que ejecuta el segundo, pero imprime directamente el resultado sin necesidad de que tengas que llamarlo tu explícitamente. Muy útil, la verdad.</p>\n"
}