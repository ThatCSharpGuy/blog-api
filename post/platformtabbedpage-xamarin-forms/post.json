{	
	"id" : "/post/platformtabbedpage-xamarin-forms/",
	"tv" : false,
	"date": "2017-01-31 13:00:01 -0600",
	"title" : "Tabs más familiares a tus usuarios en Xamarin.Forms",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//xamarin-forms/tabbed-page/featured.jpg",
	"tags" :
	["Xamarin","XamarinForms","NuGetRecomendado"],
	
	"content" : body"Entre la gran variedad de páginas pre-cargadas que nos ofrece Xamarin.Forms tenemos la opción de elegir la `TabbedPage` que en realidad no es más que un contenedor de otras páginas y que las hace accesibles a través de *tabs*. Seguramente la has usado y piensas que es genial, lo que no es tan genial es que es un poco... estática y no permite mucha personalización.  \n\nEs por eso que decidí crear un <a href=\"https://developer.xamarin.com/guides/xamarin-forms/custom-renderer/\" target=\"_blank\">custom renderer</a> que permita darle un poco más de estilo, haciendo que se vea más nativa para tus usuarios.  \n\n## Uso  \nPara comenzar a usar estas tabs tienes dos opciones: instalar el <a href=\"https://www.nuget.org/packages/PlatformTabbedPage/\" target=\"_blank\">paquete de NuGet</a> en tus tres proyectos o descargar el <a href=\"https://github.com/messier16/PlatformTabbedPage\" target=\"_blank\">código fuente</a> y colocarlo en tu aplicación.  \n\n{% console titulo %}\nPM> Install-Package PlatformTabbedPage\n{% endconsole %}\n\nDespués, tienes que crear una página que derive de `PlatformTabbedPage`:  \n\n{% highlight csharp %}\npublic class HomeTabbedPage : PlatformTabbedPage\n{% endhighlight %}  \n\nY como normalmente haces con las `TabbedPage` originales, añadir las páginas hijo en el constructor. Es **muy importante** que notes cómo es que el ícono no termina en \".png\", ya que de otro modo las tabs no funcionarán correctamente en iOS:  \n\n{% highlight csharp %}\n    public HomeTabbedPage()\n    {\n        BarBackgroundColor = App.BarBackgroundColors[3];\n        SelectedColor = App.SelectedColors[0];\n        BarBackgroundApplyTo = BarBackgroundApplyTo.None;\n\n        Children.Add(new ConfigurationPage { Icon = \"feed\" });\n        Children.Add(new BasicContentPage(\"YouTube\") { Icon = \"youtube\" });\n        Children.Add(new BasicContentPage(\"Twitter\") { Icon = \"twitter\" });\n        Children.Add(new BasicContentPage(\"Info\") { Icon = \"info\" });\n    }\n}\n{% endhighlight %}  \n\nY obtendremos algo como esto (del lado izquierdo es la app creada con una `TabbedPage` tradicional):\n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\n{% post_image android-no-small.gif \"iOS no normal\" %}\n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">  \n{% post_image android-small.gif \"iOS no normal\" %}\n</div>  \n</div> \n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">  \n{% post_image ios-no-small.gif \"iOS no normal\" %}\n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">  \n{% post_image ios-small.gif \"iOS no normal\" %}\n</div>  \n</div>  \n\nDescarga el <a href=\" https://github.com/messier16/PlatformTabbedPage\" target=\"_blank\">código fuente</a> para que puedas ver el ejemplo de este post.  \n\nY ahora, si quieres saber cómo es que logré esta personalización, sigue leyendo.\n\n\n## PlatformTabbedPage  \nEntre las cosas que quise personalizar están el color del elemento seleccionado, el color del elemento deseleccionado, y en iOS el ícono del elemento seleccionado, ya que como viste en las imagenes anteriores en Android resulta un poco complicado resolver a primera vista qué elemento estamos viendo, mientras que en iOS resulta un poco extraño que el ícono del elemento seleccionado permanezca igual que los otros.\n\n### Creación del renderer  \nComenzamos por definir una clase que derive del tipo de página que vamos a personalizar  \n\n{% highlight csharp %}\npublic class PlatformTabbedPage : TabbedPage\n{% endhighlight %}  \n\nLuego definimos las propiedades, con su respectiva `BindableProperty` para permitir que se establezcan *bindings* a ellas: \n\n{% highlight csharp %}\npublic static readonly BindableProperty SelectedColorProperty =\n    BindableProperty.Create(nameof(SelectedColor), typeof(Color), typeof(PlatformTabbedPage), default(Color));\n\npublic Color SelectedColor\n{\n    get { return (Color)GetValue(SelectedColorProperty); }\n    set { SetValue(SelectedColorProperty, value); }\n}\n\npublic static readonly new BindableProperty BarBackgroundColorProperty =\n    BindableProperty.Create(nameof(BarBackgroundColor), typeof(Color), typeof(PlatformTabbedPage), default(Color));\n\npublic new Color BarBackgroundColor\n{\n    get { return (Color)GetValue(BarBackgroundColorProperty); }\n    set { SetValue(BarBackgroundColorProperty, value); }\n}\n\npublic static readonly BindableProperty BarBackgroundApplyToProperty =\n    BindableProperty.Create(nameof(BarBackgroundApplyTo), typeof(BarBackgroundApplyTo), typeof(PlatformTabbedPage), BarBackgroundApplyTo.Android);\n\npublic BarBackgroundApplyTo BarBackgroundApplyTo\n{\n    get { return (BarBackgroundApplyTo)GetValue(BarBackgroundApplyToProperty); }\n    set { SetValue(BarBackgroundApplyToProperty, value); }\n}\n{% endhighlight %}  \n\nLa descripción de las propiedades es la siguiente:  \n \n - `SelectedColor`: El color del elemento seleccionado\n - `BarBackgroundColor`: El color de fondo de la barra, decidí ocultar con `new` la implementación por default, ya que voy a controlar el comportamiento de esta propiedad dentro de cada renderer  \n - `BarBackgroundApplyTo`: Una <a href=\"..\\c-sharp-enums\" target=\"_blank\"><i>enumeración</i></a> que indica en qué plataformas modificaremos el color de la barra, y es que en mi opinión en iOS es un poco \"antinatural\" cambiar el color de la barra.   \n\nAdemás cree unos <a href=\"..\\extension-methods-es\" target=\"_blank\">métodos de extensión</a> para trabajar con los colores, haciéndolos más claros o más oscuros además de uno que ayuda a decidir si un color es claro u obscuro, puedes encontrar más detalles en el código fuente.  \nAhora sí, vamos a ver la implementación en cada plataforma:  \n\n## iOS  \n(para este *renderer* me basé por completo en la <a href=\"https://github.com/xamarinhq/app-evolve/blob/master/src/XamarinEvolve.iOS/Renderers/SelectedTabPageRenderer.cs\" target=\"_blank\">implementación</a> de la app Evolve de Xamarin)  \n\nEn iOS vamos a crear un *renderer* que derive de `TabbedRenderer`:  \n\n{% highlight csharp %}\npublic class PlatformTabbedPageRenderer : TabbedRenderer\n{% endhighlight %}  \n\nDespués definimos unas cuantas propiedades una para acceder al la instancia en forms de `PlatformTabbedPage` y otro par para almacenar los colores por default de la `UITabBar` original:  \n\n{% highlight csharp %}\nPlatformTabbedPage FormsTabbedPage => Element as PlatformTabbedPage;\nUIColor DefaultTintColor;\nUIColor DefaultBarBackgroundColor;\n{% endhighlight %}  \n\nSi alguna vez has escrito un *custom renderer* ya sabrás que el método `OnElementChanged` es llamado cada vez que se va a renderizar en pantalla el control, es por eso que dentro de él asignamos (y desasignamos) un evento que nos permitirá estar al tanto de cuando las propiedades de la barra cambien en el proyecto de forms.\n\n{% highlight csharp %}\nif (e.OldElement != null)\n{\n    e.OldElement.PropertyChanged -= OnElementPropertyChanged;\n}\nif (e.NewElement != null)\n{\n    e.NewElement.PropertyChanged += OnElementPropertyChanged;\n}\n{% endhighlight %}  \n\nAdemás de recuperar los colores por default del TabBar en caso de que los necesitemos más adelante.\n\n{% highlight csharp %}\nDefaultTintColor = TabBar.TintColor;\nDefaultBarBackgroundColor = TabBar.BackgroundColor;\n{% endhighlight %}  \n\nUna vez hecho esto llamamos a un par de métodos que nos servirán para asignar los colores que deseamos.\n\n{% highlight csharp %}\nSetTintedColor();\nSetBarBackgroundColor();\n{% endhighlight %}  \n\nAhora toca el turno de \"rellenar\" los íconos, y digo \"rellenar\" porque en realidad es necesario que hayas creado un par de íconos por cada tab, uno que se muestre por default y otro que se muestre cuando la tab está seleccionada.  \n\nEl truco aquí radica en que la API de iOS permite establecer dos imágenes una seleccionada y otra deseleccionada, y eso es precisamente lo que hace este renderer: toma el ícono, le añade el sufijo \"_active\" y lo coloca como la imagen que debe mostrarse cuando el elemento está seleccionado:  \n\n{% highlight csharp %}\nif (FormsTabbedPage != null)\n{\n    for (int i = 0; i < TabBar.Items.Length; i++)\n    {\n        var item = TabBar.Items[i];\n        var icon = FormsTabbedPage.Children[i].Icon;\n\n        if (item == null)\n            return;\n        try\n        {\n            icon = icon + \"_active\";\n            if (item?.SelectedImage?.AccessibilityIdentifier == icon)\n                return;\n            item.SelectedImage = UIImage.FromBundle(icon);\n            item.SelectedImage.AccessibilityIdentifier = icon;\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(\"Unable to set selected icon: \" + ex);\n        }\n    }\n}\n{% endhighlight %}  \n\nY básicamente eso es todo, no se requiere de más gracias a la API que nos otorga iOS y a la la propiedad `SelectedImage`.\n\n## Android  \nPara Android el *renderer* del que debemos derivar es `TabbedPageRenderer`... sí, distinto al de iOS:  \n\n{% highlight csharp %}\npublic class PlatformTabbedPageRenderer : TabbedPageRenderer\n{% endhighlight %}    \n\nSe necesitan unas cuantas propiedades para preservar los colores por default:\n\n{% highlight csharp %}\nPlatformTabbedPage FormsTabbedPage => Element as PlatformTabbedPage;\nAndroidColor _selectedColor = AndroidColor.Black;\nAndroidColor DefaultUnselectedColor = FormsColor.Gray.Darken().ToAndroid();\nstatic AndroidColor BarBackgroundDefault;\nAndroidColor _unselectedColor = DefaultUnselectedColor;\n{% endhighlight %}  \n\nEn Android una página de pestñas está compuesta normalmente por un par de elementos independientes: un `ViewPager` y un `TabLayout` que se coordinan entre ellos para funcionar como un solo control, al ser parte central de este *renderer*  también necesitamos tener una referencia a ellos a nivel de clase:  \n\n{% highlight csharp %}\nViewPager _viewPager;\nTabLayout _tabLayout;\n{% endhighlight %}  \n\nAhora, dentro del importantísimo método `OnElementChanged` obtendremos las referencias el par de controles declarados arriba. El renderer contiene ambos, sin embargo no los tiene directamente accesibles si no que son del tipo `View`, es por eso que se usa `is` para identificarlos y después hacer el *cast* de manera segura:\n\n{% highlight csharp %}\nfor (int i = 0; i < ChildCount; i++)\n{\n    var v = GetChildAt(i);\n    if (v is ViewPager)\n        _viewPager = (ViewPager)v;\n    else if (v is TabLayout)\n        _tabLayout = (TabLayout)v;\n}\n{% endhighlight %}  \n\nObtenemos el color por default y establecemos los colores de la barra:   \n\n{% highlight csharp %}\nBarBackgroundDefault = (_tabLayout.Background as ColorDrawable)?.Color ?? Android.Graphics.Color.Green;\nSetSelectedColor();\nSetBarBackgroundColor();\n{% endhighlight %}  \n\nA diferencia de iOS, en Android tendremos que hacer uso de un par de métodos que son llamados cada vez que se selecciona/deselecciona una *tab*, es por eso que también son asignados dentro de el método principal:\n\n{% highlight csharp %}\n_tabLayout.TabSelected += TabLayout_TabSelected;\n_tabLayout.TabUnselected += TabLayout_TabUnselected;\n{% endhighlight %}  \n\nPor último establecemos el color de todos los íconos en la barra de pestañas, y marcamos cono seleccionado el primer elemento mediante un pequeño método auxiliar:  \n\n{% highlight csharp %}\nSetupTabColors();\nSelectTab(0);\n{% endhighlight %}  \n\nAhora si, la \"magia\" de los métodos que son llamados cuando se slecciona o deselecciona una pestaña: básicamente consiste en aplicar un filtro de color al ícono de la tab seleccionada, y dependiendo de qué método se haya llamado aplicar el color adecuado:  \n\n{% highlight csharp %}\nprivate void TabLayout_TabUnselected(object sender, TabLayout.TabUnselectedEventArgs e)\n{\n    var tab = e.Tab;\n    tab.Icon?.SetColorFilter(_unselectedColor, PorterDuff.Mode.SrcIn);\n}\n\nprivate void TabLayout_TabSelected(object sender, TabLayout.TabSelectedEventArgs e)\n{\n    var tab = e.Tab;\n    tab.Icon?.SetColorFilter(_selectedColor, PorterDuff.Mode.SrcIn);\n}\n{% endhighlight %}  \n\nY eso es todo... básicamente el renderer de Android es un poco más complicado que el de iOS, pero nada que sea del otro mundo.  \n\n"
}