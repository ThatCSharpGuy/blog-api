{	
	"id" : "/post/formatted-number-entry/",
	"tv" : false,
	"date": "2016-08-01 03:00:00 -0500",
	"title" : "Formatted number entry",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//xamarin-forms/formattednumberentry/featured.png",
	"tags" :
	[ 
		"XamarinForms",
		"Xamarin"
	],
	"content" : "<p>While developing an app using Xamarin.Forms I faced with the necessity of having a “formatted textbox” where the user could enter a given integer number and have it formatted instantly to a comma separated number, for example: <code>1234567</code> → <code>1,234,567</code>, because our users often found themselves counting the number of zeros they had entered into the small textbox.</p>

<p>This doesn’t sound too complicated (and it isn’t). Using an <code>Entry</code> we can easily hook up to the <code>TextChanged</code> event and perform the following tasks:</p>

<ol>
  <li>Stop listening for changes on our <code>Entry</code> <code>Text</code> property</li>
  <li>Take the <code>Entry</code> text, lets name it <code>oldText</code></li>
  <li>Parse <code>oldText</code> into a number, lets name it <code>number</code></li>
  <li>Format <code>number</code>, and place the formatted text in <code>newText</code></li>
  <li>Set the <code>Text</code> property of our entry to <code>newText</code></li>
  <li>Start listening for changes on our <code>Entry</code> <code>Text</code> property</li>
</ol>

<p>I don’t want to wire/unwire the event handler every time I use it, so let’s create a control that inherits from <code>Entry</code> and override the <code>OnPropertyChanged</code> method:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">FormattedNumberEntry</span> <span class="p">:</span> <span class="n">Entry</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnPropertyChanged</span><span class="p">(</span><span class="kt">string</span> <span class="n">propertyName</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">nameof</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">Text</span><span class="p">).</span><span class="n">Equals</span><span class="p">(</span><span class="n">propertyName</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">_shouldReactToTextChange</span><span class="p">)</span> <span class="k">return</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>        <span class="n">_shouldReactToTextChange</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>

        <span class="kt">var</span> <span class="n">oldText</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
        <span class="kt">var</span> <span class="n">number</span> <span class="p">=</span> <span class="n">DumbParse</span><span class="p">(</span><span class="n">oldText</span><span class="p">);</span>
        <span class="kt">var</span> <span class="n">newText</span> <span class="p">=</span> <span class="err">$\</span><span class="s">&quot;{number:#,###}\&quot;;</span>

        <span class="k">this</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">newText</span><span class="p">;</span>

        <span class="n">_shouldReactToTextChange</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">base</span><span class="p">.</span><span class="n">OnPropertyChanged</span><span class="p">(</span><span class="n">propertyName</span><span class="p">);</span>
<span class="p">}</span> <span class="p">}</span> </code></pre></figure>  
</code></pre>

<p>By the way, you see that <code>DumbParse</code> method there? it is just that, a dumb parsing method that ignores non-digit chars:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">DumbParse</span><span class="p">(</span><span class="kt">string</span> <span class="n">input</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">var</span> <span class="n">number</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">multiply</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">input</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&amp;</span><span class="n">gt</span><span class="p">;=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span><span class="err">–</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">Char</span><span class="p">.</span><span class="n">IsDigit</span><span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>
        <span class="p">{</span>
            <span class="n">number</span> <span class="p">+=</span> <span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">-</span> <span class="err">‘</span><span class="m">0</span><span class="err">’</span><span class="p">)</span> <span class="p">*</span> <span class="p">(</span><span class="n">multiply</span><span class="p">);</span>
            <span class="n">multiply</span> <span class="p">*=</span> <span class="m">10</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">number</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure></p>

<p>This is the final result:</p>

<p><img src=\"http://i.giphy.com/1zNrHjJ4dawbm.gif\" /></p>

<p>Thhat’s it, we’re done.</p>

<h2 id=\"noooooo-wait\">Noooooo, wait.</h2>

<p>Even though we may think that our mission was accomplished, our brand new control lacks of a good user experience. For example, see what happens when the user tries to erase a number located in the middle:</p>

<p><figure><img src='/postimages/post/formatted-number-entry/post.jsoncareterror.png' alt='“Error” images_set' /></figure></p>

<p>See how the cursor jumps to the end (or start, depends on the platform)? the same happens after writing a number. Let’s fix that.</p>

<h2 id=\"problem\">Problem</h2>

<p><code>Entry</code> doesn’t have a <code>CursorPosition</code> property so we need to create a simple <a href=\"https://developer.xamarin.com/guides/xamarin-forms/custom-renderer/\" target=\"_blank\" rel=\"nofollow\">custom renderer</a> since only at native level the underlying controls expose such information. In this case, we will attach an event handler to each platform specific <em>TextChanged</em> event and inside such handler we need to:</p>

<ol>
  <li>Stop listening for changes on our control’s <code>Text</code> property</li>
  <li>Get the current cursor position</li>
  <li>Take the control’s text, lets name it <code>oldText</code></li>
  <li>Parse <code>oldText</code> into a number, lets name it <code>number</code></li>
  <li>Format <code>number</code>, and place the formatted text in <code>newText</code></li>
  <li>Set the <code>Text</code> property of our control to <code>newText</code></li>
  <li>Calculate the new cursor position</li>
  <li>Set the new cursor position</li>
  <li>Start listening for changes on our control’s <code>Text</code> property</li>
</ol>

<h3 id=\"ios\">iOS</h3>
<p>For iOS we will subscribe to the <code>EditingChanged</code> event and work all our magic there:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">FormattedNumberEntryRenderer</span> <span class="p">:</span> <span class="n">EntryRenderer</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnElementChanged</span><span class="p">(</span><span class="n">ElementChangedEventArgs</span><span class="p">&lt;</span><span class="n">entry</span><span class="p">&gt;</span> <span class="n">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">base</span><span class="p">.</span><span class="n">OnElementChanged</span><span class="p">(</span><span class="n">e</span><span class="p">);&lt;/</span><span class="n">entry</span><span class="p">&gt;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">OldElement</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Control</span><span class="p">.</span><span class="n">EditingChanged</span> <span class="p">-=</span> <span class="n">Control_EditingChanged</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">NewElement</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Control</span><span class="p">.</span><span class="n">EditingChanged</span> <span class="p">+=</span> <span class="n">Control_EditingChanged</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span> </code></pre></figure>  
</code></pre>

<p>Now, in the <code>Control_EditingChanged</code>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">element</span> <span class="p">=</span> <span class="p">((</span><span class="n">FormattedNumberEntry</span><span class="p">)</span><span class="n">Element</span><span class="p">);</span>
<span class="c1">// Oh boy, thank you internet: http://stackoverflow.com/a/34922332&lt;/p&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 1. Stop listening for changes on our control Text property</span>
<span class="k">if</span> <span class="p">(!</span><span class="n">element</span><span class="p">.</span><span class="n">ShouldReactToTextChanges</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
<span class="n">element</span><span class="p">.</span><span class="n">ShouldReactToTextChanges</span> <span class="p">=</span> <span class="k">false</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 2. Get the current cursor position</span>
<span class="kt">var</span> <span class="n">selectedRange</span> <span class="p">=</span> <span class="n">Control</span><span class="p">.</span><span class="n">SelectedTextRange</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 3. Take the control’s text, lets name it oldText</span>
<span class="kt">var</span> <span class="n">oldText</span> <span class="p">=</span> <span class="n">Control</span><span class="p">.</span><span class="n">Text</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 4. Parse oldText into a number, lets name it number</span>
<span class="kt">var</span> <span class="n">number</span> <span class="p">=</span> <span class="n">FormattedNumberEntry</span><span class="p">.</span><span class="n">DumbParse</span><span class="p">(</span><span class="n">oldText</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 5. Format number, and place the formatted text in newText</span>
<span class="kt">var</span> <span class="n">newText</span> <span class="p">=</span> <span class="err">$”</span><span class="p">{</span><span class="n">number</span><span class="p">:</span><span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0</span><span class="p">}</span><span class="err">”</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 6. Set the Text property of our control to newText</span>
<span class="n">Control</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">newText</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 7. Calculate the new cursor position</span>
<span class="kt">var</span> <span class="n">change</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span> <span class="p">*</span> <span class="p">(</span><span class="n">oldText</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="n">newText</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">newPosition</span> <span class="p">=</span> <span class="n">Control</span><span class="p">.</span><span class="n">GetPosition</span><span class="p">(</span><span class="n">selectedRange</span><span class="p">.</span><span class="n">Start</span><span class="p">,</span> <span class="p">(</span><span class="n">nint</span><span class="p">)</span><span class="n">change</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 8. Set the new cursor position</span>
<span class="k">if</span> <span class="p">(</span><span class="n">newPosition</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="c1">// before we fail miserably</span>
<span class="p">{</span>
    <span class="n">Control</span><span class="p">.</span><span class="n">SelectedTextRange</span> <span class="p">=</span> <span class="n">Control</span><span class="p">.</span><span class="n">GetTextRange</span><span class="p">(</span><span class="n">newPosition</span><span class="p">,</span> <span class="n">newPosition</span><span class="p">);</span>
<span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 9. Start listening for changes on our control’s Text property</span>
<span class="n">element</span><span class="p">.</span><span class="n">ShouldReactToTextChanges</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span></code></pre></figure></p>

<p>Now works great:</p>

<p><figure><img src='/postimages/post/formatted-number-entry/post.jsoniosgood.gif' alt='“iOS working goooooood” images_set' /></figure></p>

<h3 id=\"android\">Android</h3>
<p>For Android we will subscribe to the <code>AfterTextChanged</code> event and create all the formatting there:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">FormattedNumberEntryRenderer</span> <span class="p">:</span> <span class="n">EntryRenderer</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnElementChanged</span><span class="p">(</span><span class="n">ElementChangedEventArgs</span><span class="p">&lt;</span><span class="n">entry</span><span class="p">&gt;</span> <span class="n">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">base</span><span class="p">.</span><span class="n">OnElementChanged</span><span class="p">(</span><span class="n">e</span><span class="p">);&lt;/</span><span class="n">entry</span><span class="p">&gt;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">OldElement</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Control</span><span class="p">.</span><span class="n">AfterTextChanged</span> <span class="p">-=</span> <span class="n">Control_AfterTextChanged</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">NewElement</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Control</span><span class="p">.</span><span class="n">AfterTextChanged</span> <span class="p">+=</span> <span class="n">Control_AfterTextChanged</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span> </code></pre></figure>  
</code></pre>

<p>And then in the <code>Control_AfterTextChanged</code> implementation:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">element</span> <span class="p">=</span> <span class="p">((</span><span class="n">FormattedNumberEntry</span><span class="p">)</span><span class="n">Element</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 1. Stop listening for changes on our control Text property</span>
<span class="k">if</span> <span class="p">(!</span><span class="n">element</span><span class="p">.</span><span class="n">ShouldReactToTextChanges</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
<span class="n">element</span><span class="p">.</span><span class="n">ShouldReactToTextChanges</span> <span class="p">=</span> <span class="k">false</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 2. Get the current cursor position</span>
<span class="kt">var</span> <span class="n">cursorPosition</span> <span class="p">=</span> <span class="n">Control</span><span class="p">.</span><span class="n">SelectionStart</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 3. Take the control’s text, lets name it oldText</span>
<span class="kt">var</span> <span class="n">oldText</span> <span class="p">=</span> <span class="n">Control</span><span class="p">.</span><span class="n">Text</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 4. Parse oldText into a number, lets name it number</span>
<span class="kt">var</span> <span class="n">number</span> <span class="p">=</span> <span class="n">FormattedNumberEntry</span><span class="p">.</span><span class="n">DumbParse</span><span class="p">(</span><span class="n">oldText</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 5. Format number, and place the formatted text in newText</span>
<span class="kt">var</span> <span class="n">newText</span> <span class="p">=</span> <span class="err">$”</span><span class="p">{</span><span class="n">number</span><span class="p">:</span><span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0</span><span class="p">}</span><span class="err">”</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 6. Set the Text property of our control to newText</span>
<span class="n">Control</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">newText</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 7. Calculate the new cursor position</span>
<span class="kt">var</span> <span class="n">change</span> <span class="p">=</span> <span class="n">oldText</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="n">newText</span><span class="p">.</span><span class="n">Length</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 8. Set the new cursor position</span>
<span class="n">Control</span><span class="p">.</span><span class="n">SetSelection</span><span class="p">(</span><span class="n">cursorPosition</span> <span class="p">-</span> <span class="n">change</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 9. Start listening for changes on our control’s Text property</span>
<span class="n">element</span><span class="p">.</span><span class="n">ShouldReactToTextChanges</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span></code></pre></figure></p>

<p>Here is the final result</p>

<p><figure><img src='/postimages/post/formatted-number-entry/post.jsonandroidgood.gif' alt='“Android working goooooood” images_set' /></figure></p>

<h3 id=\"universal-windows-platform\">Universal Windows Platform</h3>

<p>For the Windows platforms we need to handle the <code>TextChanged</code> event:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">FormattedNumberEntryRenderer</span> <span class="p">:</span> <span class="n">EntryRenderer</span>
<span class="p">{</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnElementChanged</span><span class="p">(</span><span class="n">ElementChangedEventArgs</span><span class="p">&lt;</span><span class="n">entry</span><span class="p">&gt;</span> <span class="n">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">base</span><span class="p">.</span><span class="n">OnElementChanged</span><span class="p">(</span><span class="n">e</span><span class="p">);&lt;/</span><span class="n">entry</span><span class="p">&gt;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">OldElement</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Control</span><span class="p">.</span><span class="n">TextChanged</span> <span class="p">-=</span> <span class="n">Control_TextChanged</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">NewElement</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Control</span><span class="p">.</span><span class="n">TextChanged</span> <span class="p">+=</span> <span class="n">Control_TextChanged</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span> </code></pre></figure>  
</code></pre>

<p>Then in <code>Control_Text</code> changed:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">element</span> <span class="p">=</span> <span class="p">((</span><span class="n">FormattedNumberEntry</span><span class="p">)</span><span class="n">Element</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 1. Stop listening for changes on our control Text property</span>
<span class="k">if</span> <span class="p">(!</span><span class="n">element</span><span class="p">.</span><span class="n">ShouldReactToTextChanges</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
<span class="n">element</span><span class="p">.</span><span class="n">ShouldReactToTextChanges</span> <span class="p">=</span> <span class="k">false</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 2. Get the current cursor position</span>
<span class="kt">var</span> <span class="n">cursorPosition</span> <span class="p">=</span> <span class="n">Control</span><span class="p">.</span><span class="n">SelectionStart</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 3. Take the control’s text, lets name it oldText</span>
<span class="kt">var</span> <span class="n">oldText</span> <span class="p">=</span> <span class="n">Control</span><span class="p">.</span><span class="n">Text</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 4. Parse oldText into a number, lets name it number</span>
<span class="kt">var</span> <span class="n">number</span> <span class="p">=</span> <span class="n">FormattedNumberEntry</span><span class="p">.</span><span class="n">DumbParse</span><span class="p">(</span><span class="n">oldText</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 5. Format number, and place the formatted text in newText</span>
<span class="kt">var</span> <span class="n">newText</span> <span class="p">=</span> <span class="err">$”</span><span class="p">{</span><span class="n">number</span><span class="p">:</span><span class="err">#</span><span class="p">,</span><span class="err">##</span><span class="m">0</span><span class="p">}</span><span class="err">”</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 6. Set the Text property of our control to newText</span>
<span class="n">Control</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">newText</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 7. Calculate the new cursor position</span>
<span class="kt">var</span> <span class="n">change</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span> <span class="p">*</span> <span class="p">(</span><span class="n">oldText</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="n">newText</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">cursorPosition</span> <span class="p">+</span> <span class="n">change</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="m">0</span><span class="p">)</span>
    <span class="n">change</span> <span class="p">=</span> <span class="m">0</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 8. Set the new cursor position</span>
<span class="n">Control</span><span class="p">.</span><span class="n">SelectionStart</span> <span class="p">=</span> <span class="n">cursorPosition</span> <span class="p">+</span> <span class="n">change</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="c1">// 9. Start listening for changes on our control’s Text property</span>
<span class="n">element</span><span class="p">.</span><span class="n">ShouldReactToTextChanges</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span></code></pre></figure></p>

<p>And <em>voilà</em>:</p>

<p><figure><img src='/postimages/post/formatted-number-entry/post.jsonuwpgood.gif' alt='“Android working goooooood” images_set' /></figure></p>

<h2 id=\"wrapping-up\">Wrapping up</h2>
<p>I know, I know, it might seem like a lot of code for such a <em>simple</em> task, yet, I couldn’t find how to do it “natively” let alone using Forms. This kind of small details improve the user experience of our apps and aren’t too complicated to implement. As always, feel free to browse the code (<a href=\"https://github.com/ThatCSharpGuy/FormattedNumberEntry\" target=\"_blank\">available on GitHub</a>) or <em>tweemail</em> me if in doubt.</p>

<h2 id=\"future-improvements\">Future improvements</h2>
<p>This control isn’t perfect, it has a lot of room for improvements:</p>

<ul>
  <li>Modify the parsing algorithm to allow bigger numbers to be input</li>
  <li>Allow decimal numbers</li>
  <li>Save at control level the parsed number. Currently anyone interested in getting the integer value from the control will have to parse the text.</li>
  <li>The <em>convert-to-string</em> method may have issues with globalization</li>
</ul>

<p>So go ahead and have cross-platform fun.</p>
"
}