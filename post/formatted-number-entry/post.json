{	
	"id" : "/post/formatted-number-entry/",
	"tv" : false,
	"date": "2016-08-01 03:00:00 -0500",
	"title" : "Formatted number entry",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//xamarin-forms/formattednumberentry/featured.png",
	"tags" : ["XamarinForms","Xamarin"],
	"content": "<p>While developing an app using Xamarin.Forms I faced with the necessity of having a “formatted textbox” where the user could enter a given integer number and have it formatted instantly to a comma separated number, for example: <code>1234567</code> → <code>1,234,567</code>, because our users often found themselves counting the number of zeros they had entered into the small textbox.</p>\n\n<p>This doesn’t sound too complicated (and it isn’t). Using an <code>Entry</code> we can easily hook up to the <code>TextChanged</code> event and perform the following tasks:</p>\n\n<ol>\n  <li>Stop listening for changes on our <code>Entry</code> <code>Text</code> property</li>\n  <li>Take the <code>Entry</code> text, lets name it <code>oldText</code></li>\n  <li>Parse <code>oldText</code> into a number, lets name it <code>number</code></li>\n  <li>Format <code>number</code>, and place the formatted text in <code>newText</code></li>\n  <li>Set the <code>Text</code> property of our entry to <code>newText</code></li>\n  <li>Start listening for changes on our <code>Entry</code> <code>Text</code> property</li>\n</ol>\n\n<p>I don’t want to wire/unwire the event handler every time I use it, so let’s create a control that inherits from <code>Entry</code> and override the <code>OnPropertyChanged</code> method:</p>\n\n<pre class=\"csharp\">\npublic class FormattedNumberEntry : Entry\n\n    protected override void OnPropertyChanged(string propertyName = null)\n    \n        if (nameof(this.Text).Equals(propertyName))\n        \n            if (!_shouldReactToTextChange) return;\n\n            _shouldReactToTextChange = false;\n\n            var oldText = this.Text;\n            var number = DumbParse(oldText);\n            var newText = $\"number:#,###\";\n\n            this.Text = newText;\n\n            _shouldReactToTextChange = true;\n        \n        base.OnPropertyChanged(propertyName);\n    \n\n</pre>\n\n<p>By the way, you see that <code>DumbParse</code> method there? it is just that, a dumb parsing method that ignores non-digit chars:</p>\n\n<pre class=\"csharp\">\npublic static int DumbParse(string input)\n\n    var number = 0;\n    int multiply = 1;\n    for (int i = input.Length - 1; i &gt;= 0; i--)\n    \n        if (Char.IsDigit(input[i]))\n        \n            number += (input[i] - '0') * (multiply);\n            multiply *= 10;\n        \n    \n    return number;\n\n</pre>\n\n<p>This is the final result:</p>\n\n<p><img src=\"http://i.giphy.com/1zNrHjJ4dawbm.gif\" /></p>\n\n<p>Thhat’s it, we’re done.</p>\n\n<h2 id=\"noooooo-wait\">Noooooo, wait.</h2>\n\n<p>Even though we may think that our mission was accomplished, our brand new control lacks of a good user experience. For example, see what happens when the user tries to erase a number located in the middle:</p>\n\n<p>post_image careterror.png “Error”</p>\n\n<p>See how the cursor jumps to the end (or start, depends on the platform)? the same happens after writing a number. Let’s fix that.</p>\n\n<h2 id=\"problem\">Problem</h2>\n\n<p><code>Entry</code> doesn’t have a <code>CursorPosition</code> property so we need to create a simple <a href=\"https://developer.xamarin.com/guides/xamarin-forms/custom-renderer/\" target=\"_blank\" rel=\"nofollow\">custom renderer</a> since only at native level the underlying controls expose such information. In this case, we will attach an event handler to each platform specific <em>TextChanged</em> event and inside such handler we need to:</p>\n\n<ol>\n  <li>Stop listening for changes on our control’s <code>Text</code> property</li>\n  <li>Get the current cursor position</li>\n  <li>Take the control’s text, lets name it <code>oldText</code></li>\n  <li>Parse <code>oldText</code> into a number, lets name it <code>number</code></li>\n  <li>Format <code>number</code>, and place the formatted text in <code>newText</code></li>\n  <li>Set the <code>Text</code> property of our control to <code>newText</code></li>\n  <li>Calculate the new cursor position</li>\n  <li>Set the new cursor position</li>\n  <li>Start listening for changes on our control’s <code>Text</code> property</li>\n</ol>\n\n<h3 id=\"ios\">iOS</h3>\n<p>For iOS we will subscribe to the <code>EditingChanged</code> event and work all our magic there:</p>\n\n<pre class=\"csharp\">\npublic class FormattedNumberEntryRenderer : EntryRenderer\n\n    protected override void OnElementChanged(ElementChangedEventArgs<entry> e)\n    \n        base.OnElementChanged(e);\n\n        if (e.OldElement != null)\n        \n            Control.EditingChanged -= Control_EditingChanged;\n        \n        if (e.NewElement != null)\n        \n            Control.EditingChanged += Control_EditingChanged;\n        \n    \n  \n\nNow, in the `Control_EditingChanged`: \n\n<pre class=\"csharp\">\nvar element = ((FormattedNumberEntry)Element);\n// Oh boy, thank you internet: http://stackoverflow.com/a/34922332\n\n// 1. Stop listening for changes on our control Text property\nif (!element.ShouldReactToTextChanges) return;\nelement.ShouldReactToTextChanges = false;\n\n// 2. Get the current cursor position\nvar selectedRange = Control.SelectedTextRange;\n\n// 3. Take the control’s text, lets name it oldText\nvar oldText = Control.Text;\n\n// 4. Parse oldText into a number, lets name it number\nvar number = FormattedNumberEntry.DumbParse(oldText);\n\n// 5. Format number, and place the formatted text in newText\nvar newText = $\"number:#,##0\";\n\n// 6. Set the Text property of our control to newText\nControl.Text = newText;\n\n// 7. Calculate the new cursor position\nvar change = -1 * (oldText.Length - newText.Length);\nvar newPosition = Control.GetPosition(selectedRange.Start, (nint)change);\n\n// 8. Set the new cursor position\nif (newPosition != null) // before we fail miserably\n\n    Control.SelectedTextRange = Control.GetTextRange(newPosition, newPosition);\n\n\n// 9. Start listening for changes on our control’s Text property\nelement.ShouldReactToTextChanges = true;\n</pre>  \n\nNow works great: \n\n post_image iosgood.gif \"iOS working goooooood\" \n\n### Android\nFor Android we will subscribe to the `AfterTextChanged` event and create all the formatting there:\n\n<pre class=\"csharp\">\npublic class FormattedNumberEntryRenderer : EntryRenderer\n\n    protected override void OnElementChanged(ElementChangedEventArgs<entry> e)\n    \n        base.OnElementChanged(e);\n\n        if (e.OldElement != null)\n        \n            Control.AfterTextChanged -= Control_AfterTextChanged;\n        \n        if (e.NewElement != null)\n        \n            Control.AfterTextChanged += Control_AfterTextChanged;\n        \n    \n  \n\nAnd then in the `Control_AfterTextChanged` implementation:\n\n<pre class=\"csharp\">\nvar element = ((FormattedNumberEntry)Element);\n\n// 1. Stop listening for changes on our control Text property\nif (!element.ShouldReactToTextChanges) return;\nelement.ShouldReactToTextChanges = false;\n\n// 2. Get the current cursor position\nvar cursorPosition = Control.SelectionStart;\n\n// 3. Take the control’s text, lets name it oldText\nvar oldText = Control.Text;\n\n// 4. Parse oldText into a number, lets name it number\nvar number = FormattedNumberEntry.DumbParse(oldText);\n\n// 5. Format number, and place the formatted text in newText\nvar newText = $\"number:#,##0\";\n\n// 6. Set the Text property of our control to newText\nControl.Text = newText;\n\n// 7. Calculate the new cursor position\nvar change = oldText.Length - newText.Length;\n\n// 8. Set the new cursor position\nControl.SetSelection(cursorPosition - change);\n\n// 9. Start listening for changes on our control’s Text property\nelement.ShouldReactToTextChanges = true;\n</pre>   \n\nHere is the final result\n\n post_image androidgood.gif \"Android working goooooood\" \n\n### Universal Windows Platform  \n\nFor the Windows platforms we need to handle the `TextChanged` event:\n\n<pre class=\"csharp\">\npublic class FormattedNumberEntryRenderer : EntryRenderer\n\n    protected override void OnElementChanged(ElementChangedEventArgs<entry> e)\n    \n        base.OnElementChanged(e);\n\n        if (e.OldElement != null)\n        \n            Control.TextChanged -= Control_TextChanged;\n        \n        if (e.NewElement != null)\n        \n            Control.TextChanged += Control_TextChanged;\n        \n    \n  \n\nThen in `Control_Text` changed:  \n\n<pre class=\"csharp\">\nvar element = ((FormattedNumberEntry)Element);\n\n// 1. Stop listening for changes on our control Text property\nif (!element.ShouldReactToTextChanges) return;\nelement.ShouldReactToTextChanges = false;\n\n// 2. Get the current cursor position\nvar cursorPosition = Control.SelectionStart;\n\n// 3. Take the control’s text, lets name it oldText\nvar oldText = Control.Text;\n\n// 4. Parse oldText into a number, lets name it number\nvar number = FormattedNumberEntry.DumbParse(oldText);\n\n// 5. Format number, and place the formatted text in newText\nvar newText = $\"number:#,##0\";\n\n// 6. Set the Text property of our control to newText\nControl.Text = newText;\n\n// 7. Calculate the new cursor position\nvar change = -1 * (oldText.Length - newText.Length);\nif (cursorPosition + change &lt; 0)\n    change = 0;\n\n// 8. Set the new cursor position\nControl.SelectionStart = cursorPosition + change;\n\n// 9. Start listening for changes on our control’s Text property\nelement.ShouldReactToTextChanges = true;\n</pre>  \n\nAnd *voilà*:\n\n post_image uwpgood.gif \"Android working goooooood\" \n\n## Wrapping up  \nI know, I know, it might seem like a lot of code for such a *simple* task, yet, I couldn't find how to do it \"natively\" let alone using Forms. This kind of small details improve the user experience of our apps and aren't too complicated to implement. As always, feel free to browse the code (<a href=\"https://github.com/ThatCSharpGuy/FormattedNumberEntry\" target=\"_blank\">available on GitHub</a>) or *tweemail* me if in doubt.  \n\n## Future improvements\nThis control isn't perfect, it has a lot of room for improvements:\n\n - Modify the parsing algorithm to allow bigger numbers to be input\n - Allow decimal numbers\n - Save at control level the parsed number. Currently anyone interested in getting the integer value from the control will have to parse the text.\n - The *convert-to-string* method may have issues with globalization \n\nSo go ahead and have cross-platform fun.\n</entry></pre></entry></pre></entry></pre>\n"
}