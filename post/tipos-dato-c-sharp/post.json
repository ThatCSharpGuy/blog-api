{	
	"id" : "/post/tipos-dato-c-sharp/",
	"tv" : false,
	"date": "2015-10-05 17:00:00 -0500",
	"title" : "Tipos de dato en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimagesfeatured.jpg",
	"tags" :
	[ 
		"AprendeCSharp"
	],
	"content" : "<p>Para fines de este post, diremos que C# es un lenguaje fuertemente tipado (aunque ya permite tipado dinámico y eso lo palticaré en otro post), lo que significa que cada variable, literal o constante debe tener un tipo declarado y dicho tipo no cambiará con el flujo del programa. Dentro de los tipos que ofrece C#, podemos encontrar dos grandes categorías:</p>

<h3 id=\"predefinidos\">Predefinidos</h3>
<p>Son los tipos que el lenguaje incorpora para almacenar valores comunes, entre ellos:</p>

<ul>
  <li><code>bool</code> para valores binarios, como un <em>sí</em> o <em>no</em>, o <code>1</code> o <code>0</code></li>
  <li><code>int</code> para valores enteros, que puede ir de <code>-2,147,483,648</code> a <code>2,147,483,647</code></li>
  <li><code>char</code> para caracteres como <code>a</code>, <code>@</code> o <code>%</code></li>
  <li><code>string</code> para una secuencia de caracteres</li>
</ul>

<p>La lista la completan: <code>byte</code>, <code>decimal</code>, <code>float</code>, <code>long</code>, <code>sbyte</code>, <code>short</code>, <code>uint</code>, <code>ulong</code>, <code>ushort</code> y <code>object</code>.</p>

<p>A partir de estos tipos de dato se pueden crear otros tipos con la finalidad de satisfacer nuestras necesidades.</p>

<h3 id=\"compuestos\">Compuestos</h3>
<p>Los tipos compuestos están formados a partir de los tipos predefinidos y nos ayudarán a modelar de manera más real los problemas con los que nos encontremos. Estos se crean usando las  palabras reservadas <code>interface</code>, <code>struct</code>, <code>enum</code> y <code>class</code>.</p>

<p>Otra clasificación que podemos definir, es la siguiente, que clasifica los tipos de dato de acuerdo a como se gestionan en la memoria:</p>

<h3 id=\"referencia\">Referencia</h3>
<p>Se almacena en ellos una referencia a los datos, por ejemplo un tipo de dato <code>class</code> o <code>string</code>.</p>

<h3 id=\"valor\">Valor</h3>
<p>Almacenan el valor del dato por completo, por ejemplo <code>struct</code> y <code>enum</code>.</p>

<h2 id=\"ejemplo\">Ejemplo</h2>
<p>Para ilustrar esta última categoría, tomemos el siguiente ejemplo:</p>

<div class=\"pure-g\">
<div class=\"pure-u-1-2\">
<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp">  
<span class="k">struct</span> <span class="nc">Tiempo</span> 
<span class="p">{</span>
	<span class="k">public</span> <span class="kt">int</span> <span class="n">Minutos</span><span class="p">;</span>
	<span class="k">public</span> <span class="kt">int</span> <span class="n">Horas</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// ...  </span>
<span class="n">Tiempo</span> <span class="n">t1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Tiempo</span><span class="p">();</span>
<span class="n">Tiempo</span> <span class="n">t2</span> <span class="p">=</span> <span class="n">t1</span><span class="p">;</span></code></pre></figure>	
</div>
<div class=\"pure-u-1-2\">
<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp">  
<span class="k">class</span> <span class="nc">Tiempo</span> 
<span class="p">{</span>
	<span class="k">public</span> <span class="kt">int</span> <span class="n">Minutos</span><span class="p">;</span>
	<span class="k">public</span> <span class="kt">int</span> <span class="n">Horas</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// ...  </span>
<span class="n">Tiempo</span> <span class="n">t1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Tiempo</span><span class="p">();</span>
<span class="n">Tiempo</span> <span class="n">t2</span> <span class="p">=</span> <span class="n">t1</span><span class="p">;</span></code></pre></figure>	
</div>  
</div>
<div class=\"pure-g\">
<div class=\"pure-u-1-2\">
<figure><img src='/postimages/post/tipos-dato-c-sharp/post.jsonvalue-type.png' alt='Tipos por valor images_set' /></figure>
</div>
<div class=\"pure-u-1-2\">
<figure><img src='/postimages/post/tipos-dato-c-sharp/post.jsonreference-type.png' alt='Tipos por valor images_set' /></figure>
</div>  
</div>
<p><br />
Las imagenes debajo de los códigos tienen la intención de mostrar una simple representación de lo que pasa al ejecutar el código. Al hacer <code>t2 == t1</code> sobre la estructura de Tiempo, al ser un un <em>tipo por valor</em> se crea una copia, lo cual significa que cualquier modificación que se haga a <code>t1</code> no provocará ningún cambio sobre <code>t2</code>.<br />
Por otro lado, en el caso de la clase Tiempo, si se hiciera alguna modificación sobre <code>t2</code>, <code>t1</code> también se vería afectado al ser un <em>tipo de referencia</em>.</p>

<p><br />
En futuros post seguré explorando algunos detalles escenciales de C#, como arreglos, métodos y clases.</p>
"
}