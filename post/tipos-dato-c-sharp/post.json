{	
	"id" : "/post/tipos-dato-c-sharp/",
	"tv" : false,
	"date": "2015-10-05 17:00:00 -0500",
	"title" : "Tipos de dato en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimagesfeatured.jpg",
	"tags" : ["AprendeCSharp"],
	  
	"content": '"Para fines de este post, diremos que C# es un lenguaje fuertemente tipado (aunque ya permite tipado dinámico y eso lo palticaré en otro post), lo que significa que cada variable, literal o constante debe tener un tipo declarado y dicho tipo no cambiará con el flujo del programa. Dentro de los tipos que ofrece C#, podemos encontrar dos grandes categorías:  \n\n### Predefinidos  \nSon los tipos que el lenguaje incorpora para almacenar valores comunes, entre ellos:  \n\n- `bool` para valores binarios, como un *sí* o *no*, o `1` o `0`  \n- `int` para valores enteros, que puede ir de `-2,147,483,648` a `2,147,483,647`  \n- `char` para caracteres como `a`, `@` o `%`  \n- `string` para una secuencia de caracteres  \n\nLa lista la completan: `byte`, `decimal`, `float`, `long`, `sbyte`, `short`, `uint`, `ulong`, `ushort` y `object`.  \n  \nA partir de estos tipos de dato se pueden crear otros tipos con la finalidad de satisfacer nuestras necesidades.  \n  \n### Compuestos    \nLos tipos compuestos están formados a partir de los tipos predefinidos y nos ayudarán a modelar de manera más real los problemas con los que nos encontremos. Estos se crean usando las  palabras reservadas `interface`, `struct`, `enum` y `class`.  \n  \nOtra clasificación que podemos definir, es la siguiente, que clasifica los tipos de dato de acuerdo a como se gestionan en la memoria:  \n  \n### Referencia  \nSe almacena en ellos una referencia a los datos, por ejemplo un tipo de dato `class` o `string`. \n  \n### Valor  \nAlmacenan el valor del dato por completo, por ejemplo `struct` y `enum`.  \n  \n## Ejemplo\nPara ilustrar esta última categoría, tomemos el siguiente ejemplo:  \n\n<div class=\"pure-g\">\n<div class=\"pure-u-1-2\">\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp">  <span class="err">\</span><span class="n">nstruct</span> <span class="n">Tiempo</span> <span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="kt">int</span> <span class="n">Minutos</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="kt">int</span> <span class="n">Horas</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="c1">// ...  \nTiempo t1 = new Tiempo();\nTiempo t2 = t1;\n</span></code></pre></figure>\t\n</div>\n<div class=\"pure-u-1-2\">\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp">  <span class="err">\</span><span class="n">nclass</span> <span class="n">Tiempo</span> <span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="kt">int</span> <span class="n">Minutos</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="kt">int</span> <span class="n">Horas</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="c1">// ...  \nTiempo t1 = new Tiempo();\nTiempo t2 = t1;\n</span></code></pre></figure>\t\n</div>  \n</div>  \n<div class=\"pure-g\">\n<div class=\"pure-u-1-2\">\n<figure><img src='/postimages/post/tipos-dato-c-sharp/post.jsonvalue-type.png' alt='Tipos por valor images_set' /></figure>\n</div>\n<div class=\"pure-u-1-2\">\n<figure><img src='/postimages/post/tipos-dato-c-sharp/post.jsonreference-type.png' alt='Tipos por valor images_set' /></figure>\n</div>  \n</div>  \n<br />\nLas imagenes debajo de los códigos tienen la intención de mostrar una simple representación de lo que pasa al ejecutar el código. Al hacer `t2 == t1` sobre la estructura de Tiempo, al ser un un *tipo por valor* se crea una copia, lo cual significa que cualquier modificación que se haga a `t1` no provocará ningún cambio sobre `t2`.  \nPor otro lado, en el caso de la clase Tiempo, si se hiciera alguna modificación sobre `t2`, `t1` también se vería afectado al ser un *tipo de referencia*.  \n  \n<br />\nEn futuros post seguré explorando algunos detalles escenciales de C#, como arreglos, métodos y clases.  \n"'   
}