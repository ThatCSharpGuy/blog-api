{	
	"id" : "/post/metodos-c-sharp/",
	"tv" : false,
	"date": "2016-04-11 14:00:00 -0500",
	"title" : "Métodos en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/metodos.png",
	"tags" : ["AprendeCSharp"],
	"content": "Un sistema robusto programado en un lenguaje de programación orientado a objetos, como es el caso de C#, debe estar separado en distintas unidades lógicas. Estas unidades lógicas suelen coordinarse mediante el envío de mensajes entre ellos, en C# dichos mensajes se llaman métodos.\n\n### Definición\n\n**Un método no es más que un procedimiento o acción asociado con una clase** y se compone de datos y un comportamiento. Esta es la sintaxis común para escribir un método:\n\n```\n[modificador de acceso] <tipo de retorno> <nombre>([parámetros])  \n\n    [implementación]  \n\n```\n\nLas partes marcadas con `[]` son opcionales y las que están entre `<>` son necesarias:\n\n<ol>\n<li><strong>modificador de acceso</strong>, es una palabra reservada que especifica cuales de los otros objetos tendrán acceso al método, puede ser:\n        <ul>\n            <li><code>public</code>. Todos tienen acceso.</li>\n            <li><code>protected</code>. Solo las clases derivadas tienen acceso.</li>\n            <li><code>internal</code>. Solo clases contenidas en el mismo ensamblado tienen acceso.</li>\n            <li><code>private</code>. Solo la clase que lo define tiene acceso él.</li>\n        </ul>\nAdemás, también podemos añadir el modificador <code>static</code> para especificar que un método debe ser llamado desde una instancia de la clase o desde la clase misma.\n<br />\nSi se omite, el valor por default es <code>private</code>.\n</li>\n<li><strong>tipo de retorno</strong>, se usa para declarar si el método retornará algo como parte de su ejecución. Los valores posibles pueden ser muchos, y dependen de la lógica del negocio. Un método puede regresar <a href=\"http://thatcsharpguy.com/post/tipos-dato-c-sharp\">tipos por valor o referencia</a>, pero solo puede retornar un solo tipo.\n<br />\nEn caso de que no exista necesidad de regresar algún valor, debemos escribir <code>void</code>.\n</li>\n<li><strong>nombre</strong>, esta es una parte esencial de la definición de un método. El nombre es un identificador que no debe comenzar por un número ni contener caracteres que no sean alfanuméricos o guiones bajos.\n<br />\nPor convención, en C# los nombres de método comienzan con mayúscula, aunque tu puedes escribirlos como quieras. \n</li>\n<li><strong>lista de parámetros</strong>, los métodos pueden recibir información del objeto que los llama a través de los parámetros, la lista de parámetros está definida por el método mediante la especificación del tipo de dato y el identificador de este, si es necesario que el método reciba más de un parámetro estos se separan por una coma.</li>\n<li><strong>implementación</strong>, es un conjunto de <a href=\"http://thatcsharpguy.com/post/sentencias-expresiones-operadores\">sentencias</a> que definen el comportamiento del método.</li>\n</ol>\n\n### Ejemplos  \nUno de los más grandes ejemplos de métodos es el método `Main`, que es el punto de entrada de cualquier programa escrito en este lenguaje. Por ejemplo:\n\n#### Main:\n\n<pre class=\"csharp\">\npublic static void Main(string[] args) ...\n</pre>  \n\nQue especifica que:  \n\n - el método `Main` es público\n - no necesitamos instanciar la clase para llamarlo\n - no regresa ningún valor\n - recibe un arreglo de cadenas como argumento\n \n#### GetDefaultCar;\n\n<pre class=\"csharp\">\ninternal static F1Car GetDefaultCar()\n\n    return new F1Car();\n\n</pre>   \n\nQue especifica que:  \n\n - el método `GetDefaultCar` únicamente podrá ser usado dentro del ensamblado en donde se encuentra la calse\n - como es estático, no necesitamos instanciar la clase para llamarlo\n - regresa un objeto del tipo `F1Car`\n - no recibe parámetros\n \n#### ChangeDriver: \n \n<pre class=\"csharp\">\npublic void ChangeDriver(Pilot newPilot)\n\n    if (!newPilot.Equals(_currentPilot))\n    \n        _currentPilot = newPilot;\n    \n\n</pre>    \n\nQue especifica que:  \n\n - el método `ChangeDriver` es público\n - necesitamos instanciar la clase para llamarlo\n - no regresa ningún valor\n - recibe un parámetro de tipo `Pilot` llamado `newPilot`\n \n#### TryStartEngine: \n \n<pre class=\"csharp\">\npublic bool TryStartEngine()\n\n    if (_currentPilot == null)\n    \n        return false;\n    \n    StartEngine();\n    return true;\n\n</pre>    \n\nQue especifica que:  \n\n - el método `TryStartEngine` es público\n - necesitamos instanciar la clase para llamarlo\n - no regresa un valor booleano\n - no recibe parámetros\n \n#### StartEngine:\n\n<pre class=\"csharp\">\nvoid StartEngine() \n\n    IsRunning = true;\n\n</pre>  \n\nQue especifica que:  \n\n - el método `StartEngine` es privado, ya que al no tener modificador de acceso por default es `private`\n - necesitamos instanciar la clase para llamarlo\n - no regresa ningún valor\n - no recibe parámetros\n \n### Uso\nDe entrada, el método `Main` es reconocidísimo, ya que es el punto de entrada de cualquier aplicación en C#, a continuación, obtenemos un objeto `F1Car` usando el método de instancia:\n\n<pre class=\"csharp\">\nvar car = F1Car.GetDefaultCar();\n</pre>  \n\nPodemos colocarle un piloto usando el método público:\n\n<pre class=\"csharp\">\ncar.ChangeDriver(schumacher);\n</pre>  \n\nAhora con piloto, podríamos encender el motor ¿no?\n\n<pre class=\"csharp\">\n//car.StartEngine();\nvar started = car.TryStartEngine();\n</pre>  \n\nNo podemos llamar directamente a `StartEngine` ya que es privado, pero si tenemos acceso a `TryStartEngine`, desde el cual si se puede acceder a los miembros privados de la clase.\n\n### Conclusión  \nEn mi opinión la forma de definir y usar los métodos en C# es una de las más sencillas que existen actualmente, esto debido a que se usan palabras muy descriptivas para esta tarea. Además la lista de parámetros es claramente definida desde un inicio.\n\n### Lo que sigue\nAún queda mucho qué hablar sobre los métodos, por ejemplo, ¿qué son los métodos de extensión? y hablar de los modos en los que los parámetros pueden ser pasados, y es que estos pueden ser pasados por referencia o por valor, podemos usar parámetros por default y los llamados *named parameters*, expandiendo las posibilidades a la hora de programar."
}