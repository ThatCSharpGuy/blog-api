{	
	"id" : "/post/metodos-c-sharp/",
	"tv" : false,
	"date": "2016-04-11 14:00:00 -0500",
	"title" : "Métodos en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/metodos.png",
	"tags" : ["AprendeCSharp"],
	"content": "<p>Un sistema robusto programado en un lenguaje de programación orientado a objetos, como es el caso de C#, debe estar separado en distintas unidades lógicas. Estas unidades lógicas suelen coordinarse mediante el envío de mensajes entre ellos, en C# dichos mensajes se llaman métodos.</p>\n\n<h3 id=\"definicin\">Definición</h3>\n\n<p><strong>Un método no es más que un procedimiento o acción asociado con una clase</strong> y se compone de datos y un comportamiento. Esta es la sintaxis común para escribir un método:</p>\n\n<p>```\n[modificador de acceso] <tipo de=\"\" retorno=\"\"> <nombre>([parámetros])</nombre></tipo></p>\n\n<pre><code>[implementación]  \n</code></pre>\n\n<p>```</p>\n\n<p>Las partes marcadas con <code>[]</code> son opcionales y las que están entre <code>&lt;&gt;</code> son necesarias:</p>\n\n<ol>\n<li><strong>modificador de acceso</strong>, es una palabra reservada que especifica cuales de los otros objetos tendrán acceso al método, puede ser:\n        <ul>\n            <li><code>public</code>. Todos tienen acceso.</li>\n            <li><code>protected</code>. Solo las clases derivadas tienen acceso.</li>\n            <li><code>internal</code>. Solo clases contenidas en el mismo ensamblado tienen acceso.</li>\n            <li><code>private</code>. Solo la clase que lo define tiene acceso él.</li>\n        </ul>\nAdemás, también podemos añadir el modificador <code>static</code> para especificar que un método debe ser llamado desde una instancia de la clase o desde la clase misma.\n<br />\nSi se omite, el valor por default es <code>private</code>.\n</li>\n<li><strong>tipo de retorno</strong>, se usa para declarar si el método retornará algo como parte de su ejecución. Los valores posibles pueden ser muchos, y dependen de la lógica del negocio. Un método puede regresar <a href=\"http://thatcsharpguy.com/post/tipos-dato-c-sharp\">tipos por valor o referencia</a>, pero solo puede retornar un solo tipo.\n<br />\nEn caso de que no exista necesidad de regresar algún valor, debemos escribir <code>void</code>.\n</li>\n<li><strong>nombre</strong>, esta es una parte esencial de la definición de un método. El nombre es un identificador que no debe comenzar por un número ni contener caracteres que no sean alfanuméricos o guiones bajos.\n<br />\nPor convención, en C# los nombres de método comienzan con mayúscula, aunque tu puedes escribirlos como quieras. \n</li>\n<li><strong>lista de parámetros</strong>, los métodos pueden recibir información del objeto que los llama a través de los parámetros, la lista de parámetros está definida por el método mediante la especificación del tipo de dato y el identificador de este, si es necesario que el método reciba más de un parámetro estos se separan por una coma.</li>\n<li><strong>implementación</strong>, es un conjunto de <a href=\"http://thatcsharpguy.com/post/sentencias-expresiones-operadores\">sentencias</a> que definen el comportamiento del método.</li>\n</ol>\n\n<h3 id=\"ejemplos\">Ejemplos</h3>\n<p>Uno de los más grandes ejemplos de métodos es el método <code>Main</code>, que es el punto de entrada de cualquier programa escrito en este lenguaje. Por ejemplo:</p>\n\n<h4 id=\"main\">Main:</h4>\n\n<pre class=\"csharp\">\npublic static void Main(string[] args) ...\n</pre>\n\n<p>Que especifica que:</p>\n\n<ul>\n  <li>el método <code>Main</code> es público</li>\n  <li>no necesitamos instanciar la clase para llamarlo</li>\n  <li>no regresa ningún valor</li>\n  <li>recibe un arreglo de cadenas como argumento</li>\n</ul>\n\n<h4 id=\"getdefaultcar\">GetDefaultCar;</h4>\n\n<pre class=\"csharp\">\ninternal static F1Car GetDefaultCar()\n\n    return new F1Car();\n\n</pre>\n\n<p>Que especifica que:</p>\n\n<ul>\n  <li>el método <code>GetDefaultCar</code> únicamente podrá ser usado dentro del ensamblado en donde se encuentra la calse</li>\n  <li>como es estático, no necesitamos instanciar la clase para llamarlo</li>\n  <li>regresa un objeto del tipo <code>F1Car</code></li>\n  <li>no recibe parámetros</li>\n</ul>\n\n<h4 id=\"changedriver\">ChangeDriver:</h4>\n\n<pre class=\"csharp\">\npublic void ChangeDriver(Pilot newPilot)\n\n    if (!newPilot.Equals(_currentPilot))\n    \n        _currentPilot = newPilot;\n    \n\n</pre>\n\n<p>Que especifica que:</p>\n\n<ul>\n  <li>el método <code>ChangeDriver</code> es público</li>\n  <li>necesitamos instanciar la clase para llamarlo</li>\n  <li>no regresa ningún valor</li>\n  <li>recibe un parámetro de tipo <code>Pilot</code> llamado <code>newPilot</code></li>\n</ul>\n\n<h4 id=\"trystartengine\">TryStartEngine:</h4>\n\n<pre class=\"csharp\">\npublic bool TryStartEngine()\n\n    if (_currentPilot == null)\n    \n        return false;\n    \n    StartEngine();\n    return true;\n\n</pre>\n\n<p>Que especifica que:</p>\n\n<ul>\n  <li>el método <code>TryStartEngine</code> es público</li>\n  <li>necesitamos instanciar la clase para llamarlo</li>\n  <li>no regresa un valor booleano</li>\n  <li>no recibe parámetros</li>\n</ul>\n\n<h4 id=\"startengine\"> StartEngine:</h4>\n\n<pre class=\"csharp\">\nvoid StartEngine() \n\n    IsRunning = true;\n\n</pre>\n\n<p>Que especifica que:</p>\n\n<ul>\n  <li>el método <code>StartEngine</code> es privado, ya que al no tener modificador de acceso por default es <code>private</code></li>\n  <li>necesitamos instanciar la clase para llamarlo</li>\n  <li>no regresa ningún valor</li>\n  <li>no recibe parámetros</li>\n</ul>\n\n<h3 id=\"uso\">Uso</h3>\n<p>De entrada, el método <code>Main</code> es reconocidísimo, ya que es el punto de entrada de cualquier aplicación en C#, a continuación, obtenemos un objeto <code>F1Car</code> usando el método de instancia:</p>\n\n<pre class=\"csharp\">\nvar car = F1Car.GetDefaultCar();\n</pre>\n\n<p>Podemos colocarle un piloto usando el método público:</p>\n\n<pre class=\"csharp\">\ncar.ChangeDriver(schumacher);\n</pre>\n\n<p>Ahora con piloto, podríamos encender el motor ¿no?</p>\n\n<pre class=\"csharp\">\n//car.StartEngine();\nvar started = car.TryStartEngine();\n</pre>\n\n<p>No podemos llamar directamente a <code>StartEngine</code> ya que es privado, pero si tenemos acceso a <code>TryStartEngine</code>, desde el cual si se puede acceder a los miembros privados de la clase.</p>\n\n<h3 id=\"conclusin\">Conclusión</h3>\n<p>En mi opinión la forma de definir y usar los métodos en C# es una de las más sencillas que existen actualmente, esto debido a que se usan palabras muy descriptivas para esta tarea. Además la lista de parámetros es claramente definida desde un inicio.</p>\n\n<h3 id=\"lo-que-sigue\">Lo que sigue</h3>\n<p>Aún queda mucho qué hablar sobre los métodos, por ejemplo, ¿qué son los métodos de extensión? y hablar de los modos en los que los parámetros pueden ser pasados, y es que estos pueden ser pasados por referencia o por valor, podemos usar parámetros por default y los llamados <em>named parameters</em>, expandiendo las posibilidades a la hora de programar.</p>\n"
}