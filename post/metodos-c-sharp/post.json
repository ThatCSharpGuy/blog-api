{	
	"id" : "/post/metodos-c-sharp/",
	"tv" : false,
	"date": "2016-04-11 14:00:00 -0500",
	"title" : "Métodos en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/metodos.png",
	"tags" :
	[ 
		"AprendeCSharp"
	],
	"content" : "<p>Un sistema robusto programado en un lenguaje de programación orientado a objetos, como es el caso de C#, debe estar separado en distintas unidades lógicas. Estas unidades lógicas suelen coordinarse mediante el envío de mensajes entre ellos, en C# dichos mensajes se llaman métodos.</p>

<h3 id=\"definicin\">Definición</h3>

<p><strong>Un método no es más que un procedimiento o acción asociado con una clase</strong> y se compone de datos y un comportamiento. Esta es la sintaxis común para escribir un método:</p>

<p><code>
[modificador de acceso] &lt;tipo de retorno&gt; &lt;nombre&gt;([parámetros])  
{
    [implementación]  
}
</code></p>

<p>Las partes marcadas con <code>[]</code> son opcionales y las que están entre <code>&lt;&gt;</code> son necesarias:</p>

<ol>
<li><strong>modificador de acceso</strong>, es una palabra reservada que especifica cuales de los otros objetos tendrán acceso al método, puede ser:
        <ul>
            <li><code>public</code>. Todos tienen acceso.</li>
            <li><code>protected</code>. Solo las clases derivadas tienen acceso.</li>
            <li><code>internal</code>. Solo clases contenidas en el mismo ensamblado tienen acceso.</li>
            <li><code>private</code>. Solo la clase que lo define tiene acceso él.</li>
        </ul>
Además, también podemos añadir el modificador <code>static</code> para especificar que un método debe ser llamado desde una instancia de la clase o desde la clase misma.
<br />
Si se omite, el valor por default es <code>private</code>.
</li>
<li><strong>tipo de retorno</strong>, se usa para declarar si el método retornará algo como parte de su ejecución. Los valores posibles pueden ser muchos, y dependen de la lógica del negocio. Un método puede regresar <a href=\"http://thatcsharpguy.com/post/tipos-dato-c-sharp\">tipos por valor o referencia</a>, pero solo puede retornar un solo tipo.
<br />
En caso de que no exista necesidad de regresar algún valor, debemos escribir <code>void</code>.
</li>
<li><strong>nombre</strong>, esta es una parte esencial de la definición de un método. El nombre es un identificador que no debe comenzar por un número ni contener caracteres que no sean alfanuméricos o guiones bajos.
<br />
Por convención, en C# los nombres de método comienzan con mayúscula, aunque tu puedes escribirlos como quieras. 
</li>
<li><strong>lista de parámetros</strong>, los métodos pueden recibir información del objeto que los llama a través de los parámetros, la lista de parámetros está definida por el método mediante la especificación del tipo de dato y el identificador de este, si es necesario que el método reciba más de un parámetro estos se separan por una coma.</li>
<li><strong>implementación</strong>, es un conjunto de <a href=\"http://thatcsharpguy.com/post/sentencias-expresiones-operadores\">sentencias</a> que definen el comportamiento del método.</li>
</ol>

<h3 id=\"ejemplos\">Ejemplos</h3>
<p>Uno de los más grandes ejemplos de métodos es el método <code>Main</code>, que es el punto de entrada de cualquier programa escrito en este lenguaje. Por ejemplo:</p>

<h4 id=\"main\">Main:</h4>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="err">…</span></code></pre></figure></p>

<p>Que especifica que:</p>

<ul>
  <li>el método <code>Main</code> es público</li>
  <li>no necesitamos instanciar la clase para llamarlo</li>
  <li>no regresa ningún valor</li>
  <li>recibe un arreglo de cadenas como argumento</li>
</ul>

<h4 id=\"getdefaultcar\">GetDefaultCar;</h4>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">internal</span> <span class="k">static</span> <span class="n">F1Car</span> <span class="nf">GetDefaultCar</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">F1Car</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure></p>

<p>Que especifica que:</p>

<ul>
  <li>el método <code>GetDefaultCar</code> únicamente podrá ser usado dentro del ensamblado en donde se encuentra la calse</li>
  <li>como es estático, no necesitamos instanciar la clase para llamarlo</li>
  <li>regresa un objeto del tipo <code>F1Car</code></li>
  <li>no recibe parámetros</li>
</ul>

<h4 id=\"changedriver\">ChangeDriver:</h4>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">void</span> <span class="nf">ChangeDriver</span><span class="p">(</span><span class="n">Pilot</span> <span class="n">newPilot</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(!</span><span class="n">newPilot</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">_currentPilot</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">_currentPilot</span> <span class="p">=</span> <span class="n">newPilot</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure></p>

<p>Que especifica que:</p>

<ul>
  <li>el método <code>ChangeDriver</code> es público</li>
  <li>necesitamos instanciar la clase para llamarlo</li>
  <li>no regresa ningún valor</li>
  <li>recibe un parámetro de tipo <code>Pilot</code> llamado <code>newPilot</code></li>
</ul>

<h4 id=\"trystartengine\">TryStartEngine:</h4>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="nf">TryStartEngine</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">_currentPilot</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">StartEngine</span><span class="p">();</span>
    <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure></p>

<p>Que especifica que:</p>

<ul>
  <li>el método <code>TryStartEngine</code> es público</li>
  <li>necesitamos instanciar la clase para llamarlo</li>
  <li>no regresa un valor booleano</li>
  <li>no recibe parámetros</li>
</ul>

<h4 id=\"startengine\"> StartEngine:</h4>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">void</span> <span class="nf">StartEngine</span><span class="p">()</span> 
<span class="p">{</span>
    <span class="n">IsRunning</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure></p>

<p>Que especifica que:</p>

<ul>
  <li>el método <code>StartEngine</code> es privado, ya que al no tener modificador de acceso por default es <code>private</code></li>
  <li>necesitamos instanciar la clase para llamarlo</li>
  <li>no regresa ningún valor</li>
  <li>no recibe parámetros</li>
</ul>

<h3 id=\"uso\">Uso</h3>
<p>De entrada, el método <code>Main</code> es reconocidísimo, ya que es el punto de entrada de cualquier aplicación en C#, a continuación, obtenemos un objeto <code>F1Car</code> usando el método de instancia:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">car</span> <span class="p">=</span> <span class="n">F1Car</span><span class="p">.</span><span class="n">GetDefaultCar</span><span class="p">();</span></code></pre></figure></p>

<p>Podemos colocarle un piloto usando el método público:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">car</span><span class="p">.</span><span class="n">ChangeDriver</span><span class="p">(</span><span class="n">schumacher</span><span class="p">);</span></code></pre></figure></p>

<p>Ahora con piloto, podríamos encender el motor ¿no?</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">//car.StartEngine();</span>
<span class="kt">var</span> <span class="n">started</span> <span class="p">=</span> <span class="n">car</span><span class="p">.</span><span class="n">TryStartEngine</span><span class="p">();</span></code></pre></figure></p>

<p>No podemos llamar directamente a <code>StartEngine</code> ya que es privado, pero si tenemos acceso a <code>TryStartEngine</code>, desde el cual si se puede acceder a los miembros privados de la clase.</p>

<h3 id=\"conclusin\">Conclusión</h3>
<p>En mi opinión la forma de definir y usar los métodos en C# es una de las más sencillas que existen actualmente, esto debido a que se usan palabras muy descriptivas para esta tarea. Además la lista de parámetros es claramente definida desde un inicio.</p>

<h3 id=\"lo-que-sigue\">Lo que sigue</h3>
<p>Aún queda mucho qué hablar sobre los métodos, por ejemplo, ¿qué son los métodos de extensión? y hablar de los modos en los que los parámetros pueden ser pasados, y es que estos pueden ser pasados por referencia o por valor, podemos usar parámetros por default y los llamados <em>named parameters</em>, expandiendo las posibilidades a la hora de programar.</p>
"
}