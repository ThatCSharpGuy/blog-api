{	
	"id" : "/post/params-c-sharp/",
	"tv" : false,
	"date": "2016-04-18 14:00:00 -0500",
	"title" : "params en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/params.png",
	"tags" :
	[ 
		"AprendeCSharp"
	],
	"content" : "<p>Justamente la semana pasada escribí sobre cuál es la sintaxis de <a href=\"../metodos-c-sharp\">los métodos en C#</a>, y ese fue más bien un post introductorio y es por eso que necesita ser ampliado. Esta vez toca hablar de la palabra <code>params</code> y cómo nos puede facilitar a la hora de escribir el código si es que vamos a trabajar con arreglos.</p>

<h3 id=\"params\">params</h3>
<p>La palabra reservada <code>params</code> se usa en la declaración de los parámetros de un método, se antepone al tipo de dato que vamos a declarar y tiene una peculiaridad, solamente se puede anteponer a parámetros que sean arreglos, por ejemplo a <code>string[]</code>, <code>Persona[]</code>.</p>

<p>Esto es porque lo que nos ayuda a escribir es un método que recibe una cantidad variable de argumentos del mismo tipo y los “introduce” un un arreglo sin tener que declararlo explícitamente.</p>

<p>Mira los ejemplos para que te quede un poco más claro:</p>

<h3 id=\"ejemplos\">Ejemplos</h3>

<h4 id=\"como-nico-parmetro\">Como único parámetro</h4>

<p>Para comenzar, tomemos los siguientes métodos:
<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Metodo1Params</span><span class="p">(</span><span class="k">params</span> <span class="kt">bool</span> <span class="p">[]</span> <span class="n">a</span><span class="p">)</span>
<span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">M1Params</span> <span class="n">recibió</span> <span class="err">“</span> <span class="p">+</span> <span class="n">a</span><span class="p">.</span><span class="n">Length</span> <span class="p">+</span> <span class="err">“</span> <span class="n">booleanos</span><span class="err">”</span><span class="p">);</span>
<span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Metodo1Arrays</span><span class="p">(</span><span class="kt">bool</span> <span class="p">[]</span> <span class="n">a</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">a</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[]{</span> <span class="p">};</span>
    <span class="p">}</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">M1Arrays</span> <span class="n">recibió</span> <span class="err">“</span> <span class="p">+</span> <span class="n">a</span><span class="p">.</span><span class="n">Length</span> <span class="p">+</span> <span class="err">“</span> <span class="n">booleanos</span><span class="err">”</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>

<p>Los dos realizan exactamente lo mismo, sin embargo, para ejecutar cada uno, requerimos de una sintaxis un poco distinta:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Metodo1Arrays</span><span class="p">(</span><span class="k">null</span><span class="p">);</span> <span class="c1">// Imprime: M1Arrays recibió 0 booleanos</span>
<span class="n">Metodo1Params</span><span class="p">();</span> <span class="c1">// Imprime: M1Params recibió 0 booleanos</span></code></pre></figure></p>

<p>Podemos pasar variables:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">bool</span> <span class="n">cierto</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
<span class="c1">// Metodo1Arrays(cierto); // Nope, necesita un arreglo</span>
<span class="n">Metodo1Arrays</span><span class="p">(</span><span class="k">new</span> <span class="kt">bool</span><span class="p">[]</span> <span class="p">{</span> <span class="n">cierto</span> <span class="p">});</span> <span class="c1">// Imprime: M1Arrays recibió 1 booleanos</span>
<span class="n">Metodo1Params</span><span class="p">(</span><span class="n">cierto</span><span class="p">);</span> <span class="c1">// Imprime: M1Params recibió 1 booleanos</span></code></pre></figure></p>

<p>Como puedes ver, no podemos llamar <code>Metodo1Arrays</code> indicando únicamente el argumento que queremos, nosotros tenemos que crear el arreglo para llamarlo, en el siguiente ejemplo está un poco más claro:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Metodo1Arrays</span><span class="p">(</span><span class="k">new</span> <span class="p">[]{</span> <span class="n">cierto</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="n">cierto</span> <span class="p">});</span> <span class="c1">// M1Arrays recibió 4 booleanos</span>
<span class="n">Metodo1Params</span><span class="p">(</span><span class="n">cierto</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="n">cierto</span><span class="p">);</span> <span class="c1">// M1Params recibió 4 booleanos</span></code></pre></figure></p>

<h4 id=\"en-conjunto-con-otros\">En conjunto con otros</h4>

<p>Podemos declarar un método con varios parámetros, y usar <code>params</code> dentro de ellos, siempre y cuando el que marquemos sea el último parámetro de la lista.</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Metodo2Params</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">char</span> <span class="n">b</span><span class="p">,</span> <span class="k">params</span> <span class="kt">decimal</span><span class="p">[]</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">Metodo3Params</span><span class="p">:</span> <span class="err">“</span> <span class="p">+</span> <span class="n">c</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
<span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Metodo2Arrays</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">char</span> <span class="n">b</span><span class="p">,</span> <span class="kt">decimal</span><span class="p">[]</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">Metodo3Array</span><span class="p">:</span> <span class="err">“</span> <span class="p">+</span> <span class="n">c</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>

<p>El hecho de que hayamos marcado algo con <code>params</code> no quiere decir que tengamos que no podamos simplemente enviar un arreglo en lugar de una lista de valores separados por coma:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">array</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">decimal</span><span class="p">[]</span> <span class="p">{</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">};</span>
<span class="n">Metodo2Arrays</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="err">‘</span><span class="n">A</span><span class="err">’</span><span class="p">,</span> <span class="n">array</span><span class="p">);</span>
<span class="n">Metodo2Params</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="err">‘</span><span class="n">B</span><span class="err">’</span><span class="p">,</span> <span class="n">array</span><span class="p">);</span></code></pre></figure></p>

<p>La diferencia en la cantidad de código que tenemos que escribir se hace más notoria cuando tenemos que mandar cero elementos:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Metodo2Arrays</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="err">‘</span><span class="n">C</span><span class="err">’</span><span class="p">,</span> <span class="k">new</span> <span class="kt">decimal</span> <span class="p">[]{</span> <span class="p">});</span>
<span class="n">Metodo2Params</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="err">‘</span><span class="n">D</span><span class="err">’</span><span class="p">);</span></code></pre></figure></p>

<p>Y también cuando vamos a mandar varios:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Metodo2Arrays</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="err">‘</span><span class="n">E</span><span class="err">’</span><span class="p">,</span> <span class="k">new</span> <span class="p">[]{</span> <span class="m">2.1</span><span class="n">m</span><span class="p">,</span> <span class="m">13</span><span class="n">m</span><span class="p">,</span> <span class="m">15</span><span class="n">m</span> <span class="p">});</span>
<span class="n">Metodo2Params</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="err">‘</span><span class="n">E</span><span class="err">’</span><span class="p">,</span> <span class="m">2.1</span><span class="n">m</span><span class="p">,</span> <span class="m">13</span><span class="n">m</span><span class="p">,</span> <span class="m">15</span><span class="n">m</span><span class="p">);</span></code></pre></figure></p>

<h4 id=\"arreglos-multidimensionales\">Arreglos multidimensionales</h4>

<p>Y también podemos crear cosas más complejas, como usar arreglos multidimensionales como parámetros:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">PromediaCalificacionesArray</span><span class="p">(</span><span class="kt">decimal</span> <span class="p">[][]</span> <span class="n">calificaciones</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">calificaciones</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span><span class="n">i</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="c1">// Mejor usemos LINQ:</span>
        <span class="kt">decimal</span> <span class="n">promedio</span> <span class="p">=</span> <span class="n">calificaciones</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Average</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="p">(</span><span class="n">Arrays</span><span class="p">)</span> <span class="n">Calificación</span> <span class="n">alumno</span> <span class="err">“</span> <span class="p">+</span> <span class="n">i</span> <span class="p">+</span> <span class="err">“</span><span class="p">:</span> <span class="err">“</span> <span class="p">+</span> <span class="n">promedio</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">PromediaCalificacionesParams</span><span class="p">(</span><span class="k">params</span> <span class="kt">decimal</span> <span class="p">[][]</span> <span class="n">calificaciones</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">calificaciones</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span><span class="n">i</span><span class="p">++)</span>
    <span class="p">{</span>
        <span class="kt">decimal</span> <span class="n">promedio</span> <span class="p">=</span> <span class="n">calificaciones</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Average</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="p">(</span><span class="n">Params</span><span class="p">)</span> <span class="n">Calificación</span> <span class="n">alumno</span> <span class="err">“</span> <span class="p">+</span> <span class="n">i</span> <span class="p">+</span> <span class="err">“</span><span class="p">:</span> <span class="err">“</span> <span class="p">+</span> <span class="n">promedio</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure></p>

<p>Y las llamadas al método:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">decimal</span><span class="p">[]</span> <span class="n">alumno1</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">decimal</span> <span class="p">[]</span> <span class="p">{</span> <span class="m">10</span><span class="n">m</span><span class="p">,</span> <span class="m">9.2</span><span class="n">m</span><span class="p">,</span> <span class="m">7</span><span class="n">m</span><span class="p">,</span> <span class="m">3.5</span><span class="n">m</span><span class="p">,</span> <span class="m">10</span><span class="n">m</span> <span class="p">};</span>
<span class="kt">var</span> <span class="n">alumno2</span> <span class="p">=</span> <span class="k">new</span> <span class="p">[]{</span> <span class="m">8.5</span><span class="n">m</span><span class="p">,</span> <span class="m">9.3</span><span class="n">m</span><span class="p">,</span> <span class="m">8.6</span><span class="n">m</span><span class="p">,</span> <span class="m">9.9</span><span class="n">m</span><span class="p">,</span> <span class="m">10</span><span class="n">m</span> <span class="p">};&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">PromediaCalificacionesArray</span><span class="p">(</span><span class="k">new</span> <span class="p">[]{</span> <span class="n">alumno1</span><span class="p">,</span> <span class="n">alumno2</span> <span class="p">});</span>
<span class="n">PromediaCalificacionesParams</span><span class="p">(</span><span class="n">alumno1</span><span class="p">,</span> <span class="n">alumno2</span><span class="p">);</span></code></pre></figure></p>

<h3 id=\"ejemplo-de-la-vida-real\">Ejemplo de la vida real</h3>
<p>Uno de los máximos exponentes del uso de <code>params</code> es el método estático <code>String.Format</code>, que <em>formatea</em> una cadena y a la cual le podemos pasar una lista de argumentos. La firma de dicho método es:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">Format</span><span class="p">(</span>
	<span class="kt">string</span> <span class="n">format</span><span class="p">,</span>
	<span class="k">params</span> <span class="kt">object</span><span class="p">[]</span> <span class="n">args</span>
<span class="p">)</span></code></pre></figure></p>

<h3 id=\"ejemplos-de-lo-que-no-se-puede-hacer\">Ejemplos de lo que no se puede hacer</h3>

<p>No podemos marcar un tipo de dato que no sea un arreglo con params, como es el caso de <code>char a</code> en el siguiente fragmento:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Metodo1Params</span><span class="p">(</span><span class="k">params</span> <span class="kt">char</span> <span class="n">a</span><span class="p">)</span> <span class="c1">// Invalido, debe ser un arreglo</span></code></pre></figure></p>

<p>Un parámetro marcado con <code>params</code> debe ser siempre el último parámetro del método, esto para evitar confusiones a la hora de ejecutarlo:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Metodo3Params</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="k">params</span> <span class="kt">decimal</span><span class="p">[]</span> <span class="n">b</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">Metodo3Params</span><span class="p">:</span> <span class="err">“</span> <span class="p">+</span> <span class="n">b</span><span class="p">.</span><span class="n">Length</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>

<p>Tampoco podemos declarar dos métodos con el mismo nombre y los mismos parámetros, ya que técnicamente la firma del método es la misma.</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Metodo4</span><span class="p">(</span><span class="k">params</span> <span class="kt">decimal</span><span class="p">[]</span> <span class="n">b</span><span class="p">)</span> <span class="c1">//…&lt;/p&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Metodo4</span><span class="p">(</span><span class="kt">decimal</span><span class="p">[]</span> <span class="n">b</span><span class="p">)</span> <span class="c1">//…</span></code></pre></figure></p>

<h3 id=\"lo-que-sucede-internamente\">Lo que sucede internamente</h3>

<p>Cuando marcamos un parámetro como params, el compilador se encarga de tratarlo internamente como un arreglo: convierte nuestra lista variable de argumentos en un arreglo o crea un arreglo vacío si no enviamos nada. Así que esta palabra reservada es parte de la “azúcar sintáctica” que nos ofrece C#.</p>

<h3 id=\"lo-que-sigue\">Lo que sigue</h3>
<p>Puede que características como la que se describe en este post no tengan mucho (o a veces nada) de impacto en el desempeño de un programa al momento de ejecutarse, sin embargo, no por eso debemos descartarlas como una poderosa herramienta de programación que puede ayudar a darle más significado al código. Como todo, también debes usarlo con moderación y en casos en los que tenga sentido.</p>
"
}