{	
	"id" : "/post/params-c-sharp/",
	"tv" : false,
	"date": "2016-04-18 14:00:00 -0500",
	"title" : "params en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/params.png",
	"tags" : ["AprendeCSharp"],
	  
	"content": '"Justamente la semana pasada escribí sobre cuál es la sintaxis de <a href=\"../metodos-c-sharp\">los métodos en C#</a>, y ese fue más bien un post introductorio y es por eso que necesita ser ampliado. Esta vez toca hablar de la palabra `params` y cómo nos puede facilitar a la hora de escribir el código si es que vamos a trabajar con arreglos.\n\n### params  \nLa palabra reservada `params` se usa en la declaración de los parámetros de un método, se antepone al tipo de dato que vamos a declarar y tiene una peculiaridad, solamente se puede anteponer a parámetros que sean arreglos, por ejemplo a `string[]`, `Persona[]`.\n\nEsto es porque lo que nos ayuda a escribir es un método que recibe una cantidad variable de argumentos del mismo tipo y los \"introduce\" un un arreglo sin tener que declararlo explícitamente.\n\nMira los ejemplos para que te quede un poco más claro:\n\n### Ejemplos\n\n#### Como único parámetro\n\nPara comenzar, tomemos los siguientes métodos:\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Metodo1Params</span><span class="p">(</span><span class="k">params</span> <span class="kt">bool</span> <span class="p">[]</span> <span class="n">a</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;M1Params recibió \&quot; + a.Length + \&quot; booleanos\&quot;);\n}\n\npublic static void Metodo1Arrays(bool [] a)\n{\n    if (a == null)\n    {\n        a = new bool[]{ };\n    }\n    Console.WriteLine(\&quot;M1Arrays recibió \&quot; + a.Length + \&quot; booleanos\&quot;);\n}\n</span></code></pre></figure>  \n\nLos dos realizan exactamente lo mismo, sin embargo, para ejecutar cada uno, requerimos de una sintaxis un poco distinta:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nMetodo1Arrays</span><span class="p">(</span><span class="k">null</span><span class="p">);</span> <span class="c1">// Imprime: M1Arrays recibió 0 booleanos\nMetodo1Params(); // Imprime: M1Params recibió 0 booleanos\n</span></code></pre></figure>\n\nPodemos pasar variables:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nbool</span> <span class="n">cierto</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="c1">// Metodo1Arrays(cierto); // Nope, necesita un arreglo\nMetodo1Arrays(new bool[] { cierto }); // Imprime: M1Arrays recibió 1 booleanos\nMetodo1Params(cierto); // Imprime: M1Params recibió 1 booleanos\n</span></code></pre></figure>\n\nComo puedes ver, no podemos llamar `Metodo1Arrays` indicando únicamente el argumento que queremos, nosotros tenemos que crear el arreglo para llamarlo, en el siguiente ejemplo está un poco más claro:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nMetodo1Arrays</span><span class="p">(</span><span class="k">new</span> <span class="p">[]{</span> <span class="n">cierto</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="k">true</span><span class="p">,</span> <span class="n">cierto</span> <span class="p">});</span> <span class="c1">// M1Arrays recibió 4 booleanos\nMetodo1Params(cierto, false, true, cierto); // M1Params recibió 4 booleanos\n</span></code></pre></figure>  \n\n#### En conjunto con otros\n\nPodemos declarar un método con varios parámetros, y usar `params` dentro de ellos, siempre y cuando el que marquemos sea el último parámetro de la lista.\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Metodo2Params</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">char</span> <span class="n">b</span><span class="p">,</span> <span class="k">params</span> <span class="kt">decimal</span><span class="p">[]</span> <span class="n">c</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Metodo3Params: \&quot; + c.Length);\n}\n\npublic static void Metodo2Arrays(int a, char b, decimal[] c)\n{\n    Console.WriteLine(\&quot;Metodo3Array: \&quot; + c.Length);\n}\n</span></code></pre></figure>  \n\nEl hecho de que hayamos marcado algo con `params` no quiere decir que tengamos que no podamos simplemente enviar un arreglo en lugar de una lista de valores separados por coma:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">array</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">decimal</span><span class="p">[]</span> <span class="p">{</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">};</span><span class="err">\</span><span class="n">nMetodo2Arrays</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="sc">&#39;A&#39;</span><span class="p">,</span> <span class="n">array</span><span class="p">);</span><span class="err">\</span><span class="n">nMetodo2Params</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="sc">&#39;B&#39;</span><span class="p">,</span> <span class="n">array</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nLa diferencia en la cantidad de código que tenemos que escribir se hace más notoria cuando tenemos que mandar cero elementos:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nMetodo2Arrays</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="sc">&#39;C&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="kt">decimal</span> <span class="p">[]{</span> <span class="p">});</span><span class="err">\</span><span class="n">nMetodo2Params</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="sc">&#39;D&#39;</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nY también cuando vamos a mandar varios:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nMetodo2Arrays</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="sc">&#39;E&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="p">[]{</span> <span class="m">2.1</span><span class="n">m</span><span class="p">,</span> <span class="m">13</span><span class="n">m</span><span class="p">,</span> <span class="m">15</span><span class="n">m</span> <span class="p">});</span><span class="err">\</span><span class="n">nMetodo2Params</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="sc">&#39;E&#39;</span><span class="p">,</span> <span class="m">2.1</span><span class="n">m</span><span class="p">,</span> <span class="m">13</span><span class="n">m</span><span class="p">,</span> <span class="m">15</span><span class="n">m</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n#### Arreglos multidimensionales\n\nY también podemos crear cosas más complejas, como usar arreglos multidimensionales como parámetros:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">static</span> <span class="k">void</span> <span class="n">PromediaCalificacionesArray</span><span class="p">(</span><span class="kt">decimal</span> <span class="p">[][]</span> <span class="n">calificaciones</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">calificaciones</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span><span class="n">i</span><span class="p">++)</span><span class="err">\</span><span class="n">n</span>    <span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="c1">// Mejor usemos LINQ:\n        decimal promedio = calificaciones[i].Average();\n        Console.WriteLine(\&quot;(Arrays) Calificación alumno \&quot; + i + \&quot;: \&quot; + promedio);\n    }\n}\n\npublic static void PromediaCalificacionesParams(params decimal [][] calificaciones)\n{\n    for(int i = 0; i &lt; calificaciones.Length;i++)\n    {\n        decimal promedio = calificaciones[i].Average();\n        Console.WriteLine(\&quot;(Params) Calificación alumno \&quot; + i + \&quot;: \&quot; + promedio);\n    }\n}\n</span></code></pre></figure>\n\nY las llamadas al método:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">ndecimal</span><span class="p">[]</span> <span class="n">alumno1</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">decimal</span> <span class="p">[]</span> <span class="p">{</span> <span class="m">10</span><span class="n">m</span><span class="p">,</span> <span class="m">9.2</span><span class="n">m</span><span class="p">,</span> <span class="m">7</span><span class="n">m</span><span class="p">,</span> <span class="m">3.5</span><span class="n">m</span><span class="p">,</span> <span class="m">10</span><span class="n">m</span> <span class="p">};</span><span class="err">\</span><span class="n">nvar</span> <span class="n">alumno2</span> <span class="p">=</span> <span class="k">new</span> <span class="p">[]{</span> <span class="m">8.5</span><span class="n">m</span><span class="p">,</span> <span class="m">9.3</span><span class="n">m</span><span class="p">,</span> <span class="m">8.6</span><span class="n">m</span><span class="p">,</span> <span class="m">9.9</span><span class="n">m</span><span class="p">,</span> <span class="m">10</span><span class="n">m</span> <span class="p">};</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">nPromediaCalificacionesArray</span><span class="p">(</span><span class="k">new</span> <span class="p">[]{</span> <span class="n">alumno1</span><span class="p">,</span> <span class="n">alumno2</span> <span class="p">});</span><span class="err">\</span><span class="n">nPromediaCalificacionesParams</span><span class="p">(</span><span class="n">alumno1</span><span class="p">,</span> <span class="n">alumno2</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>    \n\n### Ejemplo de la vida real\nUno de los máximos exponentes del uso de `params` es el método estático `String.Format`, que *formatea* una cadena y a la cual le podemos pasar una lista de argumentos. La firma de dicho método es:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">Format</span><span class="p">(</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tstring</span> <span class="n">format</span><span class="p">,</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tparams</span> <span class="kt">object</span><span class="p">[]</span> <span class="n">args</span><span class="err">\</span><span class="n">n</span><span class="p">)</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n### Ejemplos de lo que no se puede hacer\n\nNo podemos marcar un tipo de dato que no sea un arreglo con params, como es el caso de `char a` en el siguiente fragmento:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Metodo1Params</span><span class="p">(</span><span class="k">params</span> <span class="kt">char</span> <span class="n">a</span><span class="p">)</span> <span class="c1">// Invalido, debe ser un arreglo\n</span></code></pre></figure>\n\nUn parámetro marcado con `params` debe ser siempre el último parámetro del método, esto para evitar confusiones a la hora de ejecutarlo:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Metodo3Params</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="k">params</span> <span class="kt">decimal</span><span class="p">[]</span> <span class="n">b</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Metodo3Params: \&quot; + b.Length);\n}\n</span></code></pre></figure> \n\nTampoco podemos declarar dos métodos con el mismo nombre y los mismos parámetros, ya que técnicamente la firma del método es la misma.\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">static</span> <span class="k">void</span> <span class="n">Metodo4</span><span class="p">(</span><span class="k">params</span> <span class="kt">decimal</span><span class="p">[]</span> <span class="n">b</span><span class="p">)</span> <span class="c1">//...\n\npublic static void Metodo4(decimal[] b) //...\n</span></code></pre></figure>\n\n### Lo que sucede internamente\n\nCuando marcamos un parámetro como params, el compilador se encarga de tratarlo internamente como un arreglo: convierte nuestra lista variable de argumentos en un arreglo o crea un arreglo vacío si no enviamos nada. Así que esta palabra reservada es parte de la \"azúcar sintáctica\" que nos ofrece C#.\n\n\n### Lo que sigue\nPuede que características como la que se describe en este post no tengan mucho (o a veces nada) de impacto en el desempeño de un programa al momento de ejecutarse, sin embargo, no por eso debemos descartarlas como una poderosa herramienta de programación que puede ayudar a darle más significado al código. Como todo, también debes usarlo con moderación y en casos en los que tenga sentido."'   
}