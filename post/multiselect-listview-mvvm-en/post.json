{	
	"id" : "/post/multiselect-listview-mvvm-en/",
	"tv" : false,
	"date": "2016-03-23 02:00:00 -0600",
	"title" : "Multi-select ListView and MVVM",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//xamarin-forms/multiselect-featured.png",
	"tags" : ["XamarinForms","Xamarin"],
	"content": "<p>Finally I was able to develop something using Xamarin.Forms and part of what I’ve been doing had to do with implementing a list that allowed the multiple election of rows and was compatible with the MVVM pattern.</p>\n\n<p>Doing some research, I found that the <code>ListView</code> control, which is the most used to show data in a list, does not allow multiple selection and developers should find a workaround to this matter. In Xamarin documentation there is also <a href=\"https://developer.xamarin.com/recipes/cross-platform/xamarin-forms/controls/multiselect/\" target=\"_blank\" rel=\"nofollow\">an article</a> where it is explained a way to complete this task, and this post is based on it.</p>\n\n<p>To make this task possible, we should make use of some auxiliary classes that I will explain later on this post.</p>\n\n<h3 id=\"the-model\">The Model</h3>\n<p>For this example, we will be showing a list of Pokemons and allow the user to select some of them through a list, the model class is the following:</p>\n\n<pre class=\"csharp\">\npublic class Pokemon \n\n    public int Id  get; set; \n    public string Name  get; set; \n    public double Weight  get; set; \n    public double Height  get; set; \n\n</pre>\n\n<h3 id=\"selectableitemwrapperlttgt\">SelectableItemWrapper&lt;T&gt;</h3>\n<p>Apart from the model, there is a need from an auxiliary class that you can tell by the name, acts as wrapper for the model, its definition is the following:</p>\n\n<pre class=\"csharp\">\npublic class SelectableItemWrapper<t>\n\n    public bool IsSelected  get; set; \n    public T Item  get; set; \n\n    \n\nThe `IsSelected` property will be used to determine whether the user had selected an item or not, while `Item` will contain the model.\n\n## The View\n(Si prefieres trabajar solo con C#, <a href=\"//thatcsharpguy.com/post/multiselect-listview-mvvm\">ve este post</a>)\n\nFor this app we will use two Forms pages, one to show all the Pokemons and other to show only those who had been selected by the user. \n\nFor the first one, where all the Pokemons will be shown, we will have to modify slightly the way we are used to create a cell template, and the reason is that every row in the list will be binded to a `SelectableItemWrapper<pokemon>` not to a `Pokemon`.  \n\nThe list will be declared in XAML and the collection `Pokemons` will be set as the `ItemSource` property:\n\n<pre class=\"xml\">\n<listview itemssource=\"Binding Pokemons\">\n  \n\nAs we know, now every element in the collection will be a row in the list.\n\n#### PokemonSelectableCell\nFor this cell it is necessary to show the name, weight and height of the Pokemon binded to it, along with a control to let the user choose or not such item. That is why some bindable properties are needed.\n\nThat is why in order to show the information three labels are created, and for the selection issue a `Switch` control will be used (I tried to use the <a href=\"https://github.com/XLabs/Xamarin-Forms-Labs/wiki/Checkbox-Control\" target=\"_blank\" rel=\"nofollow\">CheckBox de XLabs</a>, but I ran into an issue with the `ListView`).  \n\nYou can design the cell as you want, but it is important that inside of it you bind a boolean property, such as `IsToggled` o `Checked`, to the property `IsSelected` of the `SelectableItemWrapper` class. For this example, a line like this should be enough:\n\n<pre class=\"csharp\">\n// Important:\nsw.SetBinding(Switch.IsToggledProperty, \"IsSelected\");\n</pre>  \n\nI should remark that the binding is defined within the cell implementation, and not in the view where the bindings are usually defined.\n\n### Back to the View\nNow, again back to the view, we can use the cell in our `ListView`, we can define other bindings:\n\n<pre class=\"xml\">\n<listview.itemtemplate>\n    <datatemplate>\n        <c:pokemonselectablecell name=\"Binding Item.Name\" weight=\"Binding Item.Weight\" height=\"Binding Item.Height\" />\n  \n\nYou can notice that te binding routes aren't \"direct\", instead we are referring first to an `Item` before the *real* properties, that is because we are binding to a `SelectableItemWrapper<pokemon>`, not to a `Pokemon`. \n\n### The ViewModel\nFor the ViewModel we require two collections:\n\n - One to hold a list of all Pokemons \n - One to hold the selected Pokemons  \n \nHere are the definitions for them:\n \n <pre class=\"csharp\">\nprivate ObservableCollection&lt;SelectableItemWrapper<pokemon>&gt; _pokemons;\npublic ObservableCollection&lt;SelectableItemWrapper<pokemon>&gt; Pokemons\n\n    get  return _pokemons; \n    set  _pokemons = value; RaisePropertyChanged(); \n\n\nprivate ObservableCollection<pokemon> _selectedPokemons;\npublic ObservableCollection<pokemon> SelectedPokemons\n\n    get  return _selectedPokemons; \n    private set  _selectedPokemons = value; RaisePropertyChanged(); \n\n  \n\nThe first one, `Pokemons` is an `ObservableCollection` of `SelectableItemWrapper` of `Pokemon` because it holds all the selectable items. Whereas the second one is just another collection. Like the ones we are used to.\n\nTherefore, in the ViewModel we can get all the selected items using a simple Linq query:\n\n<pre class=\"csharp\">\nObservableCollection<pokemon> GetSelectedPokemons()\n\n    var selected = Pokemons\n        .Where(p =&gt; p.IsSelected)\n        .Select(p =&gt; p.Item)\n        .ToList();   \n    return new ObservableCollection<pokemon>(selected);\n\n  \n\nOr mark all or none items as selected:\n\n<pre class=\"csharp\">\nvoid SelectAll(bool select)\n\n    foreach (var p in Pokemons)\n    \n        p.IsSelected = select;\n    \n\n</pre>  \n\nAnd all of that, from the ViewMdoel. Remember, you can always  <a href=\"https://github.com/ThatCSharpGuy/MultiPokeList\" target=\"_blank\">check the source code</a>. By the way, look at the finished app:\n\n<img src=\"http://i.giphy.com/qpfRFj3MrFqow.gif\" title=\"Multi-select ListView y MVVM\" />\n\n\n#### Credits\nThe class `SelectMultipleBasePage<t>` in which all the info in this post is based on, was written by Glenn Stephens from Xamarin University, <a href=\"https://developer.xamarin.com/recipes/cross-platform/xamarin-forms/controls/multiselect/\" target=\"_blank\" rel=\"nofollow\">see the original post</a>.\n</t></pokemon></pokemon></pre></pokemon></pokemon></pokemon></pokemon></pre></pokemon></datatemplate></listview.itemtemplate></pre></listview></pre></pokemon></t></pre>\n"
}