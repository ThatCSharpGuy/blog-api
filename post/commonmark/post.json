{	
	"id" : "/post/commonmark/",
	"tv" : false,
	"date": "2016-09-05 14:00:01 -0500",
	"title" : "CommonMark.NET",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//commonmark/featured.png",
	"tags" :
	[ 
		"NuGetRecomendado"
	],
	"content" : "<p>De nuevo un <a href=\"#\">#NuGetRecomendado</a>, esta vez hablaré de uno que tiene un caso muy específico de uso.</p>

<p>Seguramente habrás escuchado sobre Markdown, que es un lenguaje de marcado entendible fácilmente para los humanos (a diferencia de XML). Este lenguaje es principalmente usado para la creación de documentos HTML a partir de otros con el formato Markdown.</p>

<p>El formato fue creado por <a href=\"https://web.archive.org/web/20040402080322/http://www.aaronsw.com/weblog/001189\" target=\"_blank\">John Gruber y Aaron Swartz</a> con la idea de tener una forma sencilla de escribir un email, un post de blog (como este que estás leyendo), una respuesta en un foro o sitio web, usando una <a href=\"https://daringfireball.net/projects/markdown/syntax\" target=\"_blank\">sintaxis simple</a> y no tan invasiva con el documento. Una vez escrito el documento es necesario hacerlo pasar por un proceso de conversión a HTML.</p>

<p>Este NuGet realiza precisamente eso: la conversión de Markdown a HTML.</p>

<h2 id=\"cdigo\">Código</h2>
<p>Para el siguiente ejemplo, vamos a trabajar con el archivo llamado <code>input.md</code> cuyo contenido es:</p>

<pre>
Hello world
=  

Visita el post del [blog](http://thatcsharpguy.com/post/commonmark) para **saber más** sobre *CommonMark.NET*  
</pre>

<h3 id=\"convert-strings\">Convert (Strings)</h3>
<p>Si lo único que quieres es convertir En realidad la api de CommonMark es una de las más sencillas, el siguiente bloque de código convierte una cadena de texto (Markdown) en otra cadena de texto (HTML):</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">file</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="n">ReadAllText</span><span class="p">(</span><span class="err">“</span><span class="n">input</span><span class="p">.</span><span class="n">md</span><span class="err">”</span><span class="p">);</span>
<span class="kt">var</span> <span class="n">exp</span> <span class="p">=</span> <span class="n">CommonMark</span><span class="p">.</span><span class="n">CommonMarkConverter</span><span class="p">.</span><span class="n">Convert</span><span class="p">(</span><span class="n">file</span><span class="p">);</span>
<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">exp</span><span class="p">);</span></code></pre></figure></p>

<p>El resultado:</p>

<pre>
&lt;h1&gt;Hello world&lt;/h1&gt;
&lt;p&gt;Visita el post del &lt;a href=&quot;http://thatcsharpguy.com/post/commonmark&quot;&gt;blog&lt;/a&gt; para &lt;strong&gt;saber m&#225;s&lt;/strong&gt; sobre &lt;em&gt;CommonMark.NET&lt;/em&gt;&lt;/p&gt;
</pre>

<h3 id=\"convert-streams\">Convert (Streams)</h3>
<p>Habrá ocasiones en las que necesitemos convertir archivos completos y hacerlo usando <em>streams</em> de datos, para esto, el método <code>Convert</code> tiene otra sobrecarga que permite realizar esta tarea. Previamente necesitamos abrir los flujos de datos (yo recomiendo hacerlo con <a href=\"../usos-using-2\">el bloque using</a>):</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span><span class="p">(</span><span class="err">“</span><span class="n">input</span><span class="p">.</span><span class="n">md</span><span class="err">”</span><span class="p">))</span>
<span class="k">using</span> <span class="p">(</span><span class="kt">var</span> <span class="n">writer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamWriter</span><span class="p">(</span><span class="err">“</span><span class="n">output</span><span class="p">.</span><span class="n">html</span><span class="err">”</span><span class="p">))</span>
<span class="p">{</span>
    <span class="n">CommonMark</span><span class="p">.</span><span class="n">CommonMarkConverter</span><span class="p">.</span><span class="n">Convert</span><span class="p">(</span><span class="n">reader</span><span class="p">,</span> <span class="n">writer</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>

<p>Tras lo cual, si abrimos el archivo <code>output.html</code> con un navegador, veremos algo como lo siguiente:</p>

<p><figure><img src='/postimages/post/commonmark/post.jsonraw_output.png' alt='“Salida” images_set' /></figure></p>

<p>Sin embargo, de esta forma lo único que estamos haciendo es escribiendo algunas etiquetas HTML en el documento de salida, falta escribir los tags <code>html</code>, <code>head</code>, <code>body</code>… entre otros para que el HTML sea válido.</p>

<h3 id=\"convert-conversin-personalizada\">Convert (conversión personalizada)</h3>
<p>Para nuestra suerte, el desarrollador de CommonMark, nos permite configurar la forma en la que se <em>renderea</em>
 el resultado de la conversión. Esto, a través de la clase <code>CommonMarkSettings</code> y un derivado de <code>HtmlFormatter</code>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">class</span> <span class="nc">CustomHtmlFormatter</span> <span class="p">:</span> <span class="n">CommonMark</span><span class="p">.</span><span class="n">Formatters</span><span class="p">.</span><span class="n">HtmlFormatter</span>
<span class="p">{</span>
    <span class="c1">// … </span></code></pre></figure></p>

<h4 id=\"writeinline\">WriteInline</h4>
<p>El método <code>WriteInline</code>, que permite modificar la manera en que se <em>renderea</em> un elemento en HTML. en el ejemplo siguiente se modifica la forma en la que se escriben las etiquetas <code>a</code> para que los enlaces se abran en una nueva pestaña:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">WriteInline</span><span class="p">(</span><span class="n">Inline</span> <span class="n">inline</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isOpening</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isClosing</span><span class="p">,</span> <span class="k">out</span> <span class="kt">bool</span> <span class="n">ignoreChildNodes</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">inline</span><span class="p">.</span><span class="n">Tag</span> <span class="p">==</span> <span class="n">InlineTag</span><span class="p">.</span><span class="n">Link</span><span class="p">)</span> <span class="c1">// Es enlace</span>
        <span class="p">{</span>
            <span class="n">ignoreChildNodes</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span> <span class="c1">// Queremos seguir procesando los nodos hijo&lt;/p&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>        <span class="c1">//  Revisamos si es la etiqueta de apertura</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">isOpening</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;&amp;lt;a target=\\&quot;</span><span class="n">_blank</span><span class="err">\\</span><span class="s">&quot; href=\\&quot;</span><span class="err">\</span><span class="s">&quot;);</span>
            <span class="k">this</span><span class="p">.</span><span class="n">WriteEncodedUrl</span><span class="p">(</span><span class="n">inline</span><span class="p">.</span><span class="n">TargetUrl</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;\\&quot;</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">\</span><span class="s">&quot;);</span>
        <span class="p">}</span>

        <span class="c1">//  Revisamos si es la etiqueta de cierre</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">isClosing</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;&amp;lt;/a&amp;gt;\&quot;);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="c1">// Usamos la implementación por default para otro los otros nodos</span>
        <span class="k">base</span><span class="p">.</span><span class="n">WriteInline</span><span class="p">(</span><span class="n">inline</span><span class="p">,</span> <span class="n">isOpening</span><span class="p">,</span> <span class="n">isClosing</span><span class="p">,</span> <span class="k">out</span> <span class="n">ignoreChildNodes</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span> </code></pre></figure>   
</code></pre>

<h4 id=\"writeblock\">WriteBlock</h4>

<p>Pero esta es solo una opción de configuración, ya que por otro lado podemos sobrescribir el método <code>WriteBlock</code> para escribir bloques completos. En este caso, usaremos el método para escribir un documento HTML válido:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp">    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">WriteBlock</span><span class="p">(</span><span class="n">Block</span> <span class="n">block</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isOpening</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">isClosing</span><span class="p">,</span> <span class="k">out</span> <span class="kt">bool</span> <span class="n">ignoreChildNodes</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="c1">// Si es un tag de apertura y es Document</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">isOpening</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">block</span><span class="p">.</span><span class="n">Tag</span> <span class="p">==</span> <span class="n">BlockTag</span><span class="p">.</span><span class="n">Document</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="err">“</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">html</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">”</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="err">“</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">head</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">meta</span> <span class="n">charset</span><span class="p">=</span><span class="err">\</span><span class="s">&quot;UTF-8\&quot;&amp;gt;\n&amp;lt;link href=\&quot;https://github.com/jasonm23/markdown-css-themes/raw/gh-pages/markdown6.css\&quot; rel=\&quot;stylesheet\&quot; &amp;gt;&amp;lt;/head&amp;gt;”);</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="err">“</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">body</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">”</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c1">// Si es un tag de cierre y es Document</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">isClosing</span> <span class="p">&amp;</span><span class="n">amp</span><span class="p">;&amp;</span><span class="n">amp</span><span class="p">;</span> <span class="n">block</span><span class="p">.</span><span class="n">Tag</span> <span class="p">==</span> <span class="n">BlockTag</span><span class="p">.</span><span class="n">Document</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="err">“</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;/</span><span class="n">body</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">lt</span><span class="p">;/</span><span class="n">html</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="err">”</span><span class="p">);</span>
        <span class="p">}&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span>    <span class="c1">// LLamamos a la implementación por default para procesar los otros nodos</span>
    <span class="k">base</span><span class="p">.</span><span class="n">WriteBlock</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">isOpening</span><span class="p">,</span> <span class="n">isClosing</span><span class="p">,</span> <span class="k">out</span> <span class="n">ignoreChildNodes</span><span class="p">);</span>
<span class="p">}</span> </code></pre></figure>
</code></pre>

<p>Tras lo cual, podrías tener algo como esto:</p>

<p><figure><img src='/postimages/post/commonmark/post.jsonraw_output_2.png' alt='“Salida” images_set' /></figure></p>

<p>Gran diferencia, ¿no?</p>

<h2 id=\"casos-de-uso\">Casos de uso</h2>
<p>Esta librería tiene una tarea en específico, y tal vez te resulte complicado encontrarle un uso, pero si como yo, estás <a href=\"#\" target=\"_blank\">creando un visor de Markdown</a> o, estás creando tu <a href=\"https://davidwalsh.name/introduction-static-site-generators\" target=\"_blank\">generador de sitios estáticos</a> (el blog usa jekyll, pero he pensado en crear un generador con C#).</p>

<h2 id=\"conclusin\">Conclusión</h2>
<p>Como pudiste observar, la API de CommonMark.NET es bastante sencilla de aprender y usar, en donde la cosa se puede tornar un poco complicada es cuando queremos personalizar el resultado final mediante la clase <code>CommonMarkSettings</code>.</p>

<h1 id=\"instalacin\">Instalación</h1>
<p>En el gestor de paquetes de NuGet: <code>CommonMark.NET</code></p>

<p>O desde la consola:</p>

<p><figure class="console"><pre><code>PM&gt; Install-Package CommonMark.NET</code></pre></figure></p>

<p>Y al igual que con todos los NuGets, no olvides revisar el código fuente de <em>CommonMark.NET</em> <a href=\"https://github.com/Knagis/CommonMark.NET\" target=\"_blank\">en GitHub</a>, en donde encontrarás gran parte de la <a href=\"https://github.com/Knagis/CommonMark.NET/blob/master/CommonMark/Formatters/HtmlFormatter.cs\" target=\"_blank\">documentación en el código</a>, lo cual es absolutamente fantástico.</p>
"
}