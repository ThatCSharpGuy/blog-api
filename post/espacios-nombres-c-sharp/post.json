{	
	"id" : "/post/espacios-nombres-c-sharp/",
	"tv" : false,
	"date": "2017-01-24 13:00:01 -0600",
	"title" : "Espacios de nombres en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/namespaces.png",
	"tags" : ["AprendeCSharp"],
	"content": "El post de hoy trata sobre algo que muchos desarolladores a veces damos por hecho y no le prestamos mucha atención cuando estamos escribiendo el código de nuestras aplicaciones.\n\nSe trata de los *namespaces* o *espacios de nombres*, que no solo son esos líneas de código que vienen por default cuando creamos una aplicación nueva usando Visual Studio.\n\nSiempre ha sido una necesidad de gran importancia el poder acomodar nuestro código en bloques lógicamente relacionados, de tal modo que quede organizado y sea fácil de leer, entender y luego de esccribir. Para realizar esta organización nos podemos ayudar de los *nombres de espacios*.\n\nPara definir un *espacio de nombres* se usa la siguiente sintaxis:\n\n<pre class=\"csharp\">\nnamespace [nombre del namespace]\n\n    // Alcance\n\n</pre>  \n\nPor ejemplo, mira la siguiente declaración de uno:  \n\n<pre class=\"csharp\">\nnamespace That\n\n</pre>  \n\nLos namespaces pueden ser anidados, es decir, uno dentro de otro, así que puedes hacer cosas como esta:  \n\n<pre class=\"csharp\">\nnamespace That\n\n    namespace C\n    \n        namespace Sharp\n        \n            namespace Guy\n            \n                public class Uno  \n</pre>  \n\nOtra forma de anidación es la siguiente:\n\n<pre class=\"csharp\">\nnamespace That.C.Sharp.Guy\n\n    public class Dos  \n\n</pre>  \n\nO realuzar cualquier combinación:  \n\n<pre class=\"csharp\">\nnamespace That.C\n\n    namespace Sharp.Guy\n    \n        public class Tres  \n    \n\n</pre>  \n\nA final de cuentas todos los tipos terminan siendo accesibles de la misma manera:\n\n<pre class=\"csharp\">\nThat.C.Sharp.Guy.Dos dos;\nThat.C.Sharp.Guy.Uno uno;\nThat.C.Sharp.Guy.Tres tres;\n</pre>  \n\n## Reusar espacios de nombres\n\nEs importante señalar que aunque no hay nada que nos impida usar los *espacios de nombres* del framework de .NET, como en el ejemplo siguiente:  \n\n<pre class=\"csharp\">\nnamespace System.Collections.Generic\n\n    public class OtraColeccion\n    \n    \n\n</pre>  \n\nDebes pensar dos veces al hacerlo, ya que a pesar de que funciona:  \n\n<pre class=\"csharp\">\nusing System.Collections.Generic;\n\nclass MainClass\n\n    static void Main(string[] args)\n    \n        OtraColeccion coleccion = new OtraColeccion();\n</pre>  \n\nExiste el potencial de confundir a los usuarios de tu código al hacerles creer que el framework contiene tipos de dato que en realidad no.\n\n## Alcance de los `usings`  \nLos *espacios de nombres* nos ayudan también a establecer el alcance de otros *nombres de espacios* importados mediante la instrucción `using`, ya que podemos escribirlos dentro de la declaración de uno de ellos, indicando que ese `using` será válido solo dentro de su alcance: \n\n<pre class=\"csharp\">\nnamespace Alcance\n\n    using System;\n</pre>  \n\n\n## El alias `global` \nPuede que mientras estamos desarrollando una app, te encuentres con la necesidad de escibir código que tenga los mismos identificadores que algúna otra porción existente, como es el caso de el siguiente ejemplo:\n\n<pre class=\"csharp\">\nnamespace Spaceship\n\n    namespace System\n    \n        public class Console\n        \n            void TurnOn()\n            \n                //Console.WriteLine(\"La consola fue encendida\");\n</pre>  \n\nComo podrás observar, en el código anterior se definen un *espacio de nombres*: `Spaceship` y `System`, este último contiene la clase `Console`... ahora, imagina que dentro del método TurnOn queremos informar al usuario que la consola está encendida. Pero no podemos usar directamente el método `Console.WriteLine`, porque el compilador piensa que nos estamos refiriendo a **nuestra** clase `Console`.  \n\nPero no te preocupes, para este tipo de casos extremos ex que existe el alias `global` que en pocas palabras *reestablece* los alcances de los namespaces, permitiéndonos así hacer uso de -casi- cualquier espacio de nombres, sin importar que existan conflicto entre ellos. Para escribir a consola dentro del método anterior simplemente tenemos que reescribir la línea como sigue:  \n\n<pre class=\"csharp\">\nglobal::System.Console.WriteLine(\"La consola ha sido encendida\");\n</pre>  \n\n## Eligiendo un nombre de espacio  \nAdemás del orden lógico muchas veces los *namespaces* se usan también para crear un \"sentido\" de pertenencia a quien creo el código. Muchas veces se sugiere que los nombres de espacio tengan la siguiente forma:  \n\n`<Compañía>.(<Producto o Technología>)[.<Característica>][.<Nombres de espacio de código>]`\n\nComo en `Microsoft.Web.Infrastructure`, aunque también hay exepciones como `System.IO.Stream`.\n\n\n\n## ¿Necesito meter mi código en un *namespace*?  \nNo, no es necesario, puedes dejar todo tu código fuera de cualquier *namespace*, sin embargo esto no es tan recomendable por cuestiones meramente de organización. A menos que desemos que el tipo de dato creado esté disponibles globalmente en nuestro código."
}