{	
	"id" : "/post/genericos-c-sharp-clases/",
	"tv" : false,
	"date": "2016-06-12 14:00:01 -0500",
	"title" : "Clases genéricas en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//aprende-c-sharp/generics-es.png",
	"tags" : ["AprendeCSharp"],
	  
	"content": '"Más de C#. En este post toca hablar sobre los genéricos\n\nLos genéricos, y más concretamente en este post los tipos genéricos, son un mecanismo de C# que nos ayuda a maximizar la reutilización de código. La reutilización de código se logra a través de el uso de plantillas (*templates*) de código en las cuales se insertan marcadores (*placeholders*) que representarán los tipos de dato que usaremos en nuestra plantilla.\n\n## Sintaxis\n\nLa declaración de tipos genéricos se realiza casi como cualquier otro tipo, con la diferencia de que tenemos que declarar los *placeholders* entre signos `<` y `>`, por ejemplo, \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">Box</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span><span class="err">\</span><span class="n">n</span></code></pre></figure>   \n\nEn la cual le estamos indicando que usaremos un marcador llamado `T`. Que se lee como \"Box de T\". Luego entonces dentro de la declaración de la clase podemos reutilizar el marcador `T` tantas veces como queramos:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">T</span> <span class="n">Content</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span>  <span class="n">Box</span><span class="p">(</span><span class="n">T</span> <span class="n">content</span><span class="p">)</span><span class="err">\</span><span class="n">n</span>    <span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="n">Content</span> <span class="p">=</span> <span class="n">content</span><span class="p">;</span><span class="err">\</span><span class="n">n</span>    <span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nPara hacer uso de un tipo genérico la sintaxis es más o menos igual a cualquier tipo por referencia: debemos usar el operador `new`, el constructor de la clase e indicarle dentro de `<` y `>` los tipos con los que queremos que se reemplaze el marcador.\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">cajaDeEntero</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Box</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="m">5</span><span class="p">);</span><span class="err">\</span><span class="n">nvar</span> <span class="n">cajaDeString</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Box</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(</span><span class="err">\</span><span class="s">&quot;Hola mundo\&quot;);\n\nConsole.WriteLine(cajaDeEntero.Content); // 5\nConsole.WriteLine(cajaDeString.Content); // Hola mundo\n</span></code></pre></figure>  \n\nTambién podemos anidar declaraciones en los tipos genéricos:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">cajaDeCajas</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Box</span><span class="p">&lt;</span><span class="n">Box</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">cajaDeString</span><span class="p">);</span><span class="err">\</span><span class="n">nConsole</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">cajaDeCajas</span><span class="p">);</span> <span class="c1">// [Box: Content=[Box: Content=Hola mundo]]\n</span></code></pre></figure>  \n\nNo hay \"límite\" en cuanto al nombre o cantidad de tipos que podemos usar, por ejemplo:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">ComplexBox</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">Content1</span><span class="p">,</span> <span class="n">Content2</span><span class="p">&gt;</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">Content1</span> <span class="n">C1</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">Content2</span> <span class="n">C2</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">T</span> <span class="n">Item</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">ComplexBox</span><span class="p">(</span><span class="n">Content1</span> <span class="n">c1</span><span class="p">,</span> <span class="n">Content2</span> <span class="n">c2</span><span class="p">)</span><span class="err">\</span><span class="n">n</span>    <span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="n">C1</span> <span class="p">=</span> <span class="n">c1</span><span class="p">;</span><span class="err">\</span><span class="n">n</span>        <span class="n">C2</span> <span class="p">=</span> <span class="n">c2</span><span class="p">;</span><span class="err">\</span><span class="n">n</span>    <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span><span class="c1">// ...\n\nvar cajota = new ComplexBox&lt;double, decimal, float&gt;(1, 2)\n{\n    Item = 3\n};\n</span></code></pre></figure>  \n\n### Restricción where  \n\nDe entrada, si solo especificamos de esta manera `Box<T>` los genéricos, podríamos crear objetos a partir de `Box` sin limitacio\n\nEs por eso que usando la cláusula *where X : [Condición]* podemos limitar qué tipo de datos aceptará nuestro tipo genérico como *marcadores*, por ejemplo, supongamos que tenemos las clases:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">LimitedBox</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">struct</span><span class="err">\</span><span class="n">n</span>    <span class="c1">// ...\n\npublic class LimitedBox&lt;X0,X1&gt; \n    where X0 : struct\n    where X1 : IEquatable&lt;X1&gt;\n    // ...\n\npublic class LimitedBox&lt;T, U, V&gt;\n    where T : struct\n    where U : IEquatable&lt;U&gt;\n    where V : new()\n    // ...\n</span></code></pre></figure>  \n\nEstamos limitando a que:\n\n  - `LimitedBox<T>` únicamente acepte en `T`, tipos que sean `struct` como `decimal` y `DateTime`\n  - `LimitedBox<X0, X1>` únicamente acepte en `X0`, tipos que sean `struct` como `decimal` y `DateTime` y en `X1` objetos que implementen la interfaz `IEquatable`\n  - `LimitedBox<T, U, V>` similar al anterior, solo que en el tercer parámetro, `V`, únicamente aceptará objetos que tengan un constructor vacío que se a público\n\nLa lista completa de restricciones se encuentra en <a href=\"https://msdn.microsoft.com/en-us/library/d5x73970.aspx\" target=\"_blank\" rel=\"nofollow\">este enlace</a>.\n\n### Ejemplos  \n\nPero bueno, veamos un ejemplo. \n\nImaginate un programa para gestionar un deportivo, en el que existen equipos de futbol y de béisbol, compuestos por atletas, `Athlete`, (que a su vez se divide en futbolistas, `FootballPlayer`, y por beisbolistas, `BaseballPlayer`):\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">Athlete</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">double</span> <span class="n">Height</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">double</span> <span class="n">Weight</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">FootballPlayer</span> <span class="p">:</span> <span class="n">Athlete</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Position</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">int</span> <span class="n">Goals</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> <span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">BaseballPlayer</span> <span class="p">:</span> <span class="n">Athlete</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Position</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">int</span> <span class="n">GamesStarted</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>  <span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n</div>  \n</div>\n\nAhora, para crear los equipos podríamos tener clases separadas para representar cada equipo:\n\n<div class=\"pure-g\">\n<div class=\"pure-u-1 pure-u-md-1-2\">\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">BaseballTeam</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">string</span> <span class="n">CoachName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">BaseballPlayer</span><span class="p">[]</span> <span class="n">Members</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">BaseballTeam</span><span class="p">(</span><span class="kt">int</span> <span class="n">maxMembers</span><span class="p">)</span><span class="err">\</span><span class="n">n</span>    <span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="n">Members</span> <span class="p">=</span> <span class="k">new</span> <span class="n">BaseballPlayer</span><span class="p">[</span><span class="n">maxMembers</span><span class="p">];</span><span class="err">\</span><span class="n">n</span>    <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n</div>\n<div class=\"pure-u-1 pure-u-md-1-2\">\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">FootballTeam</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">string</span> <span class="n">CoachName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">FootballPlayer</span><span class="p">[]</span> <span class="n">Members</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">FootballTeam</span><span class="p">(</span><span class="kt">int</span> <span class="n">maxMembers</span><span class="p">)</span><span class="err">\</span><span class="n">n</span>    <span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="n">Members</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FootballPlayer</span><span class="p">[</span><span class="n">maxMembers</span><span class="p">];</span><span class="err">\</span><span class="n">n</span>    <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n</div>  \n</div>\n\nY para crear equipos tendríamos que hacer algo así:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">vitesse</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FootballTeam</span><span class="p">(</span><span class="m">18</span><span class="p">);</span> <span class="err">\</span><span class="n">nvitesse</span><span class="p">.</span><span class="n">Members</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FootballPlayer</span> <span class="p">{</span> <span class="n">Name</span> <span class="p">=</span> <span class="err">\</span><span class="s">&quot;Alex Renato Ibarra Mina\&quot; };\n        \nvar losAngeles = new BaseballTeam(25);\nlosAngeles.Members[0] = new BaseballPlayer { Name = \&quot;Julio César Urías\&quot; };\n</span></code></pre></figure>  \n\n### Genéricos  \n\nO, para maximizar la reutilización de código, podríamos crear una clase genérica, digamos `Team<T>` (\"Team de T\"), para poder reutilizarla (y no solo con equipos de futbol o beisbol):\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">Team</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="kt">string</span> <span class="n">CoachName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">T</span><span class="p">[]</span> <span class="n">Members</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">n</span>    <span class="k">public</span> <span class="n">Team</span><span class="p">(</span><span class="kt">int</span> <span class="n">maxMembers</span><span class="p">)</span><span class="err">\</span><span class="n">n</span>    <span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="n">Members</span> <span class="p">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">maxMembers</span><span class="p">];</span><span class="err">\</span><span class="n">n</span>    <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nY usarlo de esta manera:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">vitesse</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Team</span><span class="p">&lt;</span><span class="n">FootballPlayer</span><span class="p">&gt;(</span><span class="m">18</span><span class="p">);</span><span class="err">\</span><span class="n">nvitesse</span><span class="p">.</span><span class="n">Members</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FootballPlayer</span> <span class="p">{</span> <span class="n">Name</span> <span class="p">=</span> <span class="err">\</span><span class="s">&quot;Alex Renato Ibarra Mina\&quot; };\n\nvar losAngeles = new Team&lt;BaseballPlayer&gt;(25);\nlosAngeles.Members[0] = new BaseballPlayer { Name = \&quot;Julio César Urías\&quot; };\n</span></code></pre></figure>  \n\nSi dejamos la clase `Team<T>` como está, podríamos hacer cosas como esta:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">equipoDeEnteros</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Team</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="m">10</span><span class="p">);</span><span class="err">\</span><span class="n">nvar</span> <span class="n">otroEquipo</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Team</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;(</span><span class="m">1233</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nQue tal vez no tienen mucho sentido en nuestra aplicación. Es por eso que usando la restricción `where` podemos limitar al tipo `Team<T>` para que únicamente acepte `Athlete`s:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">Team</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">Athlete</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n## Ejemplos del Framework\n\nEn el Framework .NET existen numerosos ejemplos de tipos genéricos, siendo el más usado y conocido, las <a href=\"https://msdn.microsoft.com/es-es/library/bb762916(v=vs.110).aspx\" target=\"_blank\" rel=\"nofollow\">colecciones genéricas</a> y las <a href=\"../tuples-c-sharp\">tuplas en C#</a>.\n\n## Para cerrar\n\nUsar los genéricos permiten dos cosas: Incrementar la reutilización de código manteniendo el tipado fuerte y reducir el impacto al desempeño en nuestras apps al evitar el <a href=\"https://msdn.microsoft.com/en-us/library/yz2be5wk.aspx\" target=\"_blank\" rel=\"nofollow\">boxing y unboxing</a>, de ahí la importancia de su existencia.\n\nAdemás, los genéricos existen también para métodos, post sobre el que estaré escribiendo en el futuro."'   
}