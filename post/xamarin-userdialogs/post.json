{	
	"id" : "/post/xamarin-userdialogs/",
	"tv" : false,
	"date": "2017-01-17 13:00:01 -0600",
	"title" : "UserDialogs en Xamarin Forms",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//xamarin-forms/userdialogs/featured.jpg",
	"tags" : ["Xamarin","XamarinForms","NuGetRecomendado"],
	  
	"content": '"Creo que todos estamos de acuerdo en que Xamarin.Forms es fantástico... sin embargo no soluciona todos nuestros problemas cuando desarrollamos. \n\nUna de las principales \"fallas\" es la falta de una forma avanzada de mostrar mensajes al usuario. Sí, sí, con Xamarin.Forms tenemos los métodos `DisplayAlert`:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nawait</span> <span class="n">DisplayAlert</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Traditional alert\&quot;, \&quot;Traditional message\&quot;, \&quot;It&#39;s not so cool\&quot;);\n\nvar result = await DisplayAlert(\&quot;Traditional alert\&quot;, \&quot;Traditional message?\&quot;, \&quot;OK\&quot;, \&quot;Cancel\&quot;);\nTraditionalPromptLabel.Text = string.Format(\&quot;Result {0}\&quot;, result);\n</span></code></pre></figure>  \n\nEstos métodos solamente muestran un mensaje sencillo y permiten que el usuario responda con un valor booleano, y además requieren de tener una referencia a la página en la que queremos mostrar la alerta.  \n\nEs por eso que cuando queremos obtener más información de quien está usando nuesta app podemos recurrir a un paquete de NuGet que nos permitirá hacer operaciones como:  \n\n## Mostrar un mensaje \"Toast\"   \nCon *UserDialogs* podemos mostrar mensajes en varias plataformas de manera que en Android lo hacemos con la popular `Toast`:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nUserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Toast</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Toast message: &lt;3\&quot;, TimeSpan.FromMilliseconds(millis));\n</span></code></pre></figure>  \n\n<figure><img src='/postimages/post/xamarin-userdialogs/post.jsontoast.png' alt='\"Login prompt\" images_set' /></figure>\n\n## Mostrar un error\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nUserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">ShowError</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;¡Error!\&quot;, millis);\n</span></code></pre></figure>  \n\n## Mostrar un mensaje de éxito \n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nUserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">ShowSuccess</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;¡Éxito!\&quot;, millis);\n</span></code></pre></figure>  \n\nPero no solo eso, también podemos recibir información a través de UserDialogs\n\n## PromptAsync  \nSolicitar información del usuario, ya sea que estés buscando un nombre, un teléfono, un password...\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">promptConfig</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PromptConfig</span><span class="p">();</span><span class="err">\</span><span class="n">npromptConfig</span><span class="p">.</span><span class="n">InputType</span> <span class="p">=</span> <span class="n">InputType</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span><span class="err">\</span><span class="n">npromptConfig</span><span class="p">.</span><span class="n">IsCancellable</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span><span class="err">\</span><span class="n">npromptConfig</span><span class="p">.</span><span class="n">Message</span> <span class="p">=</span> <span class="err">\</span><span class="s">&quot;Write your name\&quot;;\nvar result = await UserDialogs.Instance.PromptAsync(promptConfig);\nif (result.Ok)\n{\n    PromptedTextLabel.Text = result.Text;\n}\n</span></code></pre></figure>  \n\n<figure><img src='/postimages/post/xamarin-userdialogs/post.jsontext.png' alt='\"Text prompt\" images_set' /></figure>\n\n## PromptDateAsync  \nSolicitar una fecha, presentando un control muy familiar dependiendo de la plataforma en que se ejecute:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">UserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">DatePromptAsync</span><span class="p">(</span><span class="err">\</span><span class="n">n</span>    <span class="err">\</span><span class="s">&quot;Select date\&quot;,\n    DateTime.Now);\nif (result.Ok)\n    SelectedDateLabel.Text = String.Format(\&quot;{0:dd MMMM yyyy}\&quot;, result.SelectedDate);\n</span></code></pre></figure>  \n\n<figure><img src='/postimages/post/xamarin-userdialogs/post.jsoncalendar.png' alt='\"Calendar prompt\" images_set' /></figure>\n\n## PromptTimeAsync  \nAl igual que con la fecha, este diálogo presenta un contol para seleccionar una hora  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">UserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">TimePromptAsync</span><span class="p">(</span><span class="err">\</span><span class="n">n</span>    <span class="err">\</span><span class="s">&quot;Select time\&quot;,\n    DateTime.Now.TimeOfDay);\nif (result.Ok)\n    SelectedTimeLabel.Text = String.Format(\&quot;{0:hh-mm}\&quot;, new DateTime(result.SelectedTime.Ticks));\n</span></code></pre></figure>  \n\n<figure><img src='/postimages/post/xamarin-userdialogs/post.jsontime.png' alt='\"Time prompt\" images_set' /></figure>\n\n## PromptLoginAsync  \nSi quieres algo un poco más compuesto como una \"pantalla\" de *login*, también puedes usar esta pequeña librería:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">loginResult</span> <span class="p">=</span> <span class="k">await</span> <span class="n">UserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">LoginAsync</span><span class="p">(</span><span class="err">\</span><span class="s">&quot;Login\&quot;, \&quot;Please sign in\&quot;);\nif (loginResult.Ok)\n{\n    PromptedLoginLabel.Text = String.Format(\&quot;{0}:{1}\&quot;, loginResult.Value.UserName, loginResult.Value.Password);\n}\n</span></code></pre></figure>  \n\n<figure><img src='/postimages/post/xamarin-userdialogs/post.jsonlogin.png' alt='\"Login prompt\" images_set' /></figure>\n\n## Inyección de dependencias  \nComo mencioné anteriormente el mecanismo de diálogos que provee Forms por default requieren de tener una referencia a la página en la que estamos trabajando, sin embargo *UserDialogs* no, y eso lo hace ideal para usarlo en conjunto con una solución de <a href=\"http://thatcsharpguy.com/tv/inyeccion-dependencias/\" target=\"_blank\">inyección de dependencias</a>.\n\n## Personalización  \nEn este post mostré únicamente las opciones más sencillas de esta librería, sin embargo también podemos personalizarla casi tanto como deseamos, es por eso que te propongo que <a href=\"https://github.com/ThatCSharpGuy/UserDialogs-Sample\" target=\"_blank\">descargues el código</a> de ejemplo y practiques con él.\n\n# Instalación  \nComo siempre, hay que buscar en el gestor de paquetes de NuGet: `Acr.UserDialogs`\n\nO desde la consola: \n\n<figure class="console"><pre><code>\nPM> Install-Package Acr.UserDialogs\n</code></pre></figure>\n\nRecuerda que si lo usas en Xamarin.Forms debes instalar Acr.UserDialogs en todos tus proyectos (núcleo y clientes) para que funcione correctamente.\n"'   
}