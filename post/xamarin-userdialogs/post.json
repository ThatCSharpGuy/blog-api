{	
	"id" : "/post/xamarin-userdialogs/",
	"tv" : false,
	"date": "2017-01-17 13:00:01 -0600",
	"title" : "UserDialogs en Xamarin Forms",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//xamarin-forms/userdialogs/featured.jpg",
	"tags" :
	[ 
		"Xamarin",
		"XamarinForms",
		"NuGetRecomendado"
	],
	"content" : "<p>Creo que todos estamos de acuerdo en que Xamarin.Forms es fantástico… sin embargo no soluciona todos nuestros problemas cuando desarrollamos.</p>

<p>Una de las principales “fallas” es la falta de una forma avanzada de mostrar mensajes al usuario. Sí, sí, con Xamarin.Forms tenemos los métodos <code>DisplayAlert</code>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">await</span> <span class="nf">DisplayAlert</span><span class="p">(</span><span class="err">“</span><span class="n">Traditional</span> <span class="n">alert</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Traditional</span> <span class="n">message</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">It</span><span class="err">’</span><span class="n">s</span> <span class="n">not</span> <span class="n">so</span> <span class="n">cool</span><span class="err">”</span><span class="p">);&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">DisplayAlert</span><span class="p">(</span><span class="err">“</span><span class="n">Traditional</span> <span class="n">alert</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Traditional</span> <span class="n">message</span><span class="p">?</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">OK</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Cancel</span><span class="err">”</span><span class="p">);</span>
<span class="n">TraditionalPromptLabel</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="n">Result</span> <span class="p">{</span><span class="m">0</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span></code></pre></figure></p>

<p>Estos métodos solamente muestran un mensaje sencillo y permiten que el usuario responda con un valor booleano, y además requieren de tener una referencia a la página en la que queremos mostrar la alerta.</p>

<p>Es por eso que cuando queremos obtener más información de quien está usando nuesta app podemos recurrir a un paquete de NuGet que nos permitirá hacer operaciones como:</p>

<h2 id=\"mostrar-un-mensaje-toast\">Mostrar un mensaje “Toast”</h2>
<p>Con <em>UserDialogs</em> podemos mostrar mensajes en varias plataformas de manera que en Android lo hacemos con la popular <code>Toast</code>:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">UserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">Toast</span><span class="p">(</span><span class="err">“</span><span class="n">Toast</span> <span class="n">message</span><span class="p">:</span> <span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="m">3</span><span class="err">”</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromMilliseconds</span><span class="p">(</span><span class="n">millis</span><span class="p">));</span></code></pre></figure></p>

<p><figure><img src='/postimages/post/xamarin-userdialogs/post.jsontoast.png' alt='“Login prompt” images_set' /></figure></p>

<h2 id=\"mostrar-un-error\">Mostrar un error</h2>
<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">UserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">ShowError</span><span class="p">(</span><span class="err">“¡</span><span class="n">Error</span><span class="p">!</span><span class="err">”</span><span class="p">,</span> <span class="n">millis</span><span class="p">);</span></code></pre></figure></p>

<h2 id=\"mostrar-un-mensaje-de-xito\">Mostrar un mensaje de éxito</h2>
<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">UserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">ShowSuccess</span><span class="p">(</span><span class="err">“¡</span><span class="n">Éxito</span><span class="p">!</span><span class="err">”</span><span class="p">,</span> <span class="n">millis</span><span class="p">);</span></code></pre></figure></p>

<p>Pero no solo eso, también podemos recibir información a través de UserDialogs</p>

<h2 id=\"promptasync\">PromptAsync</h2>
<p>Solicitar información del usuario, ya sea que estés buscando un nombre, un teléfono, un password…</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">promptConfig</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PromptConfig</span><span class="p">();</span>
<span class="n">promptConfig</span><span class="p">.</span><span class="n">InputType</span> <span class="p">=</span> <span class="n">InputType</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span>
<span class="n">promptConfig</span><span class="p">.</span><span class="n">IsCancellable</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
<span class="n">promptConfig</span><span class="p">.</span><span class="n">Message</span> <span class="p">=</span> <span class="err">“</span><span class="n">Write</span> <span class="n">your</span> <span class="n">name</span><span class="err">”</span><span class="p">;</span>
<span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">UserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">PromptAsync</span><span class="p">(</span><span class="n">promptConfig</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Ok</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">PromptedTextLabel</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">result</span><span class="p">.</span><span class="n">Text</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure></p>

<p><figure><img src='/postimages/post/xamarin-userdialogs/post.jsontext.png' alt='“Text prompt” images_set' /></figure></p>

<h2 id=\"promptdateasync\">PromptDateAsync</h2>
<p>Solicitar una fecha, presentando un control muy familiar dependiendo de la plataforma en que se ejecute:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">UserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">DatePromptAsync</span><span class="p">(</span>
    <span class="err">“</span><span class="n">Select</span> <span class="n">date</span><span class="err">”</span><span class="p">,</span>
    <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Ok</span><span class="p">)</span>
    <span class="n">SelectedDateLabel</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">dd</span> <span class="n">MMMM</span> <span class="n">yyyy</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">SelectedDate</span><span class="p">);</span></code></pre></figure></p>

<p><figure><img src='/postimages/post/xamarin-userdialogs/post.jsoncalendar.png' alt='“Calendar prompt” images_set' /></figure></p>

<h2 id=\"prompttimeasync\">PromptTimeAsync</h2>
<p>Al igual que con la fecha, este diálogo presenta un contol para seleccionar una hora</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="k">await</span> <span class="n">UserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">TimePromptAsync</span><span class="p">(</span>
    <span class="err">“</span><span class="n">Select</span> <span class="n">time</span><span class="err">”</span><span class="p">,</span>
    <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">.</span><span class="n">TimeOfDay</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">Ok</span><span class="p">)</span>
    <span class="n">SelectedTimeLabel</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">:</span><span class="n">hh</span><span class="p">-</span><span class="n">mm</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="k">new</span> <span class="n">DateTime</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">SelectedTime</span><span class="p">.</span><span class="n">Ticks</span><span class="p">));</span></code></pre></figure></p>

<p><figure><img src='/postimages/post/xamarin-userdialogs/post.jsontime.png' alt='“Time prompt” images_set' /></figure></p>

<h2 id=\"promptloginasync\">PromptLoginAsync</h2>
<p>Si quieres algo un poco más compuesto como una “pantalla” de <em>login</em>, también puedes usar esta pequeña librería:</p>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">loginResult</span> <span class="p">=</span> <span class="k">await</span> <span class="n">UserDialogs</span><span class="p">.</span><span class="n">Instance</span><span class="p">.</span><span class="n">LoginAsync</span><span class="p">(</span><span class="err">“</span><span class="n">Login</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Please</span> <span class="n">sign</span> <span class="k">in</span><span class="err">”</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">loginResult</span><span class="p">.</span><span class="n">Ok</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">PromptedLoginLabel</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="err">“</span><span class="p">{</span><span class="m">0</span><span class="p">}:{</span><span class="m">1</span><span class="p">}</span><span class="err">”</span><span class="p">,</span> <span class="n">loginResult</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">UserName</span><span class="p">,</span> <span class="n">loginResult</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">Password</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>

<p><figure><img src='/postimages/post/xamarin-userdialogs/post.jsonlogin.png' alt='“Login prompt” images_set' /></figure></p>

<h2 id=\"inyeccin-de-dependencias\">Inyección de dependencias</h2>
<p>Como mencioné anteriormente el mecanismo de diálogos que provee Forms por default requieren de tener una referencia a la página en la que estamos trabajando, sin embargo <em>UserDialogs</em> no, y eso lo hace ideal para usarlo en conjunto con una solución de <a href=\"http://thatcsharpguy.com/tv/inyeccion-dependencias/\" target=\"_blank\">inyección de dependencias</a>.</p>

<h2 id=\"personalizacin\">Personalización</h2>
<p>En este post mostré únicamente las opciones más sencillas de esta librería, sin embargo también podemos personalizarla casi tanto como deseamos, es por eso que te propongo que <a href=\"https://github.com/ThatCSharpGuy/UserDialogs-Sample\" target=\"_blank\">descargues el código</a> de ejemplo y practiques con él.</p>

<h1 id=\"instalacin\">Instalación</h1>
<p>Como siempre, hay que buscar en el gestor de paquetes de NuGet: <code>Acr.UserDialogs</code></p>

<p>O desde la consola:</p>

<p><figure class="console"><pre><code>PM&gt; Install-Package Acr.UserDialogs</code></pre></figure></p>

<p>Recuerda que si lo usas en Xamarin.Forms debes instalar Acr.UserDialogs en todos tus proyectos (núcleo y clientes) para que funcione correctamente.</p>
"
}