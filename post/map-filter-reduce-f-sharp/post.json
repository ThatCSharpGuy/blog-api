{	
	"id" : "/post/map-filter-reduce-f-sharp/",
	"tv" : false,
	"date": "2016-07-25 14:00:00 -0500",
	"title" : "Map, reduce y filter en F#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages//map-reduce-filter/featured.png",
	"tags" :
	[ 
		"AprendeFSharp",
		"ProgramaciónFuncional"
	],
	"content" : "<blockquote>
  <p>Este es post es una reedición del post de <a href=\"https://twitter.com/giovanni_cortes\" target=\"_blank\">Giovanni Cortés</a> llamado <a href=\"https://giovannicortes.com/swift/map-filter-reduce-en-swift/\" target=\"_blank\">Map, filter y reduce en Swift</a>, te invito a visitarlo.</p>
</blockquote>

<blockquote>
  <p>También existe este post pero relacionado con C#, <a href=\"../map-filter-reduce-c-sharp\">visítalo aquí</a>.</p>
</blockquote>

<p>F# es un gran lenguaje, y unas de las cosas que me gusta de él es que está orientado completamente a la programación funcional. Comparte varias características con lenguajes como Elixir y otras pocas con lenguajes como Swift.</p>

<p>Una de las características es que las funciones son tratadas como tipos, pueden aceptar funciones como parámetros y retornar funciones. A menudo a las funciones que toman como parámetros otras funciones son llamadas <em>funciones de orden superior</em>.</p>

<p>En este artículo vamos a enfocarnos en tres funciones que vienen incluídas en F# y que son muy poderosas cuando queremos manejar colecciones.</p>

<h2 id=\"map\">Map</h2>
<p>Imaginemos que tenemos un arreglo de números enteros y a todos los elementos queremos elevarlo al cuadrado.</p>

<p>Generalmente haríamos una función con un bucle como el siguiente:</p>

<p><figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">array</span> <span class="o">=</span> <span class="o">[|</span> <span class="mi">2</span><span class="o">;</span> <span class="mi">3</span><span class="o">;</span> <span class="mi">4</span><span class="o">;</span> <span class="mi">5</span><span class="o">;</span> <span class="mi">6</span><span class="o">;</span> <span class="mi">7</span><span class="o">;</span> <span class="mi">8</span><span class="o">;</span> <span class="mi">9</span><span class="o">;</span> <span class="mi">10</span> <span class="o">|]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="nv">squareArray</span> <span class="n">arr</span> <span class="o">=</span> 
    <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">int</span><span class="o">&gt;</span><span class="bp">()</span>
    <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">arr</span> <span class="k">do</span>
        <span class="n">result</span><span class="o">.</span><span class="n">Add</span><span class="o">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="o">)</span>
    <span class="n">result</span><span class="o">.</span><span class="n">ToArray</span><span class="bp">()</span><span class="o">&lt;/</span><span class="n">int</span><span class="o">&gt;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="nv">squaredArray</span> <span class="o">=</span> <span class="n">squareArray</span> <span class="n">array</span>  <span class="c1">// [4, 9, 16, 25, 36, 49, 64, 81, 100]</span></code></pre></figure></p>

<p>La función <code>map</code> resuelve el problema de transformar los elementos de un arreglo pasándoles una función. Esta función itera sobre cada elemento y a cada uno de ellos les aplica la función que nosotros pasemos como parámetro, esto nos ahorra usar mucho los <em>for…in…do</em> y además de que es más elegante. <code>map</code> retorna un arreglo de la misma longitud que el arreglo al cual le aplicamos la transformación.</p>

<p>El código anterior quedaría así:</p>

<p><figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">array</span> <span class="o">=</span> <span class="o">[|</span> <span class="mi">2</span><span class="o">;</span> <span class="mi">3</span><span class="o">;</span> <span class="mi">4</span><span class="o">;</span> <span class="mi">5</span><span class="o">;</span> <span class="mi">6</span><span class="o">;</span> <span class="mi">7</span><span class="o">;</span> <span class="mi">8</span><span class="o">;</span> <span class="mi">9</span><span class="o">;</span> <span class="mi">10</span> <span class="o">|]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="nv">squaredArray</span> <span class="o">=</span> 
    <span class="n">array</span>
    <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span><span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="o">)</span>  <span class="c1">// [4, 9, 16, 25, 36, 49, 64, 81, 100]</span></code></pre></figure></p>

<p>En este caso pasamos la función como una <a href=\"#\" target=\"_blank\" rel=\"nofollow\">expresión lambda</a> <code>fun x -&gt; x * x</code>, donde <code>x</code> es cada elemento del arreglo pasado como parámetro de la expresión, y <code>x * x</code> es el cuerpo de la función, de esa forma pudimos transformar los elementos del arreglo sin crear ningún bucle.</p>

<h2 id=\"filter\">Filter</h2>
<p>Al igual que <code>map</code>, <code>filter</code> es una función que itera sobre los arreglos. Como su nombre lo indica, filtra los elementos de un arreglo de acuerdo a la función que nosotros le pasemos.</p>

<p><code>filter</code> retorna un arreglo con los elementos filtrados del arreglo original, pudiendo ser de igual longitud, menor o vacío.</p>

<p>Supongamos que tenemos un arreglo que representa los nombres de imágenes con diferentes extensiones y queremos obtener solo los jpg:</p>

<p><figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">images</span> <span class="o">=</span> <span class="o">[|</span> 
    <span class="err">“</span><span class="n">hello</span><span class="o">.</span><span class="n">jpg</span><span class="err">”</span>
    <span class="err">“</span><span class="n">world</span><span class="o">.</span><span class="n">jpg</span><span class="err">”</span> 
    <span class="err">“</span><span class="n">hola</span><span class="o">.</span><span class="n">png</span><span class="err">”</span> 
    <span class="err">“</span><span class="n">mundo</span><span class="o">.</span><span class="n">png</span><span class="err">”</span>
    <span class="err">“</span><span class="n">cats</span><span class="o">.</span><span class="n">jpg</span><span class="err">”</span> 
    <span class="err">“</span><span class="n">dogs</span><span class="o">.</span><span class="n">png</span><span class="err">”</span> <span class="o">|]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="nv">getJpgImages</span> <span class="n">images</span> <span class="o">:</span> <span class="kt">string</span> <span class="n">array</span> <span class="o">=</span> 
    <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">List</span><span class="o">&lt;</span><span class="kt">string</span><span class="o">&gt;</span><span class="bp">()</span>
    <span class="k">for</span> <span class="n">x</span> <span class="o">:</span> <span class="kt">string</span> <span class="k">in</span> <span class="n">images</span> <span class="k">do</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">EndsWith</span><span class="o">(</span><span class="err">\</span><span class="s">&quot;.jpg</span><span class="se">\&quot;</span><span class="s">)) then result.Add(x)</span>
<span class="s">    result.ToArray()&lt;/string&gt;&lt;/p&gt;</span>

<span class="s">&lt;p&gt;let jpgImages = getJpgImages images // [“hello.jpg”, “world.jpg”, “cats.jpg”]</span></code></pre></figure></p>

<p>Ahora usemos la función <code>filter</code>:</p>

<p><figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">images</span> <span class="o">=</span> <span class="o">[|</span> 
    <span class="err">“</span><span class="n">hello</span><span class="o">.</span><span class="n">jpg</span><span class="err">”</span>
    <span class="err">“</span><span class="n">world</span><span class="o">.</span><span class="n">jpg</span><span class="err">”</span> 
    <span class="err">“</span><span class="n">hola</span><span class="o">.</span><span class="n">png</span><span class="err">”</span> 
    <span class="err">“</span><span class="n">mundo</span><span class="o">.</span><span class="n">png</span><span class="err">”</span>
    <span class="err">“</span><span class="n">cats</span><span class="o">.</span><span class="n">jpg</span><span class="err">”</span> 
    <span class="err">“</span><span class="n">dogs</span><span class="o">.</span><span class="n">png</span><span class="err">”</span> <span class="o">|]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="nv">jpgImages</span> <span class="o">=</span> 
    <span class="n">images</span>
    <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">filter</span><span class="o">(</span><span class="k">fun</span> <span class="n">image</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">image</span><span class="o">.</span><span class="n">EndsWith</span><span class="o">(</span><span class="err">“</span><span class="o">.</span><span class="n">jpg</span><span class="err">”</span><span class="o">))</span> <span class="c1">// [“hello.jpg”, “world.jpg”, “cats.jpg”]</span></code></pre></figure></p>

<p>Al igual que <code>map</code>, no tuvimos que crear ni un <em>for…in…do</em>, ni tampoco tuvimos que agregar el elemento que estamos filtrando, solamente pasamos nuestra expresión y <code>filter</code> hace todo por nosotros.</p>

<p><strong>NOT</strong> Cabe destacar que F# infiere el tipo de la variable gracias al arreglo original, por eso podemos usar el método <code>EndsWith</code> a cada elemento porque se sabe que es un tipo cadena.</p>

<h3 id=\"reduce\">Reduce</h3>
<p>Al contrario que <code>map</code> y <code>filter</code>, <code>reduce</code> nos retorna un solo valor, que es la combinación de los elementos del arreglo al cual le aplicamos la función.</p>

<p>Prosigamos con el ejemplo de los números, si queremos sumar todos los elementos de un arreglo, haríamos algo como esto:</p>

<p><figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">array</span> <span class="o">=</span> <span class="o">[|</span> <span class="mi">2</span><span class="o">;</span> <span class="mi">3</span><span class="o">;</span> <span class="mi">4</span><span class="o">;</span> <span class="mi">5</span><span class="o">;</span> <span class="mi">6</span><span class="o">;</span> <span class="mi">7</span><span class="o">;</span> <span class="mi">8</span><span class="o">;</span> <span class="mi">9</span><span class="o">;</span> <span class="mi">10</span> <span class="o">|]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="nv">sum</span> <span class="n">arr</span> <span class="o">:</span> <span class="n">int</span> <span class="o">=</span> 
    <span class="k">let</span> <span class="nv">mutable</span> <span class="n">result</span> <span class="o">:</span> <span class="n">int</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">x</span> <span class="k">in</span> <span class="n">arr</span> <span class="k">do</span>
        <span class="n">result</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;-</span> <span class="n">result</span> <span class="o">+</span> <span class="n">x</span>
    <span class="n">result</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="nv">arraySum</span> <span class="o">=</span> <span class="n">sum</span><span class="o">(</span><span class="n">array</span><span class="o">);</span> <span class="c1">// 54</span></code></pre></figure></p>

<p>Cuando usamos <code>reduce</code>, no solamente tenemos que pasar una función, si no también un acumulador, que es el valor inicial de nuestro contador, si es trabajo con enteros generalmente es 0, si son cadenas se pasa una cadena vacía. Depende de lo que quieras hacer.</p>

<p>Ahora el ejemplo con <code>reduce</code>:</p>

<p><figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="k">let</span> <span class="nv">array</span> <span class="o">=</span> <span class="o">[|</span> <span class="mi">2</span><span class="o">;</span> <span class="mi">3</span><span class="o">;</span> <span class="mi">4</span><span class="o">;</span> <span class="mi">5</span><span class="o">;</span> <span class="mi">6</span><span class="o">;</span> <span class="mi">7</span><span class="o">;</span> <span class="mi">8</span><span class="o">;</span> <span class="mi">9</span><span class="o">;</span> <span class="mi">10</span> <span class="o">|]&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">let</span> <span class="nv">arraySum</span> <span class="o">=</span> 
    <span class="n">array</span>
    <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">reduce</span><span class="o">(</span><span class="k">fun</span> <span class="n">acc</span> <span class="n">x</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">acc</span> <span class="o">+</span> <span class="n">x</span><span class="o">)</span> <span class="c1">// 54</span></code></pre></figure></p>

<p>En este caso,  el acumulador toma el valor inicial de 0, ese valor se pasa como parámetro a la expresión lambda, al cual le pusimos como nombre <code>acc</code>. <code>x</code> es cada elemento del arreglo, y el cuerpo de nuestra lambda es la suma del acumulador y cada elemento del arreglo.</p>

<p>Como ves, esta función es un poco más elaborada, pero una vez que le entiendas, puedes hacer muchas cosas interesantes.</p>

<h2 id=\"combinando-todo\">Combinando todo</h2>

<p>Ahora que ya sabemos el uso de estas funciones, vamos a crear un pequeño programa donde usaremos las tres al mismo tiempo.</p>

<p><figure class="highlight"><pre><code class="language-fsharp" data-lang="fsharp"><span class="c1">// Suponiendo que tenemos la siguiente estructura de ciudades</span>
<span class="k">type</span> <span class="nc">City</span> <span class="o">=</span> 
    <span class="k">struct</span>
        <span class="k">val</span> <span class="n">Name</span> <span class="o">:</span> <span class="kt">string</span>
        <span class="k">val</span> <span class="n">Population</span> <span class="o">:</span> <span class="n">int</span>
        <span class="k">new</span><span class="o">(</span><span class="n">name</span> <span class="o">:</span> <span class="kt">string</span><span class="o">,</span> <span class="n">population</span> <span class="o">:</span> <span class="n">int</span><span class="o">)</span> <span class="o">=</span> 
            <span class="o">{</span> <span class="n">Population</span> <span class="o">=</span> <span class="n">population</span>
              <span class="n">Name</span> <span class="o">=</span> <span class="n">name</span> <span class="o">}</span>
    <span class="k">end</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Vamos a definir varios ejemplos de ciudades, y meterlos en un arreglo</span>
<span class="k">let</span> <span class="nv">paris</span> <span class="o">=</span> <span class="k">new</span> <span class="n">City</span><span class="o">(</span><span class="err">“</span><span class="n">Paris</span><span class="err">”</span><span class="o">,</span> <span class="mi">2243</span><span class="o">)</span>
<span class="k">let</span> <span class="nv">madrid</span> <span class="o">=</span> <span class="k">new</span> <span class="n">City</span><span class="o">(</span><span class="err">“</span><span class="n">Madrid</span><span class="err">”</span><span class="o">,</span> <span class="mi">3216</span><span class="o">)</span>
<span class="k">let</span> <span class="nv">amsterdam</span> <span class="o">=</span> <span class="k">new</span> <span class="n">City</span><span class="o">(</span><span class="err">“</span><span class="n">Amsterdam</span><span class="err">”</span><span class="o">,</span> <span class="mi">811</span><span class="o">)</span>
<span class="k">let</span> <span class="nv">berlin</span> <span class="o">=</span> <span class="k">new</span> <span class="n">City</span><span class="o">(</span><span class="err">“</span><span class="n">Berlin</span><span class="err">”</span><span class="o">,</span> <span class="mi">3397</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">table</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">tbody</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">tr</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="k">let</span> <span class="nv">cities</span> <span class="o">=</span> <span class="o">[&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;</span><span class="n">paris</span><span class="o">;</span><span class="n">madrid</span><span class="o">;</span><span class="n">amsterdam</span><span class="o">;</span><span class="n">berlin</span><span class="o">&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="n">td</span><span class="o">&gt;]&lt;/</span><span class="n">td</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="n">tr</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">tbody</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">table</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Como tenemos las ciudades con poca población, vamos a escribir una función</span>
<span class="c1">// que nos ayude a escalar la población</span>
<span class="k">let</span> <span class="nv">scale</span><span class="o">(</span><span class="n">city</span> <span class="o">:</span> <span class="n">City</span> <span class="o">)</span> <span class="o">:</span> <span class="n">City</span> <span class="o">=</span>
    <span class="k">new</span> <span class="n">City</span> <span class="o">(</span> <span class="n">city</span><span class="o">.</span><span class="n">Name</span><span class="o">,</span> <span class="n">city</span><span class="o">.</span><span class="n">Population</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// Ya teniendo todo, vamos a escribir todas las ciudades cuya población</span>
<span class="c1">// sea mayor a 1 millón de habitantes</span>
<span class="k">let</span> <span class="nv">citiesFilter</span> <span class="o">=</span> 
    <span class="n">cities</span>
    <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">filter</span><span class="o">(</span><span class="k">fun</span> <span class="n">city</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">city</span><span class="o">.</span><span class="n">Population</span> <span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="mi">1000</span><span class="o">)</span>
    <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span><span class="o">(</span><span class="n">scale</span><span class="o">)</span>
    <span class="o">|&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">fold</span><span class="o">(</span><span class="k">fun</span> <span class="n">result</span> <span class="n">c</span> <span class="o">-&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">result</span> <span class="o">+</span> <span class="n">sprintf</span> <span class="err">“\</span><span class="n">n</span><span class="o">%</span><span class="n">s</span><span class="o">:</span> <span class="o">%</span><span class="n">d</span><span class="err">”</span> <span class="n">c</span><span class="o">.</span><span class="n">Name</span> <span class="n">c</span><span class="o">.</span><span class="n">Population</span> <span class="o">)</span> <span class="err">“</span><span class="n">City</span> <span class="n">population</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="nn">System</span><span class="p">.</span><span class="nn">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="o">(</span><span class="n">citiesFilter</span><span class="o">)&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="c1">// City population</span>
<span class="c1">// Paris: 2243000</span>
<span class="c1">// Madrid: 3216000</span>
<span class="c1">// Berlin: 3397000</span></code></pre></figure></p>

<p>Listo, tenemos nuestro programa funcionando y filtrando las ciudades, sin necesidad de usar bucles, además que gracias al acumulador usado como cadena, podemos imprimir nuestras ciudades en un lindo formato.</p>

<p>Espero te haya convencido de que empieces a usar estas funciones en tu programa, verás cómo vas a ir haciendo un código mucho más elegante y funcional.</p>
"
}