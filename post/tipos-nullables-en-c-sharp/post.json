{	
	"id" : "/post/tipos-nullables-en-c-sharp/",
	"tv" : false,
	"date": "2015-10-14 15:30:00 -0500",
	"title" : "Tipos nullables en C#",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimagesfeatured.png",
	"tags" :
	[ 
		"AprendeCSharp"
	],
	"content" : "<p>En un post anterior hablaba acerca de los tipos de dato en C#, y me doy cuenta que se me olvidó mencionar una característica importante de los tipos de dato, y para rectificar mi error voy a tomar la clasificación por referencia y valor de la que les platicaba.</p>

<h3 id=\"apuntando-a-la-nada\">Apuntando a la nada</h3>

<p>Los tipos por referencia son <em>nullables</em> por definición. ¿Qué implica que sean <em>nullables</em>? pues nada más y nada menos que puedan tener un valor <code>null</code> o en términos prácticos, nungún valor. Esto se puede explicar desde el nombre mismo, al ser referencias estas <strong>pueden estar referenciando a un valor o a la nada</strong> (a <code>null</code>).</p>

<p>Por otro lado, los <strong>tipos por valor siempre tienen un valor</strong> (valga la redundancia) asignado. Es así que un <code>int</code>, <code>bool</code>, <code>double</code>, etcétera nunca podrán valer <em>null</em>. Y es que estos no hacen referencia a ningún valor, sino que son el valor mismo.</p>

<p>Muchas veces esta limitante nos lleva a inventarnos <em>números mágicos</em> como por ejemplo usar el <code>-1</code> para decir que un entero no tiene valor, o lógicas extrañas dentro de nuestro programa como decir que si un <code>DateTime</code> vale <code>DateTime.MinValue</code> es porque no tiene valor.  También nos complica un poco la vida cuando se trabaja con bases de datos en donde los datos pueden tener un valor o estar indefinidos.</p>

<h3 id=\"la-estructura-nullablelttgt\">La estructura Nullable&lt;T&gt;</h3>
<p>Para nuestra fortuna, C# nos ofrece los <em>nullable types</em>, que son instancias de la estructura <code>Nullable&lt;T&gt;</code> (si no estás familiarizado con la sintaxis <code>&lt;&gt;</code> pronto la explicaré en un post, es maravillosa), donde <code>T</code> es un tipo por valor.</p>

<p>Podemos ver esta estructura como una especie de caja para nuestros tipos por valor, dicha caja provee métodos para saber si contiene un valor y obtener el valor que contiene.</p>

<h4 id=\"trabajando-con-nullablelttgt\">Trabajando con Nullable&lt;T&gt;</h4>
<p>La sintaxis de estos tipos no es muy complicada, y es que además de la declaración convencional:<br />
<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Nullable</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">enteroNullable</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="n">Nullable</span><span class="p">&lt;</span><span class="kt">double</span><span class="p">&gt;</span> <span class="n">puedeValerNull</span> <span class="p">=</span> <span class="m">9.9</span><span class="p">;</span></code></pre></figure>
También podemos usar el símbolo (<code>?</code>) en la declaración de la variable para indicar que se trata de un tipo nullable:  
<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">int?</span> <span class="n">enteroNullable</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="kt">double?</span> <span class="n">puedeValerNull</span> <span class="p">=</span> <span class="m">9.9</span><span class="p">;</span></code></pre></figure>
Aunque en este punto debemos ser cuidadosos, ya que la sintaxis es un poco confusa, ya sabemos, <code>Nullable</code> es una estructura y las estructuras no pueden tener un valor `null`...  ¿entonces qué sucede al momento de asignar un valor a `enteroNullable` en  el código anterior?  
Como dije anteriormente, los tipos nullables son como una caja, al asignarle <code>null</code> estamos creando una caja que puede contener un <code>int</code> pero que al momento estamos dejando vacía. Podemos entonces trabajar con nuestra variable:</double></int></p>

<p><figure><img src='/postimages/post/tipos-nullables-en-c-sharp/post.jsonboxes.png' alt='Tipos por valor images_set' /></figure></p>

<h5 id=\"obteniendo-un-el-valor-o-una-excepcin\">Obteniendo un el valor (o una excepción)</h5>
<p>Para obtener el valor contenido dentro de un <em>nullable</em>, tenemos a nuestra disposición la propiedad <code>Value</code>, que debemos usar con cuidado, puesto que en caso de que el <em>nullable</em> no tenga un valor asignado, lanzará una exepción del tipo <code>InvalidOperationException</code>. 
<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">enteroNullable</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="c1">// int enteroExcepcional = enteroNullable.Value; </span>
<span class="c1">// Este código lanza una excepcion ^&lt;/p&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">enteroNullable</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">sinExcepciones</span> <span class="p">=</span> <span class="n">enteroNullable</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span></code></pre></figure></p>

<h5 id=\"comprobando-si-tiene-un-valor\">Comprobando si tiene un valor</h5>
<p>Si lo que queremos es evitarnos manejar exepciones, conocer si nuestra variable tiene un valor asignado con la propiedad <code>HasValue</code> 
<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">if</span><span class="p">(</span><span class="n">enteroNullable</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">La</span> <span class="n">caja</span> <span class="n">está</span> <span class="n">llena</span><span class="err">”</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">else</span> 
<span class="p">{</span>
	<span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="err">“</span><span class="n">La</span> <span class="n">caja</span> <span class="n">está</span> <span class="n">vacía</span> <span class="p">:(</span><span class="err">“</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure></p>

<h5 id=\"obteniendo-un-valor-por-default\">Obteniendo un valor por default</h5>
<p>Si lo que de verdad nos interesa es obtener un valor de nuestra variable, podemos usar <code>GetValueOrDefaut</code>, que es un método que podemos usar para asegurarnos que no nos encontraremos con una exepción al consultar el valor. Lo que nos devolverá el método es:</p>

<ul>
  <li>El valor contenido dentro del <em>nullable</em>, si tiene alguno</li>
  <li>El valor por default del tipo de nuestro <em>nullable</em>, si este no tiene alguno o el valor que usemos como parámetro en nuestro método <code>GetValueOrDefaut</code>.</li>
</ul>

<p><figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">enteroNullable</span> <span class="p">=</span> <span class="k">null</span><span class="p">;&lt;/</span><span class="n">p</span><span class="p">&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="kt">int</span> <span class="n">defaultValue</span> <span class="p">=</span> <span class="n">enteroNullable</span><span class="p">.</span><span class="n">GetValueOrDefault</span><span class="p">();</span>
<span class="c1">// defaultValue == 0&lt;/p&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="kt">int</span> <span class="n">noTanDefaultValue</span> <span class="p">=</span> <span class="n">enteroNullable</span><span class="p">.</span><span class="n">GetValueOrDefault</span><span class="p">(</span><span class="m">8</span><span class="p">);</span>
<span class="c1">// noTanDefaultValue == 8&lt;/p&gt;</span>

<span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">enteroNullable</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span> <span class="c1">// Le asignamos un valor a la variable</span>
<span class="kt">int</span> <span class="n">realValue</span> <span class="p">=</span> <span class="n">enteroNullable</span><span class="p">.</span><span class="n">GetValueOrDefault</span><span class="p">();</span>
<span class="c1">// realValue == 100</span></code></pre></figure></p>

<p><br />
Ahora sí: en futuros post seguré explorando algunos detalles escenciales de C#, como arreglos, métodos y clases.</p>

"
}