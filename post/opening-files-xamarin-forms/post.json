{	
	"id" : "/post/opening-files-xamarin-forms/",
	"tv" : false,
	"date": "2016-01-08 15:00:00 -0600",
	"title" : "Opening files in Xamarin.Forms",
	"author" : "Antonio Feregrino Bola√±os",
	"featured_image": "http://thatcsharpguy.com/postimagesfeatured.png",
	"tags" : ["Xamarin","XamarinForms"],
	  
	"content": '"Do you want your app to receive files from other applications?  \n\nLet's set a practical example: I built a simple [markdown viewer in Xamarin.Forms](/MrkViewer) and what I wanted my app to do was to show up in the available options when a `.md` file were about to be opened. This is a pretty straightforward task when developing platform specific projects... but when using Xamarin.Forms you may not know where to start, to be honest, I wasn't.  \n  \n### Starting point\nFirst fo all, remember that **all Xamarin.Forms apps are nothing but native apps**, there is no magic regarding them. They all start in the same point whether it is a MainActivity for Xamarin.Android, an App.xaml for Windows Phone or an AppDelegate form Xamarin.iOS and when dealing with incoming files the same applies. So, with that in mind, let's start.\n\n## Xamarin.Forms  \nLet's create a sample application that will show the name and content of the received file, just create class to hold the data, for this sample it'll only contain a `Name` and `Content` property, but you can extend it later to fit your needs. \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">class</span> <span class="nc">IncomingFile</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tpublic</span> <span class="kt">string</span> <span class="n">Content</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>\n\nNext, create a page (in this sample `FilePage.xaml`) with two labels (for the file name and file content), give them a name and add the next method in the code behind: \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">npublic</span> <span class="k">void</span> <span class="n">SetIncomingFile</span><span class="p">(</span><span class="n">IncomingFile</span> <span class="n">file</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tFileName</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">file</span><span class="p">.</span><span class="n">Name</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tFileContent</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="n">file</span><span class="p">.</span><span class="n">Content</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>\n\nThen, in your Forms app starting point (generally App.cs) create a property of type IncomingFile, don't just use an autoimplemented property, create a backing field for it. Somewhat like this:\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nprivate</span> <span class="n">IncomingFile</span> <span class="n">_incomingFile</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">npublic</span> <span class="n">IncomingFile</span> <span class="n">IncomingFile</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tget</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_incomingFile</span><span class="p">;</span> <span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">tset</span> <span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t_incomingFile</span> <span class="err">\</span><span class="n">t</span><span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="err">\</span><span class="n">t</span><span class="p">(</span><span class="n">MainPage</span> <span class="k">as</span> <span class="n">FilePage</span><span class="p">).</span><span class="n">SetIncomingFile</span> <span class="p">(</span><span class="n">_incomingFile</span><span class="p">);</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="p">}</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>\n\nNotice how everytime the IncomingFile property is modified, the method `SetIncomingFile` of `FilePage` is called. We will be using this property to set the file from within each platform code. So, let's dive right into it.\n\n## Windows 8.1  \nI'll start with Windows 8.1, since it was my main target with MrkViewer, check the getting started on <a href=\"https://developer.xamarin.com/guides/cross-platform/xamarin-forms/windows/\" target=\"_blank\">how to create a Windows App</a> for more info. I won't cover Windows Phone or UWP apps because they are similar to Win 8.1.\n  \nFirst of all: you must create a file association inside your application manifest, double click the `appxmanifest` file, a window will open, from there select the Declarations tab and using the dropdow list select `File Type Associations` and click add.  \n\n\n<div class=\"pure-g\">\n<div class=\"pure-u-lg-1-3\">\n<figure><img src='/postimages/post/opening-files-xamarin-forms/post.jsonappxmanifest.png' alt='\"The appxmanifest file\" images_set' /></figure>\n</div>\n<div class=\"pure-u-lg-1-3\">\n<figure><img src='/postimages/post/opening-files-xamarin-forms/post.jsonfile-assoc.png' alt='\"Add new File Type Association\" images_set' /></figure>\n</div>  \n</div>\n<br />\nAfter clicking `Add` a form will appear to the right, we'll keep things simple. Fill in the form the following fields:  \n\n - **Display name**: Markdown\n - **Name**: md\n - **File type**: .md (don't forget the leading dot)\n\nAnd that's about it. Next, we'll have to get the file when our app is launched for that purpose.  \n  \nIn Windows 8.1 different methods are called depending on what kind of event launched our app, when our app is opened as the result of a File Type Association, the starting poit of the app will be the `OnFileActivated` method inside the `App` class. Let's override it: \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nprotected</span> <span class="k">override</span> <span class="k">void</span> <span class="n">OnFileActivated</span><span class="p">(</span><span class="n">FileActivatedEventArgs</span> <span class="n">e</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="k">base</span><span class="p">.</span><span class="n">OnFileActivated</span><span class="p">(</span><span class="n">e</span><span class="p">);</span><span class="err">\</span><span class="n">n</span>    <span class="c1">// ...\n</span></code></pre></figure>  \n  \nThe reference to the recently opened file is inside the `FileActivatedEventArgs`, to find it use something like this:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nStorageFile</span> <span class="n">file</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span><span class="err">\</span><span class="n">nif</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">Files</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="n">file</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">Files</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="k">as</span> <span class="n">StorageFile</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nLaunching an app to receive a file is not so different than launching it normally, so after we get the reference to the desired file, we must let the launching process continue as usually, for that copy the code inside the `OnLaunched` from `Frame rootFr...` to `if (rootF...`  and paste it after the code above.\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n</span>    <span class="n">file</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">Files</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="k">as</span> <span class="n">StorageFile</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="p">}</span> <span class="c1">//\n\nFrame rootFrame = Window.Current.Content as Frame;\nif (rootFrame == null)\n{\n    rootFrame = new Frame();\n    rootFrame.Language = Windows.Globalization.ApplicationLanguages.Languages[0];\n    rootFrame.NavigationFailed += OnNavigationFailed;\n\n    Xamarin.Forms.Forms.Init(e); // &lt;- DON&#39;T FORGET TO INITIALIZE FORMS\n\n    Window.Current.Content = rootFrame;\n}\n</span></code></pre></figure>  \n  \nNow all we have to do is to navigate to the generated `MainPage` passing the file as a navigation parameter:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n</span><span class="c1">// Pass the recently opened file ----vvvv\nrootFrame.Navigate(typeof(MainPage), file);\nWindow.Current.Activate();\n</span></code></pre></figure>  \n\nAs you may guess, there is still work to do inside the Windows 8 generated  `MainPage`, and that's true. We still need to get the file passed as navigation parameter. First of all, instead of calling the forms app in this way `LoadApplication(new YOUR_NAMESPACE.App());`, create a field of type `new YOUR_NAMESPACE.App`, like\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nFileReceiver</span><span class="p">.</span><span class="n">App</span> <span class="n">_app</span><span class="p">;</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nAnd then call the `LoadApplication` using that field\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n_app</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FileReceiver</span><span class="p">.</span><span class="n">App</span><span class="p">();</span><span class="err">\</span><span class="n">nLoadApplication</span><span class="p">(</span><span class="n">_app</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nNow the final step: override the `OnNavigatedTo` method inside the `MainPage` class, but we need to be extra careful here, since this method will be called regardless of how was the app launched, so take that in consideration:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nprotected</span> <span class="k">override</span> <span class="k">async</span> <span class="k">void</span> <span class="n">OnNavigatedTo</span><span class="p">(</span><span class="n">NavigationEventArgs</span> <span class="n">e</span><span class="p">)</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span>    <span class="n">StorageFile</span> <span class="n">storageFile</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">Parameter</span> <span class="k">as</span> <span class="n">StorageFile</span><span class="p">;</span><span class="err">\</span><span class="n">n</span>    <span class="k">if</span> <span class="p">(</span><span class="n">storageFile</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span><span class="err">\</span><span class="n">n</span>    <span class="p">{</span><span class="err">\</span><span class="n">n</span>        <span class="kt">string</span> <span class="n">content</span> <span class="p">=</span> <span class="k">await</span> <span class="n">FileIO</span><span class="p">.</span><span class="n">ReadTextAsync</span><span class="p">(</span><span class="n">storageFile</span><span class="p">);</span><span class="err">\</span><span class="n">n</span>        <span class="kt">var</span> <span class="n">incomingFile</span> <span class="p">=</span> <span class="k">new</span> <span class="n">IncomingFile</span><span class="err">\</span><span class="n">n</span>        <span class="p">{</span><span class="err">\</span><span class="n">n</span>            <span class="n">Name</span> <span class="p">=</span> <span class="n">storageFile</span><span class="p">.</span><span class="n">DisplayName</span><span class="p">,</span><span class="err">\</span><span class="n">n</span>            <span class="n">Content</span> <span class="p">=</span> <span class="n">content</span><span class="err">\</span><span class="n">n</span>        <span class="p">};</span><span class="err">\</span><span class="n">n</span>        <span class="n">_app</span><span class="p">.</span><span class="n">IncomingFile</span> <span class="p">=</span> <span class="n">incomingFile</span><span class="p">;</span><span class="err">\</span><span class="n">n</span>    <span class="p">}</span><span class="err">\</span><span class="n">n</span>    <span class="k">base</span><span class="p">.</span><span class="n">OnNavigatedTo</span><span class="p">(</span><span class="n">e</span><span class="p">);</span><span class="err">\</span><span class="n">n</span><span class="p">}</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n<br />\n\n## Android\nAs with Windows, in Android you must tell the OS that your app is ready to receive a certain kind of files, and to do so, you must edit the `AndroidManifest.xml` file. Remember that for Xamarin.Android there are two ways to work with the manifest:\n\n - Editing the XML\n\t\t\n<figure class="highlight"><pre><code class="language-xml" data-lang="xml">\n<span class="nt">&lt;activity</span>  <span class="na">android:icon=</span><span class="s">\&quot;@drawable/icon\&quot;</span> <span class="na">android:label=</span><span class="s">\&quot;FileReceiver\&quot;</span>  <span class="na">name=</span><span class="s">\&quot;Something.MainActivity\&quot;</span><span class="nt">&gt;</span>\n    <span class="nt">&lt;intent-filter&gt;</span>\n        <span class="nt">&lt;action</span> <span class="na">android:name=</span><span class="s">\&quot;android.intent.action.VIEW\&quot;</span> <span class="nt">/&gt;</span>\n        <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">\&quot;android.intent.category.DEFAULT\&quot;</span> <span class="nt">/&gt;</span>\n        <span class="nt">&lt;category</span> <span class="na">android:name=</span><span class="s">\&quot;android.intent.category.BROWSABLE\&quot;</span> <span class="nt">/&gt;</span>\n        <span class="nt">&lt;data</span> <span class="na">android:scheme=</span><span class="s">\&quot;file\&quot;</span> <span class="nt">/&gt;</span>\n        <span class="nt">&lt;data</span> <span class="na">android:mimeType=</span><span class="s">\&quot;*/*\&quot;</span> <span class="nt">/&gt;</span>\n        <span class="nt">&lt;data</span> <span class="na">android:pathPattern=</span><span class="s">\&quot;.*\\\\.md\&quot;</span> <span class="nt">/&gt;</span>\n    <span class="nt">&lt;/intent-filter&gt;</span>\n<span class="nt">&lt;/activity&gt;</span>\n</code></pre></figure>\n\t\t\n - Using class level attributes\n\t\t\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n</span><span class="p">[</span><span class="n">Activity</span><span class="p">(</span><span class="n">Label</span> <span class="p">=</span> <span class="err">\</span><span class="s">&quot;FileReceiver\&quot;,\n        MainLauncher = true, Icon = \&quot;@drawable/icon\&quot;)]\n    [IntentFilter(\n        new[] { Intent.ActionView },\n        Categories = new[]\n        { \n            Intent.CategoryDefault,\n            Intent.CategoryBrowsable,\n        },\n        DataScheme = \&quot;file\&quot;,\n        DataMimeType = \&quot;*/*\&quot;,\n        DataPathPattern = \&quot;.*\\\\.md\&quot;\n    )]\n</span></code></pre></figure>\n\nFor this sample let's take the attribute approach. Then, once the `MainActivity.cs` file is open, separate the `LoadApplication` method and the instantiation of the Forms app: \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nvar</span> <span class="n">application</span> <span class="p">=</span> <span class="k">new</span> <span class="n">App</span> <span class="p">();</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">nLoadApplication</span> <span class="p">(</span><span class="n">application</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nIn Android, every time an app is launched to receive a file, the `OnCreate` method is executed as if it were launched manually by the user, no special method is called or something, to know if the app was launched to receive a file we'll have to look at the Activity's Intent action and type:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nstring</span> <span class="n">action</span> <span class="p">=</span> <span class="n">Intent</span><span class="p">.</span><span class="n">Action</span><span class="p">;</span><span class="err">\</span><span class="n">nstring</span> <span class="n">type</span> <span class="p">=</span> <span class="n">Intent</span><span class="p">.</span><span class="n">Type</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">nif</span> <span class="p">(</span><span class="n">Intent</span><span class="p">.</span><span class="n">ActionView</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">action</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">String</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">type</span><span class="p">))</span><span class="err">\</span><span class="n">n</span><span class="p">{</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">t</span><span class="c1">// This app was launched to receive a file ...\n</span></code></pre></figure>  \n\nAfter we are sure that the app was to receive a file, we can safely get an `Uri` to the file by getting the Intent data, reading it and then creating an instance of the previously defined `IncomingFile` class:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nAndroid</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">Uri</span> <span class="n">fileUri</span> <span class="p">=</span> <span class="n">Intent</span><span class="p">.</span><span class="n">Data</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">nstring</span> <span class="n">fileContent</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="n">ReadAllText</span><span class="p">(</span><span class="n">fileUri</span><span class="p">.</span><span class="n">Path</span><span class="p">);</span><span class="err">\</span><span class="n">nstring</span> <span class="n">fileName</span> <span class="p">=</span> <span class="n">fileUri</span><span class="p">.</span><span class="n">LastPathSegment</span><span class="p">;</span><span class="err">\</span><span class="n">n</span><span class="err">\</span><span class="n">nvar</span> <span class="n">incomingFile</span> <span class="p">=</span> <span class="k">new</span> <span class="n">IncomingFile</span> <span class="p">{</span> <span class="n">Name</span> <span class="p">=</span> <span class="n">fileName</span><span class="p">,</span> <span class="n">Content</span> <span class="p">=</span> <span class="n">fileContent</span> <span class="p">};</span> <span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nWe have finally handled a file receiving within the Xamarin.Android project, the last thing we have to do is to set the `IncomingFile` property of the Forms app, a call to `application.IncomingFile` will do the trick:  \n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">napplication</span><span class="p">.</span><span class="n">IncomingFile</span> <span class="p">=</span> <span class="n">incomingFile</span><span class="p">;</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\n<br />\n\n## iOS  \nWe already know that we need to register our app somehow to let the os know about the existence of our app, and in iOS the wa to do this is v√≠a the `Info.plist` file. When I started  to implement this I struggled a bit because I think the docummentation a bit too vague.  \n  \nAny way, in your app, open the Info.plist file, and at the bottom part click on the `Advanced tab`, now, we have to fill in some information about the type of files we want to open in our app, for Markdown files we must add a new *Document Type* with the following values:  \n  \n - **Name**: Markdown document\n - **Types**: net.daringfireball.markdown  \n  \nNow, since `net.daringfireball.markdown` is not a known type for iOS, we have to register it in the same UI we declared the filetype association, click add in *Exported UTIs*, once available, put this values on the text fields:  \n  \n - **Description**: Markdown document\n - **Identifier**: net.daringfireball.markdown\n - **Conforms To**: public.plain-text  \n\nThere is a few lines we need to add in order to make this work, like adding `.md` as a file extension for the files... just to be sure, open the `Info.plist` with an XML editor and make sure it looks <a href=\"https://github.com/fferegrino/xf-file-receiver/blob/master/FileReceiver.iOS/Info.plist#L52\" target=\"blank\">somewhat like this in code</a> or take a look at the following image.\n\n<figure><img src='/postimages/post/opening-files-xamarin-forms/post.jsonfile-assoc-ios.png' alt='\"Add new File Type Association in iOS\" images_set' /></figure>  \n  \nNow, the most fun part, the code.  \n  \nAs with the Windows version of our app, we need to separate the call to `LoadApplicaton` from the instatiation of the Forms app, again, create a Field inside the `AppDelegate` class of type `new YOUR_NAMESPACE.App`, like:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">nFileReceiver</span><span class="p">.</span><span class="n">App</span> <span class="n">_app</span><span class="p">;</span><span class="err">\</span><span class="n">n</span></code></pre></figure> \n\nNow, inside the `FinishedLaunching` method, instantiate the `_app` field and call `LoadApplication` using it as a parameter:\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n_app</span> <span class="p">=</span> <span class="k">new</span> <span class="n">App</span> <span class="p">();</span><span class="err">\</span><span class="n">nLoadApplication</span><span class="p">(</span><span class="n">_app</span><span class="p">);</span><span class="err">\</span><span class="n">n</span></code></pre></figure>  \n\nWhen our app is launched to open a file, a method is called in the `AppDelegate` class, it's name is `OpenUrl`. In order to handle the icoming file, we must override it. The method receives an `NSUrl` as an argument, and that is the url of our file.  \n  \nI will use the `File.ReadAllText` static method inside the `System.IO` to get the content of the app that has to be opened by the app, such method takes a file path (in the form of string) as a parameter and returns the text contained by that same file.  \n  \nBe careful here because there is a catch with the url you are given inside your method: it has the protocol `file://` at the beginning of the url, so you need to remove it before sending the path to the `ReadAllText` method, in this case, I just trimmed the first 7 characters of the url:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n</span><span class="c1">// Remove \&quot;file://\&quot; at the beginning of the url:\nstring filePath = url.AbsoluteString.Substring(7);\n</span></code></pre></figure>  \n  \nNow it is safe to read all the text inside the file and pass it to the Forms application:\n\n<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="err">\</span><span class="n">n</span><span class="c1">// Get the file name\nvar fileName = url.PathComponents [url.PathComponents.Length - 1];\n\nvar fileContent = System.IO.File.ReadAllText (filePath);\n_app.IncomingFile = new IncomingFile \n{\n    Name =  fileName,\n    Content = fileContent\n};\n</span></code></pre></figure>  \n\nIn iOS you are responsible to clean all the files that your app opens in this way, my recommendation is that you delete the file after reading it.  \n  \n## Wrapping up  \nAs you can see, it is not hard to enable your Xamarin.Forms app to open certain kind of files, all you have to do is tell the operating system (through configuration files) that your app is capable of opening that kind of files, and then write some code at the beginning of your app to handle the incoming file. "'   
}