{	
	"id" : "/post/var-en-c-sharp/",
	"tv" : false,
	"date": "2015-10-29 14:00:00 -0600",
	"title" : "¿Qué es var en C#?",
	"author" : "Antonio Feregrino Bolaños",
	"featured_image": "http://thatcsharpguy.com/postimages/var-en-c-sharp/featured.jpg",
	"tags" : ["AprendeCSharp"],
	"content": "<p>Como programadores hay muchas ventajas que nos otorga C#, ya sea a la hora de escribir nuestros programas o a la hora de ponerlos a funcionar. En este post les voy a hablar acerca de una de las ventajas al escribir nuestros programas, pero para eso, veamos antes este código:</p>\n<pre class=\"csharp\">\nvar numeroElementos = 5;\nvar otroNumero = 5L;\nvar nombre = \"Paquito\";\nvar x = nombre + numeroElementos;\nvar y = numeroElementos + otroNumero;\nvar sb =  new StringBuilder();\nvar buenEstudiante =  new Persona(\"Estudiante\");\n</pre>\n<p><strong>¿Uhhhh?</strong> ¿entonces qué significa <code>var</code>?</p>\n\n<h3 id=\"var\">var</h3>\n<p>Pues bien, usar la palabra <strike>reservada</strike> <code>var</code> significa que estamos dejándole al compilador la tarea de asignar un tipo a nuestras variables. Llamamos a esto <em>tipado implícito</em>, así nos quitamos de encima la tarea de escribir los tipos completos. Entonces:</p>\n\n<ul>\n  <li><code>var numeroElementos = 5;</code> → <code>int numeroElementos = 5;</code></li>\n  <li><code>var otroNumero = 5l;</code> → <code>long otroNumero = 5l;</code></li>\n  <li><code>var nombre = \"Paquito\";</code> → <code>string nombre = \"Paquito\";</code>  <br />\n<br /></li>\n</ul>\n\n<p>Pero no solo eso, también podemos usar <code>var</code> para instanciaciones un poco más complejas:</p>\n\n<ul>\n  <li><code>nombre + numeroElementos</code> es <code>string + int</code> que resulta en <code>string</code>, por lo tanto tambièn pudimos haber escrito: <code>string x = nombre + numeroElementos;</code></li>\n  <li><code>numeroElementos + otroNumero</code> es <code>int + long</code> que resulta en <code>long</code>, por lo tanto también pudimos haber escrito <code>long y = numeroElementos + otroNumero</code>  <br />\n<br /></li>\n</ul>\n\n<p>Tambén podríamos pensar que <code>var</code> funciona solo para tipos primitivos del lenguaje, sin embargo no es así, como lo demuestra:</p>\n\n<ul>\n  <li><code>var buenEstudiante = new Persona(\"Estudiante\")</code> en la que podemos reemplazar <code>var</code> por <code>Persona</code>, o</li>\n  <li><code>var sb = new StringBuilder();</code> en la que puede ser reemplazada por <code>StringBuilder</code></li>\n</ul>\n\n<h3 id=\"casos-especiales\">Casos especiales</h3>\n<p>Si bien es posible usar <code>var</code> para cualquier instanciación de una variable como en los casos anteriores, no es común usarla ya que a lo mucho nos está ahorrando algunas letras por cada variable. Sin embargo hay casos en los que su uso se vuelve bastante relevante y hasta necesario.<br />\n<br />\nUn caso en el que es bastánte práctico usarlo es cuando estamos trabajando con LINQ (LINQ es un tema que merece su propio post, y lo tendrá), ya que muchas veces no es tan claro el resultado de una sentencia LINQ, por lo tanto es común encontrar declaraciones como:</p>\n<pre class=\"csharp\">\nvar listaMenores = personas.Where(p =&gt; p.Edad &lt; 10).ToList();\n\nvar listaMayores = from p in personas\n\t\t\t\t   where p.Edad &gt; 10\n\t\t\t\t   select p;\n</pre>\n\n<p>Un caso en el que es <strong>completamente necesario</strong> el uso de <code>var</code> es cuando dentro de nuestro código usamos tipos anónimos, en pocas palabras un tipo anónimo es un objeto creado “al vuelo” sin declarar una clase. Aunque estos, al igual que LINQ, merecen su propio post (que también haré).</p>\n\n<h3 id=\"limitaciones\">Limitaciones</h3>\n<p>El <em>tipado implícito</em> tiene algunas limitantes, una de ellas parecería ser bastante obvia, y esta es que no se puede escribir una declaración como:</p>\n<pre class=\"csharp\">\nvar indeciso = null;\n</pre>\n<p>Ya que el compilador no puede inferir el tipo de <code>null</code>, si lo intentamos obtendremos un bonito error de compilación.\nLa segunda limitante es que únicamente podemos usar <code>var</code> para variables locales, es decir, únicamente dentro de la implementación de nuestros métodos. En otras palabras, no podemos hacer algo como:</p>\n<pre class=\"csharp\">\nclass Persona \n\n\tvar Edad = 10;\n\t\n\tpublic Persona( // ...\n</pre>\n\n<h3 id=\"desventajas\">Desventajas</h3>\n<p>La única gran desventaja que veo en esta caracterísitca es que si se abusa de ellos y en combinación con tipos de dato complejos podemos escribir código potencialmente inentendible, al grado que ni nosotros mismos podamos entender lo que escribimos.<br />\nPersonalmente siempre uso <code>var</code> para declaraciones de tipos de dato simples como enteros o cadenas.</p>\n\n<h3 id=\"importante\">Importante</h3>\n<p>Es importante repetir esto: <strong>C# sigue siendo fuertemente tipado, con var lo único que hacemos es dejarle la tarea al compilador de asignar un tipo para nuestra variable al momento de la compilación</strong>.<br />\n<br />\nEn el post original había mencionado que <code>var</code> es una palabra reservada, cuando en realdad, no lo es. Depende del contexto.</p>\n\n<h3 id=\"lo-que-sigue\">Lo que sigue</h3>\n<p>En este post hablamos de dos nuevos conceptos: LINQ y tipos anónimos, y sobre uno de ellos dos será el post siguiente, ¿tienes preferencia sobre alguno? házmelo saber vía <a href=\"https://twitter.com/intent/tweet?text=@io_exception\">Twitter</a> o por <a href=\"mailto: site.email ?subject= page.title \">correo electrónico</a>.</p>\n\n"
}